/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
import type { Context, Env } from 'hono';

import { MetricsServiceGetClusterMetricDataParams,
ClusterServiceGetSlowQueryListParams,
ClusterServiceDownloadSlowQueryListParams,
ClusterServiceGetSlowQueryDetailParams,
ClusterServiceGetSqlPlanListParams,
ClusterServiceGetSqlPlanBindingListParams,
ClusterServiceUnbindSqlPlanParams,
ClusterServiceGetTopSqlListParams,
ClusterServiceGetTopSqlDetailParams,
MetricsServiceGetHostMetricDataParams,
LabelServiceListLabelsParams,
Temapiv2LabelBody,
Temapiv2LabelBody,
V2BindLabelRequest,
V2BindResourceRequest,
V2LoginRequest,
MetricsServiceGetMetricsParams,
MetricsServiceGetTopMetricDataParams,
MetricsServiceGetOverviewStatusParams,
UserServiceListUsersParams,
V2User,
V2User,
UserServiceListUserRolesParams } from './index.schemas';

export type MetricsServiceGetClusterMetricDataContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/metrics/:name/data', { in: { param: {
 clusterId: string,
    name: string,
 },query: MetricsServiceGetClusterMetricDataParams, }, out: { param: {
 clusterId: string,
    name: string,
 },query: MetricsServiceGetClusterMetricDataParams, } }>
export type MetricsServiceGetClusterMetricInstanceContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/metrics/:name/instance', { in: { param: {
 clusterId: string,
    name: string,
 }, }, out: { param: {
 clusterId: string,
    name: string,
 }, } }>
export type ClusterServiceGetProcessListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sessions', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceDeleteProcessContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sessions/:sessionId', { in: { param: {
 clusterId: string,
    sessionId: string,
 }, }, out: { param: {
 clusterId: string,
    sessionId: string,
 }, } }>
export type ClusterServiceGetSlowQueryListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries', { in: { param: {
 clusterId: string,
 },query: ClusterServiceGetSlowQueryListParams, }, out: { param: {
 clusterId: string,
 },query: ClusterServiceGetSlowQueryListParams, } }>
export type ClusterServiceGetSlowQueryAvailableAdvancedFiltersContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/advancedFilters', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceDownloadSlowQueryListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/download', { in: { param: {
 clusterId: string,
 },query: ClusterServiceDownloadSlowQueryListParams, }, out: { param: {
 clusterId: string,
 },query: ClusterServiceDownloadSlowQueryListParams, } }>
export type ClusterServiceGetSlowQueryAvailableFieldsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/fields', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceGetSlowQueryDetailContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/:digest', { in: { param: {
 clusterId: string,
    digest: string,
 },query: ClusterServiceGetSlowQueryDetailParams, }, out: { param: {
 clusterId: string,
    digest: string,
 },query: ClusterServiceGetSlowQueryDetailParams, } }>
export type ClusterServiceGetSqlPlanListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans', { in: { param: {
 clusterId: string,
 },query: ClusterServiceGetSqlPlanListParams, }, out: { param: {
 clusterId: string,
 },query: ClusterServiceGetSqlPlanListParams, } }>
export type ClusterServiceBindSqlPlanContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans/:planDigest:bindSqlPlan', { in: { param: {
 clusterId: string,
    planDigest: string,
 }, }, out: { param: {
 clusterId: string,
    planDigest: string,
 }, } }>
export type ClusterServiceCheckSupportContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:checkSupport', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceGetSqlPlanBindingListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:showBinding', { in: { param: {
 clusterId: string,
 },query: ClusterServiceGetSqlPlanBindingListParams, }, out: { param: {
 clusterId: string,
 },query: ClusterServiceGetSqlPlanBindingListParams, } }>
export type ClusterServiceUnbindSqlPlanContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:unbindSqlPlan', { in: { param: {
 clusterId: string,
 },query: ClusterServiceUnbindSqlPlanParams, }, out: { param: {
 clusterId: string,
 },query: ClusterServiceUnbindSqlPlanParams, } }>
export type ClusterServiceGetTopSqlListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls', { in: { param: {
 clusterId: string,
 },query: ClusterServiceGetTopSqlListParams, }, out: { param: {
 clusterId: string,
 },query: ClusterServiceGetTopSqlListParams, } }>
export type ClusterServiceGetTopSqlAvailableFieldsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/fields', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceGetTopSqlDetailContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/:digest', { in: { param: {
 clusterId: string,
    digest: string,
 },query: ClusterServiceGetTopSqlDetailParams, }, out: { param: {
 clusterId: string,
    digest: string,
 },query: ClusterServiceGetTopSqlDetailParams, } }>
export type MetricsServiceGetHostMetricDataContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId/metrics/:name/data', { in: { param: {
 hostId: string,
    name: string,
 },query: MetricsServiceGetHostMetricDataParams, }, out: { param: {
 hostId: string,
    name: string,
 },query: MetricsServiceGetHostMetricDataParams, } }>
export type LabelServiceListLabelsContext<E extends Env = any> = Context<E, '/api/v2/labels', { in: { query: LabelServiceListLabelsParams, }, out: { query: LabelServiceListLabelsParams, } }>
export type LabelServiceCreateLabelContext<E extends Env = any> = Context<E, '/api/v2/labels', { in: { json: Temapiv2LabelBody, }, out: { json: Temapiv2LabelBody, } }>
export type LabelServiceDeleteLabelContext<E extends Env = any> = Context<E, '/api/v2/labels/:labelId', { in: { param: {
 labelId: string,
 }, }, out: { param: {
 labelId: string,
 }, } }>
export type LabelServiceUpdateLabelContext<E extends Env = any> = Context<E, '/api/v2/labels/:labelId', { in: { param: {
 labelId: string,
 },json: Temapiv2LabelBody, }, out: { param: {
 labelId: string,
 },json: Temapiv2LabelBody, } }>
export type LabelServiceBindLabelContext<E extends Env = any> = Context<E, '/api/v2/labels:bindLabel', { in: { json: V2BindLabelRequest, }, out: { json: V2BindLabelRequest, } }>
export type LabelServiceBindResourceContext<E extends Env = any> = Context<E, '/api/v2/labels:bindResource', { in: { json: V2BindResourceRequest, }, out: { json: V2BindResourceRequest, } }>
export type UserServiceLoginContext<E extends Env = any> = Context<E, '/api/v2/login', { in: { json: V2LoginRequest, }, out: { json: V2LoginRequest, } }>
export type UserServiceLogoutContext<E extends Env = any> = Context<E, '/api/v2/logout'>
export type MetricsServiceGetMetricsContext<E extends Env = any> = Context<E, '/api/v2/metrics', { in: { query: MetricsServiceGetMetricsParams, }, out: { query: MetricsServiceGetMetricsParams, } }>
export type MetricsServiceGetTopMetricDataContext<E extends Env = any> = Context<E, '/api/v2/overview/metrics/:name/data', { in: { param: {
 name: string,
 },query: MetricsServiceGetTopMetricDataParams, }, out: { param: {
 name: string,
 },query: MetricsServiceGetTopMetricDataParams, } }>
export type MetricsServiceGetOverviewStatusContext<E extends Env = any> = Context<E, '/api/v2/overview/status', { in: { query: MetricsServiceGetOverviewStatusParams, }, out: { query: MetricsServiceGetOverviewStatusParams, } }>
export type UserServiceListUsersContext<E extends Env = any> = Context<E, '/api/v2/users', { in: { query: UserServiceListUsersParams, }, out: { query: UserServiceListUsersParams, } }>
export type UserServiceCreateUserContext<E extends Env = any> = Context<E, '/api/v2/users', { in: { json: V2User, }, out: { json: V2User, } }>
export type UserServiceDeleteUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 }, }, out: { param: {
 userId: string,
 }, } }>
export type UserServiceUpdateUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 },json: V2User, }, out: { param: {
 userId: string,
 },json: V2User, } }>
export type UserServiceListUserRolesContext<E extends Env = any> = Context<E, '/api/v2/users:userRoles', { in: { query: UserServiceListUserRolesParams, }, out: { query: UserServiceListUserRolesParams, } }>
export type UserServiceValidateSessionContext<E extends Env = any> = Context<E, '/api/v2/users:validateSession'>