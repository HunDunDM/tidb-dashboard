{
  "swagger": "2.0",
  "info": {
    "title": "Azores Open API",
    "version": "2.0.0"
  },
  "tags": [
    {
      "name": "MetricsService"
    },
    {
      "name": "ClusterService"
    },
    {
      "name": "DiagnosisService"
    },
    {
      "name": "LabelService"
    },
    {
      "name": "UserService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v2/clusters/{clusterId}/metrics/{name}/data": {
      "get": {
        "summary": "Get cluster metric data",
        "operationId": "MetricsService_GetClusterMetricData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ClusterMetricData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Metric Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Start time in Unix timestamp format",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time in Unix timestamp format",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "step",
            "description": "Step time in seconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "label",
            "description": "Line Label for the metric",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "range",
            "description": "Time Range for the query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/metrics/{name}/instance": {
      "get": {
        "summary": "Get metric instances",
        "operationId": "MetricsService_GetClusterMetricInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ClusterMetricInstance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Metric name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/resourcegroups": {
      "get": {
        "summary": "Get resource group list",
        "operationId": "DiagnosisService_GetResourceGroupList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ResourceGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sessions": {
      "get": {
        "summary": "GetProcessList retrieves the list of running processes in a cluster",
        "operationId": "ClusterService_GetProcessList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ProcessList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID uniquely identifies the target cluster",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sessions/{sessionId}": {
      "delete": {
        "summary": "DeleteProcess terminates a specific process in the cluster",
        "operationId": "ClusterService_DeleteProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID uniquely identifies the target cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionId",
            "description": "Session ID identifies the process to be terminated",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries": {
      "get": {
        "summary": "GetSlowQueryList retrieves the list of slow queries",
        "operationId": "DiagnosisService_GetSlowQueryList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time in Unix timestamp",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time in Unix timestamp",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "db",
            "description": "List of databases",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "text",
            "description": "Search text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "Order by field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDesc",
            "description": "Is descending order",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "description": "Fields to select, e.g., \"Query,Digest\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token for pagination",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Number of records to skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "advancedFilter",
            "description": "Advanced filters, such as \"digest = xxx\"",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/advancedFilters": {
      "get": {
        "summary": "GetSlowQueryAvailableAdvancedFilters retrieves the list of available advanced filters",
        "operationId": "DiagnosisService_GetSlowQueryAvailableAdvancedFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryAvailableAdvancedFilters"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/advancedFilters/{filterName}": {
      "get": {
        "summary": "GetSlowQueryAvailableAdvancedFilterInfo retrieves the list of available advanced filter info",
        "operationId": "DiagnosisService_GetSlowQueryAvailableAdvancedFilterInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryAvailableAdvancedFilterInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "description": "filter name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/download": {
      "get": {
        "summary": "DownloadSlowQueryList downloads the list of slow queries",
        "operationId": "DiagnosisService_DownloadSlowQueryList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryDownloadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time in Unix timestamp",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time in Unix timestamp",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "db",
            "description": "List of databases",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "text",
            "description": "Search text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "Order by field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDesc",
            "description": "Is descending order",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "description": "Fields to select, e.g., \"Query,Digest\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token for pagination",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Number of records to skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "advancedFilter",
            "description": "Advanced filters, such as \"digest = xxx\"",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/fields": {
      "get": {
        "summary": "GetSlowQueryAvailableFields retrieves the list of available fields for slow queries",
        "operationId": "DiagnosisService_GetSlowQueryAvailableFields",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryAvailableFields"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/{digest}": {
      "get": {
        "summary": "GetSlowQueryDetail retrieves the details of a specific slow query",
        "operationId": "DiagnosisService_GetSlowQueryDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "description": "Query digest",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "description": "Timestamp",
            "in": "query",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "connectionId",
            "description": "Connection ID",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqllimits:addSqlLimit": {
      "post": {
        "summary": "Create SQL limit",
        "operationId": "DiagnosisService_AddSqlLimit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosisServiceAddSqlLimitBody"
            }
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqllimits:checkSupport": {
      "get": {
        "summary": "Check if SQL limit is supported",
        "operationId": "DiagnosisService_CheckSqlLimitSupport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CheckSupportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqllimits:removeSqlLimit": {
      "post": {
        "summary": "Remove SQL limit",
        "operationId": "DiagnosisService_RemoveSqlLimit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosisServiceRemoveSqlLimitBody"
            }
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqllimits:showSqlLimit": {
      "get": {
        "summary": "Query SQL limit",
        "operationId": "DiagnosisService_GetSqlLimitList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SqlLimitList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "watchText",
            "description": "Watch text",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans": {
      "get": {
        "summary": "GetSqlPlanList retrieves the list of plans",
        "operationId": "DiagnosisService_GetSqlPlanList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SqlPlanList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "digest",
            "description": "SQL digest",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "schemaName",
            "description": "Table name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans/{planDigest}:bindSqlPlan": {
      "post": {
        "summary": "BindSqlPlan binds a plan to a specific sql",
        "operationId": "DiagnosisService_BindSqlPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "planDigest",
            "description": "SQL plan digest",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans:checkSupport": {
      "get": {
        "summary": "CheckSupport returns whether sql plan binding is supported",
        "operationId": "DiagnosisService_CheckSqlPlanSupport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CheckSupportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans:showSqlPlanBinding": {
      "get": {
        "summary": "GetSQLBindInfo",
        "operationId": "DiagnosisService_GetSqlPlanBindingList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SqlPlanBindingList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "digest",
            "description": "SQL digest",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans:unbindSqlPlan": {
      "post": {
        "summary": "DropSqlPlan unbinds a plan from a specific sql",
        "operationId": "DiagnosisService_UnbindSqlPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "description": "SQL digest",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls": {
      "get": {
        "summary": "GetTopSqlList retrieves the list of top sql",
        "operationId": "DiagnosisService_GetTopSqlList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "db",
            "description": "Database list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "text",
            "description": "SQL Text, used for fuzzy query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "Order by field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDesc",
            "description": "Is descending order",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "description": "Fields to select, e.g., \"Query,Digest\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "advancedFilter",
            "description": "Advanced filters, such as \"digest = xxx\"",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/advancedFilters": {
      "get": {
        "summary": "GetSlowQueryAvailableAdvancedFilters retrieves the list of available advanced filters",
        "operationId": "DiagnosisService_GetTopSqlAvailableAdvancedFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlAvailableAdvancedFilters"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/advancedFilters/{filterName}": {
      "get": {
        "summary": "GetSlowQueryAvailableAdvancedFilterInfo retrieves the list of available advanced filter info",
        "operationId": "DiagnosisService_GetTopSqlAvailableAdvancedFilterInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlAvailableAdvancedFilterInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "description": "filter name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/fields": {
      "get": {
        "summary": "GetTopSqlAvailableFields retrieves the list of available fields for top sqls",
        "operationId": "DiagnosisService_GetTopSqlAvailableFields",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlAvailableFields"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/{digest}": {
      "get": {
        "summary": "GetTopSqlDetail retrieves the details of a specific top sql",
        "operationId": "DiagnosisService_GetTopSqlDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "description": "Query digest",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/hosts/{hostId}/metrics/{name}/data": {
      "get": {
        "summary": "Get host metric data",
        "operationId": "MetricsService_GetHostMetricData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2HostMetricData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Metric Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Start time in Unix timestamp format",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time in Unix timestamp format",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "step",
            "description": "Step time in seconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "label",
            "description": "Line Label for the metric",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "range",
            "description": "Time Range for the query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/labels": {
      "get": {
        "summary": "list labels",
        "operationId": "LabelService_ListLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListLabelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelKey",
            "description": "the label key of the label",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelValue",
            "description": "the label value of the label",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LabelService"
        ]
      },
      "post": {
        "summary": "create label",
        "operationId": "LabelService_CreateLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/temapiv2Label"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "label",
            "description": "the label basic resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/temapiv2Label",
              "required": [
                "label"
              ]
            }
          }
        ],
        "tags": [
          "LabelService"
        ]
      }
    },
    "/api/v2/labels/{labelId}": {
      "delete": {
        "summary": "delete label by label id",
        "operationId": "LabelService_DeleteLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "labelId",
            "description": "the label id of the label",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LabelService"
        ]
      },
      "patch": {
        "summary": "update label basic info by label id",
        "operationId": "LabelService_UpdateLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/temapiv2Label"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "labelId",
            "description": "the label id of the label",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "label",
            "description": "the label basic resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/temapiv2Label",
              "required": [
                "label"
              ]
            }
          }
        ],
        "tags": [
          "LabelService"
        ]
      }
    },
    "/api/v2/labels:bindLabel": {
      "post": {
        "summary": "modify bind object by label id",
        "operationId": "LabelService_BindLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BindLabelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2BindLabelRequest"
            }
          }
        ],
        "tags": [
          "LabelService"
        ]
      }
    },
    "/api/v2/labels:bindResource": {
      "post": {
        "summary": "modify bind object by resource id",
        "operationId": "LabelService_BindResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BindResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2BindResourceRequest"
            }
          }
        ],
        "tags": [
          "LabelService"
        ]
      }
    },
    "/api/v2/login": {
      "post": {
        "summary": "login",
        "operationId": "UserService_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2LoginRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/logout": {
      "post": {
        "summary": "Logout",
        "operationId": "UserService_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/metrics": {
      "get": {
        "summary": "Get metrics info",
        "operationId": "MetricsService_GetMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Metrics"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "class",
            "description": "Level 1 classification\n\n - unspecified: Unspecified\n - cluster: Cluster metrics\n - host: Host metrics\n - overview: Overview metrics",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "unspecified",
              "cluster",
              "host",
              "overview"
            ],
            "default": "unspecified"
          },
          {
            "name": "group",
            "description": "Level 2 grouping\n\n - unspecified: Unspecified group\n - overview: Overview group\n - basic: Basic group\n - advance: Advanced group\n - resource: Resource group\n - performance: Performance group\n - process: Process group",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "unspecified",
              "overview",
              "basic",
              "advance",
              "resource",
              "performance",
              "process"
            ],
            "default": "unspecified"
          },
          {
            "name": "type",
            "description": "Level 3 type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The metric name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/overview/metrics/{name}/data": {
      "get": {
        "summary": "Get top metric data",
        "operationId": "MetricsService_GetTopMetricData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopMetricData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Metric name to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Start time for the query",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time for the query",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "step",
            "description": "Step time for the query",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Limit for the number of top results",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/overview/status": {
      "get": {
        "summary": "Get overview status",
        "operationId": "MetricsService_GetOverviewStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2OverviewStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskStartTime",
            "description": "Task start time in Unix timestamp format",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "taskEndTime",
            "description": "Task end time in Unix timestamp format",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/users": {
      "get": {
        "summary": "ListUsers",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameLike",
            "description": "The name of the user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "emailLike",
            "description": "The email of the user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "CreateUser",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "\nUser resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2User"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/users/{userId}": {
      "delete": {
        "summary": "delete one user by user_id",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user_id of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "patch": {
        "summary": "Update User",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The id of the user",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user",
            "description": "User resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2User"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/users:userRoles": {
      "get": {
        "summary": "ListUserRoles",
        "operationId": "UserService_ListUserRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListUserRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameLike",
            "description": "The name of the user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "emailLike",
            "description": "The email of the user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleName",
            "description": "The role name of the user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/users:validateSession": {
      "get": {
        "summary": "ValidateSession",
        "operationId": "UserService_ValidateSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ValidateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "DiagnosisServiceAddSqlLimitBody": {
      "type": "object",
      "properties": {
        "resourceGroup": {
          "type": "string",
          "title": "Resource group"
        },
        "action": {
          "type": "string",
          "enum": [
            "DRYRUN",
            "COOLDOWN",
            "KILL"
          ],
          "title": "Action"
        },
        "watchText": {
          "type": "string",
          "title": "Watch text"
        }
      },
      "title": "Request message for creating SQL limit",
      "required": [
        "resourceGroup",
        "action",
        "watchText"
      ]
    },
    "DiagnosisServiceRemoveSqlLimitBody": {
      "type": "object",
      "properties": {
        "watchText": {
          "type": "string",
          "title": "Watch text"
        }
      },
      "title": "Request message for removing SQL limit",
      "required": [
        "watchText"
      ]
    },
    "metricsv2Value": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "number",
          "format": "double",
          "title": "Timestamp of the value"
        },
        "value": {
          "type": "string",
          "title": "The actual value"
        }
      },
      "title": "Value represents a single value in the query result"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "properties": {
        "error": {
          "properties": {
            "code": {
              "format": "int32",
              "type": "integer"
            },
            "details": {
              "items": {
                "$ref": "#/definitions/protobufAny",
                "type": "object"
              },
              "type": "array"
            },
            "message": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "temapiv2Label": {
      "type": "object",
      "properties": {
        "labelId": {
          "type": "string",
          "title": "the label id of the label"
        },
        "labelKey": {
          "type": "string",
          "title": "the label key of the label"
        },
        "labelValue": {
          "type": "string",
          "title": "the label value of the label"
        }
      },
      "title": "Label basic resource",
      "required": [
        "labelValue"
      ]
    },
    "v2BindLabelRequest": {
      "type": "object",
      "properties": {
        "labelId": {
          "type": "string",
          "title": "the label id of the label"
        },
        "appendBindObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BindObject"
          },
          "title": "the bind objects to be appended"
        },
        "removeBindObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BindObject"
          },
          "title": "the bind objects to be removed"
        }
      },
      "title": "BindLabel Request",
      "required": [
        "labelId"
      ]
    },
    "v2BindLabelResponse": {
      "type": "object",
      "properties": {
        "label": {
          "$ref": "#/definitions/v2LabelWithBindObject",
          "title": "the label resource with bound objects"
        }
      },
      "title": "BindLabel Response"
    },
    "v2BindObject": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "string",
          "title": "the resource type of the bind object"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the resources of the resource type"
        }
      },
      "title": "Bind object resource",
      "required": [
        "resourceType",
        "resourceIds"
      ]
    },
    "v2BindResourceRequest": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "string",
          "title": "the resource type of the bind object"
        },
        "resourceId": {
          "type": "string",
          "title": "the resource id of the resource type"
        },
        "appendLabelIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the label ids to be appended"
        },
        "removeLabelIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the label ids to be removed"
        }
      },
      "title": "BindResource Request",
      "required": [
        "resourceType",
        "resourceId"
      ]
    },
    "v2BindResourceResponse": {
      "type": "object",
      "properties": {
        "labelIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the label ids bound with the bind object"
        }
      },
      "title": "BindResource Response"
    },
    "v2CategoryMetricDetail": {
      "type": "object",
      "properties": {
        "class": {
          "type": "string",
          "title": "Level 1 classification"
        },
        "group": {
          "type": "string",
          "title": "Level 2 grouping"
        },
        "type": {
          "type": "string",
          "title": "Level 3 type"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "title": "Display order of charts"
        },
        "displayName": {
          "type": "string",
          "title": "Display name of the metric"
        },
        "name": {
          "type": "string",
          "title": "Metric Name"
        },
        "description": {
          "type": "string",
          "title": "Description of the metric"
        },
        "metric": {
          "$ref": "#/definitions/v2MetricWithExpressions",
          "title": "Metric with its expressions"
        }
      },
      "title": "CategoryMetricDetail represents the details of a metric category"
    },
    "v2CheckSupportResponse": {
      "type": "object",
      "properties": {
        "isSupport": {
          "type": "boolean",
          "title": "Is support sql plan binding"
        }
      },
      "title": "Response of checking whether cluster support sql plan binding"
    },
    "v2ClassEnumData": {
      "type": "string",
      "enum": [
        "unspecified",
        "cluster",
        "host",
        "overview"
      ],
      "default": "unspecified",
      "description": "- unspecified: Unspecified\n - cluster: Cluster metrics\n - host: Host metrics\n - overview: Overview metrics",
      "title": "Data of ClassEnum"
    },
    "v2ClusterMetricData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "Response Status (e.g., \"success\", \"error\")"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ExprQueryData"
          },
          "title": "Response Data containing the queried metrics"
        }
      },
      "title": "ClusterMetricData represents the response for querying cluster metric data"
    },
    "v2ClusterMetricInstance": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "Target type (e.g., tikv, tidb, host)"
        },
        "instanceList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of instances for the specified metric"
        }
      },
      "title": "QueryClusterMetricInstanceResponse represents the response for querying cluster metric instances"
    },
    "v2ClusterProcess": {
      "type": "object",
      "properties": {
        "instance": {
          "type": "string",
          "title": "TiDB instance identifier running this process"
        },
        "id": {
          "type": "string",
          "title": "Unique process ID within the cluster"
        },
        "user": {
          "type": "string",
          "title": "Username that started the process"
        },
        "host": {
          "type": "string",
          "title": "Client host information"
        },
        "db": {
          "type": "string",
          "title": "Database being accessed by the process"
        },
        "command": {
          "type": "string",
          "enum": [
            "Sleep",
            "Quit",
            "Init DB",
            "Query",
            "Field List",
            "Create DB",
            "Drop DB",
            "Refresh",
            "Shutdown",
            "Statistics",
            "Processlist",
            "Connect",
            "Kill",
            "Debug",
            "Ping",
            "Time",
            "Delayed Insert",
            "Change User",
            "Binlog Dump",
            "Table Dump",
            "Connect out",
            "Register Slave",
            "Prepare",
            "Execute",
            "Long Data",
            "Close stmt",
            "Reset stmt",
            "Set option",
            "Fetch",
            "Daemon",
            "Reset connect"
          ],
          "title": "Current command being executed (e.g., \"Query\", \"Sleep\")"
        },
        "time": {
          "type": "string",
          "format": "int64",
          "title": "Time in seconds that the process has been running"
        },
        "state": {
          "type": "string",
          "title": "Current state of the process"
        },
        "info": {
          "type": "string",
          "title": "SQL statement or other information about the process"
        },
        "digest": {
          "type": "string",
          "title": "Query digest for identifying similar queries"
        },
        "mem": {
          "type": "string",
          "title": "Memory usage of the process"
        },
        "disk": {
          "type": "string",
          "title": "Disk usage of the process"
        },
        "txnStart": {
          "type": "string",
          "title": "Transaction start timestamp"
        },
        "resourceGroup": {
          "type": "string",
          "title": "Resource group assigned to the process"
        },
        "sessionAlias": {
          "type": "string",
          "title": "Session alias"
        },
        "rowsAffected": {
          "type": "string",
          "format": "int64",
          "title": "Rows affected"
        },
        "tidbCpu": {
          "type": "string",
          "format": "int64",
          "title": "tidb cpu"
        },
        "tikvCpu": {
          "type": "string",
          "format": "int64",
          "title": "tikv cpu"
        }
      },
      "title": "ClusterProcess represents a single process in the cluster"
    },
    "v2ExprQueryData": {
      "type": "object",
      "properties": {
        "expr": {
          "type": "string",
          "title": "The expression used in the query"
        },
        "legend": {
          "type": "string",
          "title": "The legend associated with the expression"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2QueryResult"
          },
          "title": "The results of the query"
        }
      },
      "title": "ExprQueryData represents the data for an expression query"
    },
    "v2ExpressionWithLegend": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Expression name"
        },
        "promql": {
          "type": "string",
          "title": "PromQL expression"
        },
        "promMetric": {
          "type": "string",
          "title": "Prometheus metric name"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of labels associated with the expression"
        },
        "type": {
          "type": "string",
          "title": "Type of the expression"
        },
        "legend": {
          "type": "string",
          "title": "Legend name for the expression"
        },
        "minTidbVersion": {
          "type": "string",
          "title": "Minimum supported TiDB version"
        },
        "maxTidbVersion": {
          "type": "string",
          "title": "Maximum supported TiDB version"
        }
      },
      "title": "ExpressionWithLegend represents an expression with its legend"
    },
    "v2GroupEnumData": {
      "type": "string",
      "enum": [
        "unspecified",
        "overview",
        "basic",
        "advance",
        "resource",
        "performance",
        "process"
      ],
      "default": "unspecified",
      "description": "- unspecified: Unspecified group\n - overview: Overview group\n - basic: Basic group\n - advance: Advanced group\n - resource: Resource group\n - performance: Performance group\n - process: Process group",
      "title": "Data of GroupEnum"
    },
    "v2HostMetricData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "Response Status (e.g., \"success\", \"error\")"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ExprQueryData"
          },
          "title": "Response Data containing the queried metrics"
        }
      },
      "title": "HostMetricData represents the response for querying cluster metric data"
    },
    "v2LabelWithBindObject": {
      "type": "object",
      "properties": {
        "label": {
          "$ref": "#/definitions/temapiv2Label",
          "title": "the label basic info of the label"
        },
        "bindObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BindObject"
          },
          "title": "the bound objects of the label"
        }
      },
      "title": "Label resource with bound object"
    },
    "v2ListLabelsResponse": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2LabelWithBindObject"
          },
          "title": "list of labels"
        },
        "nextPageToken": {
          "type": "string",
          "title": "next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "total size"
        }
      },
      "title": "ListLabels Response"
    },
    "v2ListUserRolesResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2UserRole"
          },
          "title": "List of users"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListUserRolesResponse"
    },
    "v2ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2User"
          },
          "title": "List of users"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListUsersResponse"
    },
    "v2LoginRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "The id of the user"
        },
        "password": {
          "type": "string",
          "title": "The password of the user"
        }
      },
      "title": "Login Request",
      "required": [
        "userId"
      ]
    },
    "v2MetricWithExpressions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Metric name"
        },
        "unit": {
          "type": "string",
          "title": "Unit of the metric"
        },
        "description": {
          "type": "string",
          "title": "Description of the metric"
        },
        "minTidbVersion": {
          "type": "string",
          "title": "Minimum supported TiDB version"
        },
        "maxTidbVersion": {
          "type": "string",
          "title": "Maximum supported TiDB version"
        },
        "isBuiltin": {
          "type": "boolean",
          "title": "Whether it is a built-in metric"
        },
        "expressions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ExpressionWithLegend"
          },
          "title": "List of associated expressions"
        }
      },
      "title": "MetricWithExpressions represents a metric with its expressions"
    },
    "v2Metrics": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2CategoryMetricDetail"
          },
          "title": "List of metrics info"
        }
      },
      "title": "Metrics represents the list of metrics info"
    },
    "v2OverviewStatus": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of clusters' status"
        },
        "hosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of hosts' status"
        },
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of alerts' status"
        },
        "alertLevels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of alert levels' status"
        },
        "brTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of backup \u0026 restore tasks' status"
        },
        "sysTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of system tasks' status"
        },
        "otherTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of other tasks' status"
        }
      },
      "title": "OverviewStatus represents the response for querying overview data"
    },
    "v2ProcessList": {
      "type": "object",
      "properties": {
        "clusterProcessList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ClusterProcess"
          },
          "title": "List of cluster processes containing detailed information about each process"
        },
        "isSupportKill": {
          "type": "boolean",
          "title": "Whether kill operation is supported by the cluster\nDepends on TiDB version and cluster configuration"
        },
        "totalProcessCount": {
          "type": "string",
          "format": "int64",
          "title": "Total number of processes in the cluster\nIncludes both active and sleeping processes"
        },
        "activeProcessCount": {
          "type": "string",
          "format": "int64",
          "title": "Number of active processes in the cluster\nExcludes processes in \"sleep\" state"
        }
      },
      "title": "ProcessList represents the response of process list query"
    },
    "v2QueryMetric": {
      "type": "object",
      "properties": {
        "instance": {
          "type": "string",
          "title": "Instance of the metric"
        },
        "sqlType": {
          "type": "string",
          "title": "SQL type of the metric"
        },
        "type": {
          "type": "string",
          "title": "Type of the metric"
        },
        "result": {
          "type": "string",
          "title": "Result of the metric"
        },
        "txnMode": {
          "type": "string",
          "title": "Transaction mode of the metric"
        },
        "job": {
          "type": "string",
          "title": "Job type of the metric"
        },
        "device": {
          "type": "string",
          "title": "Device type of the metric"
        },
        "fstype": {
          "type": "string",
          "title": "FSType of the metric"
        },
        "mountpoint": {
          "type": "string",
          "title": "MountPoint of the metric"
        },
        "module": {
          "type": "string",
          "title": "Module of the metric"
        },
        "kind": {
          "type": "string",
          "title": "Kind of the metric"
        },
        "ping": {
          "type": "string",
          "title": "Ping of the metric"
        }
      },
      "title": "QueryMetric represents the metric details in the query result"
    },
    "v2QueryResult": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/v2QueryMetric",
          "title": "Metric details"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/metricsv2Value"
          },
          "title": "Values associated with the metric"
        }
      },
      "title": "QueryResult represents the result of a query"
    },
    "v2ResourceGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Resource group name"
        },
        "ruPerSec": {
          "type": "string",
          "title": "RU per second"
        },
        "priority": {
          "type": "string",
          "title": "Priority"
        },
        "burstable": {
          "type": "string",
          "title": "Burstable"
        }
      },
      "title": "Resource group information"
    },
    "v2ResourceGroupList": {
      "type": "object",
      "properties": {
        "resourceGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ResourceGroup"
          },
          "title": "List of resource groups"
        }
      },
      "title": "Response message for GetResourceGroupList"
    },
    "v2SlowQueryAvailableAdvancedFilterInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Filter name"
        },
        "unit": {
          "type": "string",
          "title": "Filter unit"
        },
        "valueList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter value list"
        }
      },
      "title": "Response message for available filter info"
    },
    "v2SlowQueryAvailableAdvancedFilters": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of available fields"
        }
      },
      "title": "Response message for available filters"
    },
    "v2SlowQueryAvailableFields": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of available fields"
        }
      },
      "title": "Response message for available fields"
    },
    "v2SlowQueryDetail": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string",
          "title": "Digest"
        },
        "query": {
          "type": "string",
          "title": "Query"
        },
        "instance": {
          "type": "string",
          "title": "Instance"
        },
        "db": {
          "type": "string",
          "title": "Database"
        },
        "connection_id": {
          "type": "string",
          "title": "Connection ID"
        },
        "success": {
          "type": "integer",
          "format": "int32",
          "title": "Success"
        },
        "timestamp": {
          "type": "number",
          "format": "double",
          "title": "Finish time"
        },
        "query_time": {
          "type": "number",
          "format": "double",
          "title": "Latency"
        },
        "parse_time": {
          "type": "number",
          "format": "double",
          "title": "Parse time"
        },
        "compile_time": {
          "type": "number",
          "format": "double",
          "title": "Compile time"
        },
        "rewrite_time": {
          "type": "number",
          "format": "double",
          "title": "Rewrite time"
        },
        "preproc_subqueries_time": {
          "type": "number",
          "format": "double",
          "title": "Preprocessing subqueries time"
        },
        "optimize_time": {
          "type": "number",
          "format": "double",
          "title": "Optimize time"
        },
        "wait_ts": {
          "type": "number",
          "format": "double",
          "title": "Wait timestamp"
        },
        "cop_time": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor time"
        },
        "lock_keys_time": {
          "type": "number",
          "format": "double",
          "title": "Lock keys time"
        },
        "write_sql_response_total": {
          "type": "number",
          "format": "double",
          "title": "Write SQL response time"
        },
        "exec_retry_time": {
          "type": "number",
          "format": "double",
          "title": "Execution retry time"
        },
        "memory_max": {
          "type": "number",
          "format": "int64",
          "title": "Max memory"
        },
        "disk_max": {
          "type": "number",
          "format": "int64",
          "title": "Max disk"
        },
        "txn_start_ts": {
          "type": "string",
          "title": "Transaction start timestamp"
        },
        "prev_stmt": {
          "type": "string",
          "title": "Previous statement"
        },
        "plan": {
          "type": "string",
          "title": "Execution plan"
        },
        "binary_plan": {
          "type": "string",
          "title": "Binary execution plan"
        },
        "warnings": {
          "type": "string",
          "title": "Warnings"
        },
        "is_internal": {
          "type": "integer",
          "format": "int32",
          "title": "Is internal"
        },
        "index_names": {
          "type": "string",
          "title": "Index names"
        },
        "stats": {
          "type": "string",
          "title": "Stats"
        },
        "backoff_types": {
          "type": "string",
          "title": "Backoff types"
        },
        "prepared": {
          "type": "integer",
          "format": "int32",
          "title": "Prepared statement"
        },
        "plan_from_cache": {
          "type": "integer",
          "format": "int32",
          "title": "Plan from cache"
        },
        "plan_from_binding": {
          "type": "integer",
          "format": "int32",
          "title": "Plan from binding"
        },
        "user": {
          "type": "string",
          "title": "User"
        },
        "host": {
          "type": "string",
          "title": "Host"
        },
        "process_time": {
          "type": "number",
          "format": "double",
          "title": "Process time"
        },
        "wait_time": {
          "type": "number",
          "format": "double",
          "title": "Wait time"
        },
        "backoff_time": {
          "type": "number",
          "format": "double",
          "title": "Backoff time"
        },
        "get_commit_ts_time": {
          "type": "number",
          "format": "double",
          "title": "Get commit timestamp time"
        },
        "local_latch_wait_time": {
          "type": "number",
          "format": "double",
          "title": "Local latch wait time"
        },
        "resolve_lock_time": {
          "type": "number",
          "format": "double",
          "title": "Resolve lock time"
        },
        "prewrite_time": {
          "type": "number",
          "format": "double",
          "title": "Prewrite time"
        },
        "wait_prewrite_binlog_time": {
          "type": "number",
          "format": "double",
          "title": "Wait for prewrite binlog time"
        },
        "commit_time": {
          "type": "number",
          "format": "double",
          "title": "Commit time"
        },
        "commit_backoff_time": {
          "type": "number",
          "format": "double",
          "title": "Commit backoff time"
        },
        "cop_proc_avg": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor process average"
        },
        "cop_proc_p90": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor process P90"
        },
        "cop_proc_max": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor process max"
        },
        "cop_wait_avg": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor wait average"
        },
        "cop_wait_p90": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor wait P90"
        },
        "cop_wait_max": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor wait max"
        },
        "write_keys": {
          "type": "number",
          "format": "int64",
          "title": "Write keys"
        },
        "write_size": {
          "type": "number",
          "format": "int64",
          "title": "Write size"
        },
        "prewrite_region": {
          "type": "number",
          "format": "int64",
          "title": "Prewrite region"
        },
        "txn_retry": {
          "type": "number",
          "format": "int64",
          "title": "Transaction retry"
        },
        "request_count": {
          "type": "number",
          "format": "uint64",
          "title": "Request count"
        },
        "process_keys": {
          "type": "number",
          "format": "uint64",
          "title": "Process keys"
        },
        "total_keys": {
          "type": "number",
          "format": "uint64",
          "title": "Total keys"
        },
        "cop_proc_addr": {
          "type": "string",
          "title": "Coprocessor address"
        },
        "cop_wait_addr": {
          "type": "string",
          "title": "Coprocessor wait address"
        },
        "rocksdb_delete_skipped_count": {
          "type": "number",
          "format": "uint64",
          "title": "RocksDB delete skipped count"
        },
        "rocksdb_key_skipped_count": {
          "type": "number",
          "format": "uint64",
          "title": "RocksDB key skipped count"
        },
        "rocksdb_block_cache_hit_count": {
          "type": "number",
          "format": "uint64",
          "title": "RocksDB block cache hit count"
        },
        "rocksdb_block_read_count": {
          "type": "number",
          "format": "uint64",
          "title": "RocksDB block read count"
        },
        "rocksdb_block_read_byte": {
          "type": "number",
          "format": "uint64",
          "title": "RocksDB block read byte"
        },
        "binary_plan_text": {
          "type": "string",
          "title": "Binary plan in plain text"
        },
        "session_alias": {
          "type": "string",
          "title": "Session alias"
        },
        "exec_retry_count": {
          "type": "number",
          "format": "int64",
          "title": "Execution retry count"
        },
        "preproc_subqueries": {
          "type": "number",
          "format": "int64",
          "title": "Preprocessing subqueries"
        },
        "kv_total": {
          "type": "number",
          "format": "double",
          "title": "KV total"
        },
        "pd_total": {
          "type": "number",
          "format": "double",
          "title": "PD total"
        },
        "backoff_total": {
          "type": "number",
          "format": "double",
          "title": "Backoff total"
        },
        "time_queued_by_rc": {
          "type": "number",
          "format": "double",
          "title": "Time queued by RC"
        },
        "tidb_cpu_time": {
          "type": "number",
          "format": "double",
          "title": "TiDB CPU time"
        },
        "tikv_cpu_time": {
          "type": "number",
          "format": "double",
          "title": "TiKV CPU time"
        },
        "backoff_detail": {
          "type": "string",
          "title": "Backoff detail"
        },
        "is_explicit_txn": {
          "type": "integer",
          "format": "int32",
          "title": "Is explicit transaction"
        },
        "plan_digest": {
          "type": "string",
          "title": "Plan digest"
        },
        "has_more_results": {
          "type": "integer",
          "format": "int32",
          "title": "Has more results"
        },
        "resource_group": {
          "type": "string",
          "title": "Resource group"
        },
        "request_unit_read": {
          "type": "number",
          "format": "double",
          "title": "Request unit read"
        },
        "request_unit_write": {
          "type": "number",
          "format": "double",
          "title": "Request unit write"
        },
        "result_rows": {
          "type": "number",
          "format": "int64",
          "title": "Result rows"
        }
      },
      "title": "Model message representing a slow query log"
    },
    "v2SlowQueryDownloadResponse": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "title": "File name"
        },
        "fileContent": {
          "type": "string",
          "title": "File content"
        }
      },
      "title": "SlowQueryDownloadResponse represents the response for downloading slow query list"
    },
    "v2SlowQueryList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SlowQueryDetail"
          },
          "title": "List of slow sql models"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "Response message for querying slow log list"
    },
    "v2SqlLimit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID"
        },
        "resourceGroupName": {
          "type": "string",
          "title": "Resource group name"
        },
        "startTime": {
          "type": "string",
          "title": "Start time"
        },
        "endTime": {
          "type": "string",
          "title": "End time"
        },
        "watch": {
          "type": "string",
          "title": "Watch"
        },
        "watchText": {
          "type": "string",
          "title": "Watch text"
        },
        "source": {
          "type": "string",
          "title": "Source"
        },
        "action": {
          "type": "string",
          "enum": [
            "DRYRUN",
            "COOLDOWN",
            "KILL"
          ],
          "title": "Action"
        }
      },
      "title": "SQL limit model"
    },
    "v2SqlLimitList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SqlLimit"
          },
          "title": "List of SQL limit"
        }
      },
      "title": "Response message for getting SQL limit"
    },
    "v2SqlPlanBindingDetail": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "enabled",
            "using",
            "disabled",
            "deleted",
            "invalid",
            "rejected",
            "pending verify"
          ],
          "title": "SQL plan binding status"
        },
        "source": {
          "type": "string",
          "enum": [
            "manual",
            "history",
            "capture",
            "evolve"
          ],
          "title": "SQL plan binding source"
        },
        "digest": {
          "type": "string",
          "title": "sql digest"
        },
        "planDigest": {
          "type": "string",
          "title": "plan digest"
        }
      },
      "title": "Detail of sql plan binding"
    },
    "v2SqlPlanBindingList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SqlPlanBindingDetail"
          },
          "title": "List of sql plan binding"
        }
      },
      "title": "Response of get sql plan binding"
    },
    "v2SqlPlanList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2TopSqlDetail"
          },
          "title": "List of sql plan"
        }
      },
      "title": "Response message for getting sql plan"
    },
    "v2StatusCount": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "Targets status (e.g., \"healthy\", \"unhealthy\")"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "title": "The number of targets with this status"
        }
      },
      "title": "StatusCount represents the status of a target"
    },
    "v2TopMetricData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "Response Status (e.g., \"success\", \"error\")"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ExprQueryData"
          },
          "title": "Response Data containing the top queried metrics"
        }
      },
      "title": "TopMetricData represents the response for querying top metric data"
    },
    "v2TopSqlAvailableAdvancedFilterInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Filter name"
        },
        "unit": {
          "type": "string",
          "title": "Filter unit"
        },
        "valueList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter value list"
        }
      },
      "title": "Response message for available filter info"
    },
    "v2TopSqlAvailableAdvancedFilters": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of available fields"
        }
      },
      "title": "Response message for available filters"
    },
    "v2TopSqlAvailableFields": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of available fields"
        }
      },
      "title": "Response message for getting top sql available fields"
    },
    "v2TopSqlDetail": {
      "type": "object",
      "properties": {
        "summary_begin_time": {
          "type": "number",
          "format": "int64",
          "title": "AggBeginTime"
        },
        "summary_end_time": {
          "type": "number",
          "format": "int64",
          "title": "AggEndTime"
        },
        "digest_text": {
          "type": "string",
          "title": "AggDigestText"
        },
        "digest": {
          "type": "string",
          "title": "AggDigest"
        },
        "exec_count": {
          "type": "number",
          "format": "int64",
          "title": "AggExecCount"
        },
        "stmt_type": {
          "type": "string",
          "title": "AggStmtType"
        },
        "sum_errors": {
          "type": "number",
          "format": "int64",
          "title": "AggSumErrors"
        },
        "sum_warnings": {
          "type": "number",
          "format": "int64",
          "title": "AggSumWarnings"
        },
        "sum_latency": {
          "type": "number",
          "format": "int64",
          "title": "AggSumLatency"
        },
        "max_latency": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxLatency"
        },
        "min_latency": {
          "type": "number",
          "format": "int64",
          "title": "AggMinLatency"
        },
        "avg_latency": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgLatency"
        },
        "avg_parse_latency": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgParseLatency"
        },
        "max_parse_latency": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxParseLatency"
        },
        "avg_compile_latency": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgCompileLatency"
        },
        "max_compile_latency": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxCompileLatency"
        },
        "sum_cop_task_num": {
          "type": "number",
          "format": "int64",
          "title": "AggSumCopTaskNum"
        },
        "avg_cop_process_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgCopProcessTime"
        },
        "max_cop_process_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxCopProcessTime"
        },
        "avg_cop_wait_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgCopWaitTime"
        },
        "max_cop_wait_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxCopWaitTime"
        },
        "avg_process_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgProcessTime"
        },
        "max_process_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxProcessTime"
        },
        "avg_wait_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgWaitTime"
        },
        "max_wait_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxWaitTime"
        },
        "avg_backoff_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgBackoffTime"
        },
        "max_backoff_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxBackoffTime"
        },
        "avg_total_keys": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgTotalKeys"
        },
        "max_total_keys": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxTotalKeys"
        },
        "avg_processed_keys": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgProcessedKeys"
        },
        "max_processed_keys": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxProcessedKeys"
        },
        "avg_prewrite_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgPrewriteTime"
        },
        "max_prewrite_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxPrewriteTime"
        },
        "avg_commit_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgCommitTime"
        },
        "max_commit_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxCommitTime"
        },
        "avg_get_commit_ts_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgGetCommitTsTime"
        },
        "max_get_commit_ts_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxGetCommitTsTime"
        },
        "avg_commit_backoff_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgCommitBackoffTime"
        },
        "max_commit_backoff_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxCommitBackoffTime"
        },
        "avg_resolve_lock_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgResolveLockTime"
        },
        "max_resolve_lock_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxResolveLockTime"
        },
        "avg_local_latch_wait_time": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgLocalLatchWaitTime"
        },
        "max_local_latch_wait_time": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxLocalLatchWaitTime"
        },
        "avg_write_keys": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgWriteKeys"
        },
        "max_write_keys": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxWriteKeys"
        },
        "avg_write_size": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgWriteSize"
        },
        "max_write_size": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxWriteSize"
        },
        "avg_prewrite_regions": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgPrewriteRegions"
        },
        "max_prewrite_regions": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxPrewriteRegions"
        },
        "avg_txn_retry": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgTxnRetry"
        },
        "max_txn_retry": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxTxnRetry"
        },
        "sum_backoff_times": {
          "type": "number",
          "format": "int64",
          "title": "AggSumBackoffTimes"
        },
        "avg_mem": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgMem"
        },
        "max_mem": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxMem"
        },
        "avg_disk": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgDisk"
        },
        "max_disk": {
          "type": "number",
          "format": "int64",
          "title": "AggMaxDisk"
        },
        "avg_affected_rows": {
          "type": "number",
          "format": "int64",
          "title": "AggAvgAffectedRows"
        },
        "first_seen": {
          "type": "number",
          "format": "int64",
          "title": "AggFirstSeen"
        },
        "last_seen": {
          "type": "number",
          "format": "int64",
          "title": "AggLastSeen"
        },
        "sample_user": {
          "type": "string",
          "title": "AggSampleUser"
        },
        "query_sample_text": {
          "type": "string",
          "title": "AggQuerySampleText"
        },
        "prev_sample_text": {
          "type": "string",
          "title": "AggPrevSampleText"
        },
        "schema_name": {
          "type": "string",
          "title": "AggSchemaName"
        },
        "table_names": {
          "type": "string",
          "title": "AggTableNames"
        },
        "index_names": {
          "type": "string",
          "title": "AggIndexNames"
        },
        "plan_count": {
          "type": "number",
          "format": "int64",
          "title": "AggPlanCount"
        },
        "plan": {
          "type": "string",
          "title": "AggPlan (deprecated)"
        },
        "binary_plan": {
          "type": "string",
          "title": "AggBinaryPlan"
        },
        "plan_digest": {
          "type": "string",
          "title": "AggPlanDigest"
        },
        "plan_hint": {
          "type": "string",
          "title": "AggPlanHint"
        },
        "max_rocksdb_delete_skipped_count": {
          "type": "number",
          "format": "uint64",
          "title": "AggMaxRocksdbDeleteSkippedCount"
        },
        "avg_rocksdb_delete_skipped_count": {
          "type": "number",
          "format": "uint64",
          "title": "AggAvgRocksdbDeleteSkippedCount"
        },
        "max_rocksdb_key_skipped_count": {
          "type": "number",
          "format": "uint64",
          "title": "AggMaxRocksdbKeySkippedCount"
        },
        "avg_rocksdb_key_skipped_count": {
          "type": "number",
          "format": "uint64",
          "title": "AggAvgRocksdbKeySkippedCount"
        },
        "max_rocksdb_block_cache_hit_count": {
          "type": "number",
          "format": "uint64",
          "title": "AggMaxRocksdbBlockCacheHitCount"
        },
        "avg_rocksdb_block_cache_hit_count": {
          "type": "number",
          "format": "uint64",
          "title": "AggAvgRocksdbBlockCacheHitCount"
        },
        "max_rocksdb_block_read_count": {
          "type": "number",
          "format": "uint64",
          "title": "AggMaxRocksdbBlockReadCount"
        },
        "avg_rocksdb_block_read_count": {
          "type": "number",
          "format": "uint64",
          "title": "AggAvgRocksdbBlockReadCount"
        },
        "max_rocksdb_block_read_byte": {
          "type": "number",
          "format": "uint64",
          "title": "AggMaxRocksdbBlockReadByte"
        },
        "avg_rocksdb_block_read_byte": {
          "type": "number",
          "format": "uint64",
          "title": "AggAvgRocksdbBlockReadByte"
        },
        "related_schemas": {
          "type": "string",
          "title": "RelatedSchemas"
        },
        "plan_can_be_bound": {
          "type": "boolean",
          "title": "PlanCanBeBound"
        },
        "binary_plan_text": {
          "type": "string",
          "title": "BinaryPlanText"
        },
        "resource_group": {
          "type": "string",
          "title": "ResourceGroup"
        },
        "avg_ru": {
          "type": "number",
          "format": "double",
          "title": "AvgRu"
        },
        "max_ru": {
          "type": "number",
          "format": "double",
          "title": "MaxRu"
        },
        "sum_ru": {
          "type": "number",
          "format": "double",
          "title": "SumRu"
        },
        "avg_time_queued_by_rc": {
          "type": "number",
          "format": "double",
          "title": "AvgTimeQueuedByRc"
        },
        "max_time_queued_by_rc": {
          "type": "number",
          "format": "double",
          "title": "MaxTimeQueuedBNyRc"
        }
      },
      "title": "Top SQL detail"
    },
    "v2TopSqlList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2TopSqlDetail"
          },
          "title": "List of top sql"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "Top SQL list"
    },
    "v2User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "The id of the user"
        },
        "userId": {
          "type": "string",
          "title": "The user_id of the user"
        },
        "name": {
          "type": "string",
          "title": "The name of the user"
        },
        "email": {
          "type": "string",
          "title": "The email of the user"
        },
        "password": {
          "type": "string",
          "title": "The password of the user"
        }
      },
      "title": "User resource",
      "required": [
        "id",
        "userId",
        "name"
      ]
    },
    "v2UserRole": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "The user_id of the user"
        },
        "name": {
          "type": "string",
          "title": "The name of the user"
        },
        "email": {
          "type": "string",
          "title": "The email of the user"
        },
        "note": {
          "type": "string",
          "title": "The note of the user"
        },
        "roleName": {
          "type": "string",
          "enum": [
            "ADMIN",
            "ALERT_MANAGER",
            "ALERT_READER",
            "BACKUP_MANAGER",
            "BACKUP_READER",
            "CLUSTER_MANAGER",
            "CLUSTER_READER",
            "HOST_MANAGER",
            "HOST_READER",
            "USER_MANAGER",
            "AUDIT_MANAGER",
            "SYSTEM_MANAGER",
            "SYSTEM_READER"
          ],
          "title": "The role name"
        },
        "roleId": {
          "type": "string",
          "format": "int64",
          "title": "The role id of the role"
        }
      },
      "title": "User resource",
      "required": [
        "userId",
        "name"
      ]
    },
    "v2ValidateSessionResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "The id of the user"
        }
      },
      "title": "The Response of ValidateSession",
      "required": [
        "userId"
      ]
    }
  }
}