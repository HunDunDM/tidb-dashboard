/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
import type { Context, Env } from 'hono';


// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

import { ApiKeyServiceListApiKeysParams,
V2ApiKey,
MetricsServiceGetClusterMetricDataParams,
MetricsServiceGetHostMetricDataParams,
V2LoginRequest,
MetricsServiceGetMetricsParams,
MetricsServiceGetTopMetricDataParams,
MetricsServiceGetOverviewStatusParams,
RoleServiceListRolesParams,
V2Role,
UserServiceListUsersParams,
V2User,
V2User } from './index.schemas';

export type ApiKeyServiceListApiKeysContext<E extends Env = any> = Context<E, '/api/v2/apiKeys', { in: { query: ApiKeyServiceListApiKeysParams, }, out: { query: ApiKeyServiceListApiKeysParams, } }>
export type ApiKeyServiceCreateApiKeyContext<E extends Env = any> = Context<E, '/api/v2/apiKeys', { in: { json: NonReadonly<V2ApiKey>, }, out: { json: NonReadonly<V2ApiKey>, } }>
export type ApiKeyServiceDeleteApiKeyContext<E extends Env = any> = Context<E, '/api/v2/apiKeys/:accessKey', { in: { param: {
 accessKey: string,
 }, }, out: { param: {
 accessKey: string,
 }, } }>
export type MetricsServiceGetClusterMetricDataContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/metrics/:name/data', { in: { param: {
 clusterId: string,
    name: string,
 },query: MetricsServiceGetClusterMetricDataParams, }, out: { param: {
 clusterId: string,
    name: string,
 },query: MetricsServiceGetClusterMetricDataParams, } }>
export type MetricsServiceGetClusterMetricInstanceContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/metrics/:name/instance', { in: { param: {
 clusterId: string,
    name: string,
 }, }, out: { param: {
 clusterId: string,
    name: string,
 }, } }>
export type ClusterServiceGetProcessListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sessions', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceDeleteProcessContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sessions/:sessionId', { in: { param: {
 clusterId: string,
    sessionId: string,
 }, }, out: { param: {
 clusterId: string,
    sessionId: string,
 }, } }>
export type MetricsServiceGetHostMetricDataContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId/metrics/:name/data', { in: { param: {
 hostId: string,
    name: string,
 },query: MetricsServiceGetHostMetricDataParams, }, out: { param: {
 hostId: string,
    name: string,
 },query: MetricsServiceGetHostMetricDataParams, } }>
export type UserServiceLoginContext<E extends Env = any> = Context<E, '/api/v2/login', { in: { json: V2LoginRequest, }, out: { json: V2LoginRequest, } }>
export type UserServiceLogoutContext<E extends Env = any> = Context<E, '/api/v2/logout'>
export type MetricsServiceGetMetricsContext<E extends Env = any> = Context<E, '/api/v2/metrics', { in: { query: MetricsServiceGetMetricsParams, }, out: { query: MetricsServiceGetMetricsParams, } }>
export type MetricsServiceGetTopMetricDataContext<E extends Env = any> = Context<E, '/api/v2/overview/metrics/:name/data', { in: { param: {
 name: string,
 },query: MetricsServiceGetTopMetricDataParams, }, out: { param: {
 name: string,
 },query: MetricsServiceGetTopMetricDataParams, } }>
export type MetricsServiceGetOverviewStatusContext<E extends Env = any> = Context<E, '/api/v2/overview/status', { in: { query: MetricsServiceGetOverviewStatusParams, }, out: { query: MetricsServiceGetOverviewStatusParams, } }>
export type RoleServiceListRolesContext<E extends Env = any> = Context<E, '/api/v2/roles', { in: { query: RoleServiceListRolesParams, }, out: { query: RoleServiceListRolesParams, } }>
export type RoleServiceCreateRoleContext<E extends Env = any> = Context<E, '/api/v2/roles', { in: { json: NonReadonly<V2Role>, }, out: { json: NonReadonly<V2Role>, } }>
export type RoleServiceDeleteRoleContext<E extends Env = any> = Context<E, '/api/v2/roles/:roleId', { in: { param: {
 roleId: number,
 }, }, out: { param: {
 roleId: number,
 }, } }>
export type UserServiceListUsersContext<E extends Env = any> = Context<E, '/api/v2/users', { in: { query: UserServiceListUsersParams, }, out: { query: UserServiceListUsersParams, } }>
export type UserServiceCreateUserContext<E extends Env = any> = Context<E, '/api/v2/users', { in: { json: NonReadonly<V2User>, }, out: { json: NonReadonly<V2User>, } }>
export type UserServiceDeleteUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 }, }, out: { param: {
 userId: string,
 }, } }>
export type UserServiceUpdateUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 },json: NonReadonly<V2User>, }, out: { param: {
 userId: string,
 },json: NonReadonly<V2User>, } }>
export type UserServiceValidateSessionContext<E extends Env = any> = Context<E, '/api/v2/users:validateSession'>