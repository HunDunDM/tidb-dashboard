/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
import type { Context, Env } from 'hono';

import { MetricsServiceGetClusterMetricDataParams,
DiagnosisServiceGetSlowQueryListParams,
DiagnosisServiceDownloadSlowQueryListParams,
DiagnosisServiceGetSlowQueryDetailParams,
DiagnosisServiceAddSqlLimitBody,
DiagnosisServiceRemoveSqlLimitBody,
DiagnosisServiceGetSqlLimitListParams,
DiagnosisServiceGetSqlPlanListParams,
DiagnosisServiceGetSqlPlanBindingListParams,
DiagnosisServiceUnbindSqlPlanParams,
DiagnosisServiceGetTopSqlListParams,
DiagnosisServiceGetTopSqlDetailParams,
MetricsServiceGetHostMetricDataParams,
LabelServiceListLabelsParams,
Temapiv2LabelBody,
V2BindLabelRequest,
V2BindResourceRequest,
V2LoginRequest,
MetricsServiceGetMetricsParams,
MetricsServiceGetTopMetricDataParams,
MetricsServiceGetOverviewStatusParams,
UserServiceListUsersParams,
V2User,
UserServiceListUserRolesParams } from './index.schemas';

export type MetricsServiceGetClusterMetricDataContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/metrics/:name/data', { in: { param: {
 clusterId: string,
    name: string,
 },query: MetricsServiceGetClusterMetricDataParams, }, out: { param: {
 clusterId: string,
    name: string,
 },query: MetricsServiceGetClusterMetricDataParams, } }>
export type MetricsServiceGetClusterMetricInstanceContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/metrics/:name/instance', { in: { param: {
 clusterId: string,
    name: string,
 }, }, out: { param: {
 clusterId: string,
    name: string,
 }, } }>
export type DiagnosisServiceGetResourceGroupListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/resourcegroups', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceGetProcessListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sessions', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type ClusterServiceDeleteProcessContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sessions/:sessionId', { in: { param: {
 clusterId: string,
    sessionId: string,
 }, }, out: { param: {
 clusterId: string,
    sessionId: string,
 }, } }>
export type DiagnosisServiceGetSlowQueryListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSlowQueryListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSlowQueryListParams, } }>
export type DiagnosisServiceGetSlowQueryAvailableAdvancedFiltersContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/advancedFilters', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetSlowQueryAvailableAdvancedFilterInfoContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/advancedFilters/:filterName', { in: { param: {
 clusterId: string,
    filterName: string,
 }, }, out: { param: {
 clusterId: string,
    filterName: string,
 }, } }>
export type DiagnosisServiceDownloadSlowQueryListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/download', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceDownloadSlowQueryListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceDownloadSlowQueryListParams, } }>
export type DiagnosisServiceGetSlowQueryAvailableFieldsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/fields', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetSlowQueryDetailContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/slowqueries/:digest', { in: { param: {
 clusterId: string,
    digest: string,
 },query: DiagnosisServiceGetSlowQueryDetailParams, }, out: { param: {
 clusterId: string,
    digest: string,
 },query: DiagnosisServiceGetSlowQueryDetailParams, } }>
export type DiagnosisServiceAddSqlLimitContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqllimits:addSqlLimit', { in: { param: {
 clusterId: string,
 },json: DiagnosisServiceAddSqlLimitBody, }, out: { param: {
 clusterId: string,
 },json: DiagnosisServiceAddSqlLimitBody, } }>
export type DiagnosisServiceCheckSqlLimitSupportContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqllimits:checkSupport', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceRemoveSqlLimitContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqllimits:removeSqlLimit', { in: { param: {
 clusterId: string,
 },json: DiagnosisServiceRemoveSqlLimitBody, }, out: { param: {
 clusterId: string,
 },json: DiagnosisServiceRemoveSqlLimitBody, } }>
export type DiagnosisServiceGetSqlLimitListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqllimits:showSqlLimit', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlLimitListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlLimitListParams, } }>
export type DiagnosisServiceGetSqlPlanListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlPlanListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlPlanListParams, } }>
export type DiagnosisServiceBindSqlPlanContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans/:planDigest:bindSqlPlan', { in: { param: {
 clusterId: string,
    planDigest: string,
 }, }, out: { param: {
 clusterId: string,
    planDigest: string,
 }, } }>
export type DiagnosisServiceCheckSqlPlanSupportContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:checkSupport', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetSqlPlanBindingListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:showSqlPlanBinding', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlPlanBindingListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetSqlPlanBindingListParams, } }>
export type DiagnosisServiceUnbindSqlPlanContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/sqlplans:unbindSqlPlan', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceUnbindSqlPlanParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceUnbindSqlPlanParams, } }>
export type DiagnosisServiceGetTopSqlListContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls', { in: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetTopSqlListParams, }, out: { param: {
 clusterId: string,
 },query: DiagnosisServiceGetTopSqlListParams, } }>
export type DiagnosisServiceGetTopSqlAvailableAdvancedFiltersContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/advancedFilters', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetTopSqlAvailableAdvancedFilterInfoContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/advancedFilters/:filterName', { in: { param: {
 clusterId: string,
    filterName: string,
 }, }, out: { param: {
 clusterId: string,
    filterName: string,
 }, } }>
export type DiagnosisServiceGetTopSqlAvailableFieldsContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/fields', { in: { param: {
 clusterId: string,
 }, }, out: { param: {
 clusterId: string,
 }, } }>
export type DiagnosisServiceGetTopSqlDetailContext<E extends Env = any> = Context<E, '/api/v2/clusters/:clusterId/topsqls/:digest', { in: { param: {
 clusterId: string,
    digest: string,
 },query: DiagnosisServiceGetTopSqlDetailParams, }, out: { param: {
 clusterId: string,
    digest: string,
 },query: DiagnosisServiceGetTopSqlDetailParams, } }>
export type MetricsServiceGetHostMetricDataContext<E extends Env = any> = Context<E, '/api/v2/hosts/:hostId/metrics/:name/data', { in: { param: {
 hostId: string,
    name: string,
 },query: MetricsServiceGetHostMetricDataParams, }, out: { param: {
 hostId: string,
    name: string,
 },query: MetricsServiceGetHostMetricDataParams, } }>
export type LabelServiceListLabelsContext<E extends Env = any> = Context<E, '/api/v2/labels', { in: { query: LabelServiceListLabelsParams, }, out: { query: LabelServiceListLabelsParams, } }>
export type LabelServiceCreateLabelContext<E extends Env = any> = Context<E, '/api/v2/labels', { in: { json: Temapiv2LabelBody, }, out: { json: Temapiv2LabelBody, } }>
export type LabelServiceDeleteLabelContext<E extends Env = any> = Context<E, '/api/v2/labels/:labelId', { in: { param: {
 labelId: string,
 }, }, out: { param: {
 labelId: string,
 }, } }>
export type LabelServiceUpdateLabelContext<E extends Env = any> = Context<E, '/api/v2/labels/:labelId', { in: { param: {
 labelId: string,
 },json: Temapiv2LabelBody, }, out: { param: {
 labelId: string,
 },json: Temapiv2LabelBody, } }>
export type LabelServiceBindLabelContext<E extends Env = any> = Context<E, '/api/v2/labels:bindLabel', { in: { json: V2BindLabelRequest, }, out: { json: V2BindLabelRequest, } }>
export type LabelServiceBindResourceContext<E extends Env = any> = Context<E, '/api/v2/labels:bindResource', { in: { json: V2BindResourceRequest, }, out: { json: V2BindResourceRequest, } }>
export type UserServiceLoginContext<E extends Env = any> = Context<E, '/api/v2/login', { in: { json: V2LoginRequest, }, out: { json: V2LoginRequest, } }>
export type UserServiceLogoutContext<E extends Env = any> = Context<E, '/api/v2/logout'>
export type MetricsServiceGetMetricsContext<E extends Env = any> = Context<E, '/api/v2/metrics', { in: { query: MetricsServiceGetMetricsParams, }, out: { query: MetricsServiceGetMetricsParams, } }>
export type MetricsServiceGetTopMetricDataContext<E extends Env = any> = Context<E, '/api/v2/overview/metrics/:name/data', { in: { param: {
 name: string,
 },query: MetricsServiceGetTopMetricDataParams, }, out: { param: {
 name: string,
 },query: MetricsServiceGetTopMetricDataParams, } }>
export type MetricsServiceGetOverviewStatusContext<E extends Env = any> = Context<E, '/api/v2/overview/status', { in: { query: MetricsServiceGetOverviewStatusParams, }, out: { query: MetricsServiceGetOverviewStatusParams, } }>
export type UserServiceListUsersContext<E extends Env = any> = Context<E, '/api/v2/users', { in: { query: UserServiceListUsersParams, }, out: { query: UserServiceListUsersParams, } }>
export type UserServiceCreateUserContext<E extends Env = any> = Context<E, '/api/v2/users', { in: { json: V2User, }, out: { json: V2User, } }>
export type UserServiceDeleteUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 }, }, out: { param: {
 userId: string,
 }, } }>
export type UserServiceUpdateUserContext<E extends Env = any> = Context<E, '/api/v2/users/:userId', { in: { param: {
 userId: string,
 },json: V2User, }, out: { param: {
 userId: string,
 },json: V2User, } }>
export type UserServiceListUserRolesContext<E extends Env = any> = Context<E, '/api/v2/users:userRoles', { in: { query: UserServiceListUserRolesParams, }, out: { query: UserServiceListUserRolesParams, } }>
export type UserServiceValidateSessionContext<E extends Env = any> = Context<E, '/api/v2/users:validateSession'>