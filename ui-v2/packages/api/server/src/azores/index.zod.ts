/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
import { z as zod } from 'zod';

export const apiKeyServiceListApiKeysQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "accessKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.string().optional()
})

export const apiKeyServiceListApiKeysResponse = zod.object({
  "apikeys": zod.array(zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const apiKeyServiceCreateApiKeyBody = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional()
})

export const apiKeyServiceCreateApiKeyResponse = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const apiKeyServiceDeleteApiKeyParams = zod.object({
  "accessKey": zod.string()
})

export const apiKeyServiceDeleteApiKeyResponse = zod.object({

})


export const metricsServiceGetClusterMetricDataParams = zod.object({
  "clusterId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetClusterMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "label": zod.string().optional(),
  "range": zod.string().optional()
})

export const metricsServiceGetClusterMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const metricsServiceGetClusterMetricInstanceParams = zod.object({
  "clusterId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetClusterMetricInstanceResponse = zod.object({
  "type": zod.string().optional(),
  "instanceList": zod.array(zod.string()).optional()
})


export const clusterServiceGetProcessListParams = zod.object({
  "clusterId": zod.string()
})

export const clusterServiceGetProcessListResponse = zod.object({
  "clusterProcessList": zod.array(zod.object({
  "instance": zod.string().optional(),
  "id": zod.string().optional(),
  "user": zod.string().optional(),
  "host": zod.string().optional(),
  "db": zod.string().optional(),
  "command": zod.enum(['Sleep', 'Quit', 'Init DB', 'Query', 'Field List', 'Create DB', 'Drop DB', 'Refresh', 'Shutdown', 'Statistics', 'Processlist', 'Connect', 'Kill', 'Debug', 'Ping', 'Time', 'Delayed Insert', 'Change User', 'Binlog Dump', 'Table Dump', 'Connect out', 'Register Slave', 'Prepare', 'Execute', 'Long Data', 'Close stmt', 'Reset stmt', 'Set option', 'Fetch', 'Daemon', 'Reset connect']).optional(),
  "time": zod.string().optional(),
  "state": zod.string().optional(),
  "info": zod.string().optional(),
  "digest": zod.string().optional(),
  "mem": zod.string().optional(),
  "disk": zod.string().optional(),
  "txnStart": zod.string().optional(),
  "resourceGroup": zod.string().optional(),
  "sessionAlias": zod.string().optional(),
  "rowsAffected": zod.string().optional(),
  "tidbCpu": zod.string().optional(),
  "tikvCpu": zod.string().optional()
})).optional(),
  "isSupportKill": zod.boolean().optional(),
  "totalProcessCount": zod.string().optional(),
  "activeProcessCount": zod.string().optional()
})


export const clusterServiceDeleteProcessParams = zod.object({
  "clusterId": zod.string(),
  "sessionId": zod.string()
})

export const clusterServiceDeleteProcessResponse = zod.object({

})


export const metricsServiceGetHostMetricDataParams = zod.object({
  "hostId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetHostMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "label": zod.string().optional(),
  "range": zod.string().optional()
})

export const metricsServiceGetHostMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const userServiceLoginBody = zod.object({
  "userId": zod.string(),
  "password": zod.string().optional()
})

export const userServiceLoginResponse = zod.object({

})


export const userServiceLogoutResponse = zod.object({

})


export const metricsServiceGetMetricsQueryParams = zod.object({
  "class": zod.enum(['unspecified', 'cluster', 'host', 'overview']).optional(),
  "group": zod.enum(['unspecified', 'overview', 'basic', 'advance', 'resource', 'performance', 'process']).optional(),
  "type": zod.string().optional(),
  "name": zod.string().optional()
})

export const metricsServiceGetMetricsResponse = zod.object({
  "metrics": zod.array(zod.object({
  "class": zod.string().optional(),
  "group": zod.string().optional(),
  "type": zod.string().optional(),
  "order": zod.number().optional(),
  "displayName": zod.string().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional(),
  "metric": zod.object({
  "name": zod.string().optional(),
  "unit": zod.string().optional(),
  "description": zod.string().optional(),
  "minTidbVersion": zod.string().optional(),
  "maxTidbVersion": zod.string().optional(),
  "isBuiltin": zod.boolean().optional(),
  "expressions": zod.array(zod.object({
  "name": zod.string().optional(),
  "promql": zod.string().optional(),
  "promMetric": zod.string().optional(),
  "labels": zod.array(zod.string()).optional(),
  "type": zod.string().optional(),
  "legend": zod.string().optional(),
  "minTidbVersion": zod.string().optional(),
  "maxTidbVersion": zod.string().optional()
})).optional()
}).optional()
})).optional()
})


export const metricsServiceGetTopMetricDataParams = zod.object({
  "name": zod.string()
})

export const metricsServiceGetTopMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "limit": zod.string().optional()
})

export const metricsServiceGetTopMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const metricsServiceGetOverviewStatusQueryParams = zod.object({
  "taskStartTime": zod.string().optional(),
  "taskEndTime": zod.string().optional()
})

export const metricsServiceGetOverviewStatusResponse = zod.object({
  "clusters": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "hosts": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "alerts": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "alertLevels": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "brTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "sysTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "otherTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional()
})


export const roleServiceListRolesQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "nameLike": zod.string().optional(),
  "emailLike": zod.string().optional()
})

export const roleServiceListRolesResponse = zod.object({
  "roles": zod.array(zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.string().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const roleServiceCreateRoleBody = zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.string().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional()
})

export const roleServiceCreateRoleResponse = zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.string().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const roleServiceDeleteRoleParams = zod.object({
  "roleId": zod.number()
})

export const roleServiceDeleteRoleResponse = zod.object({

})


export const userServiceListUsersQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "nameLike": zod.string().optional(),
  "emailLike": zod.string().optional(),
  "roleName": zod.string().optional()
})

export const userServiceListUsersResponse = zod.object({
  "users": zod.array(zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const userServiceCreateUserBody = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional()
})

export const userServiceCreateUserResponse = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const userServiceDeleteUserParams = zod.object({
  "userId": zod.string()
})

export const userServiceDeleteUserResponse = zod.object({

})


export const userServiceUpdateUserParams = zod.object({
  "userId": zod.string()
})

export const userServiceUpdateUserBody = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional()
})

export const userServiceUpdateUserResponse = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const userServiceValidateSessionResponse = zod.object({
  "userId": zod.string()
})

