{
  "swagger": "2.0",
  "info": {
    "title": "Azores Open API",
    "version": "2.0.0"
  },
  "tags": [
    {
      "name": "MetricsService"
    },
    {
      "name": "UserService"
    },
    {
      "name": "RoleService"
    },
    {
      "name": "ApiKeyService"
    },
    {
      "name": "ClusterBRService"
    },
    {
      "name": "ClusterService"
    },
    {
      "name": "CredentialService"
    },
    {
      "name": "DiagnosisService"
    },
    {
      "name": "GlobalBRService"
    },
    {
      "name": "HostService"
    },
    {
      "name": "LicenseService"
    },
    {
      "name": "LocationService"
    },
    {
      "name": "TagService"
    },
    {
      "name": "TiupsService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v2/apiKeys": {
      "get": {
        "summary": "ListApiKeys retrieves a list of API keys.",
        "operationId": "ApiKeyService_ListApiKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListApiKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accessKey",
            "description": "The access_key of the apikey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "creator",
            "description": "The access_key of the apikey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "The status of the apikey",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ApiKeyService"
        ]
      },
      "post": {
        "summary": "CreateApiKey creates a new API key.",
        "operationId": "ApiKeyService_CreateApiKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ApiKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2CreateApiKeyRequest"
            }
          }
        ],
        "tags": [
          "ApiKeyService"
        ]
      }
    },
    "/api/v2/apiKeys/{accessKey}": {
      "get": {
        "summary": "GetApiKeyRequest get an API key by its access key.",
        "operationId": "ApiKeyService_GetApiKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ApiKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accessKey",
            "description": "The access key of the apiKey",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApiKeyService"
        ]
      },
      "delete": {
        "summary": "DeleteApiKey deletes an API key by its access key.",
        "operationId": "ApiKeyService_DeleteApiKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accessKey",
            "description": "The access key of the apiKey",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApiKeyService"
        ]
      },
      "patch": {
        "summary": "UpdateApiKey updates an API key by its access key.",
        "operationId": "ApiKeyService_UpdateApiKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ApiKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accessKey",
            "description": "The access_key of apikey",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyServiceUpdateApiKeyBody"
            }
          }
        ],
        "tags": [
          "ApiKeyService"
        ]
      }
    },
    "/api/v2/apiKeys/{accessKey}:resetSecretKey": {
      "patch": {
        "summary": "ResetSecretKey resets the secret key for an existing API key.",
        "operationId": "ApiKeyService_ResetSecretKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ResetSecretKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accessKey",
            "description": "The access key of the apiKey",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApiKeyService"
        ]
      }
    },
    "/api/v2/backup/policies": {
      "get": {
        "summary": "ListBackupPolicies lists Backup policies",
        "operationId": "GlobalBRService_ListBackupPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListBackupPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      },
      "post": {
        "summary": "CreateBackupPolicy creates a Backup policy",
        "operationId": "GlobalBRService_CreateBackupPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BackupPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2BackupPolicy"
            }
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      }
    },
    "/api/v2/backup/policies/precheck": {
      "post": {
        "summary": "PreCheckBackupPolicy pre-checks a Backup policy",
        "operationId": "GlobalBRService_PreCheckBackupPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2PreCheckBackupPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2BackupPolicy"
            }
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      }
    },
    "/api/v2/backup/policies/{policyId}": {
      "get": {
        "summary": "GetBackupPolicy gets a Backup policy",
        "operationId": "GlobalBRService_GetBackupPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BackupPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "The policy ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      },
      "delete": {
        "summary": "DeleteBackupPolicy deletes a Backup policy",
        "operationId": "GlobalBRService_DeleteBackupPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "The policy ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      },
      "put": {
        "summary": "UpdateBackupPolicy updates a Backup policy",
        "operationId": "GlobalBRService_UpdateBackupPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BackupPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "The policy ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalBRServiceUpdateBackupPolicyBody"
            }
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      }
    },
    "/api/v2/backup/summary": {
      "get": {
        "summary": "GetBRSummary retrieves the summary of BR",
        "operationId": "GlobalBRService_GetBRSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BRSummary"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "top",
            "description": "Number of top clusters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      }
    },
    "/api/v2/backup/tasks": {
      "get": {
        "summary": "ListBRTasks retrieves the tasks of BR",
        "operationId": "GlobalBRService_ListBRTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListBRTasksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "brTaskId",
            "description": "The br task ID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterId",
            "description": "The cluster ID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterName",
            "description": "The cluster name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Type of the br task\n\n - all: All\n - full_backup: Full backup\n - log_backup: Log backup\n - restore_by_file: Restore by file\n - restore_by_time: Restore by time\n - all_backup: All backup\n - all_restore: All restore",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "all",
              "full_backup",
              "log_backup",
              "restore_by_file",
              "restore_by_time",
              "all_backup",
              "all_restore"
            ],
            "default": "all"
          },
          {
            "name": "status",
            "description": "Status of the br task\n\n - all: All\n - running: Running\n - finished: Finished\n - abnormal: Abnormal\n - stopped: Stopped",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "all",
              "running",
              "finished",
              "abnormal",
              "stopped"
            ],
            "default": "all"
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      }
    },
    "/api/v2/backup/tasks/{taskId}": {
      "delete": {
        "summary": "DeleteBRTask deletes a BR task",
        "operationId": "GlobalBRService_DeleteBRTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "description": "The br task ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteBackupFile",
            "description": "delete_backup_file for whether delete the backup files or not",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      }
    },
    "/api/v2/backup/tasks/{taskId}/start": {
      "post": {
        "summary": "StartBRTask starts a BR task",
        "operationId": "GlobalBRService_StartBRTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "description": "The br task ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      }
    },
    "/api/v2/backup/tasks/{taskId}/stop": {
      "post": {
        "summary": "StopBRTask stops a BR task",
        "operationId": "GlobalBRService_StopBRTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "description": "The br task ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GlobalBRService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/backup": {
      "post": {
        "summary": "CreateBackupTask backups a cluster",
        "operationId": "ClusterBRService_CreateBackupTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ClusterBRTask"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterBRServiceCreateBackupTaskBody"
            }
          }
        ],
        "tags": [
          "ClusterBRService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/backup/policy": {
      "get": {
        "summary": "GetClusterBackupPolicy gets the backup info of a specific cluster",
        "operationId": "ClusterBRService_GetClusterBackupPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ClusterBackupPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterBRService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/backup/records": {
      "get": {
        "summary": "ListBackupRecords lists the valid full backup records of a specific cluster",
        "operationId": "ClusterBRService_ListClusterBackupRecords",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListClusterBackupRecordsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "The cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterBRService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/backup/restore": {
      "post": {
        "summary": "CreateRestoreTask restores a cluster",
        "operationId": "ClusterBRService_CreateRestoreTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ClusterBRTask"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID represents the cluster to be restored",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterBRServiceCreateRestoreTaskBody"
            }
          }
        ],
        "tags": [
          "ClusterBRService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/backup/tasks": {
      "get": {
        "summary": "ListClusterBRTasks lists the backup tasks of a specific cluster",
        "operationId": "ClusterBRService_ListClusterBRTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListClusterBRTasksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "The cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "brTaskId",
            "description": "The br task ID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterName",
            "description": "The cluster name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Type of the br task\n\n - full_backup: Full backup\n - log_backup: Log backup\n - restore_by_file: Restore by file\n - restore_by_time: Restore by time\n - all_backup: All backup\n - all_restore: All restore",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "full_backup",
              "log_backup",
              "restore_by_file",
              "restore_by_time",
              "all_backup",
              "all_restore"
            ],
            "default": "full_backup"
          },
          {
            "name": "status",
            "description": "Status of the br task\n\n - running: Running\n - finished: Finished\n - abnormal: Abnormal\n - stopped: Stopped",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "running",
              "finished",
              "abnormal",
              "stopped"
            ],
            "default": "running"
          }
        ],
        "tags": [
          "ClusterBRService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/backup:detect": {
      "post": {
        "summary": "DetectCluster detects the if the cluster exist",
        "operationId": "ClusterBRService_DetectCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2DetectClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterBRService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/metrics/{name}/data": {
      "get": {
        "summary": "Get cluster metric data",
        "operationId": "MetricsService_GetClusterMetricData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ClusterMetricData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Metric Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Start time in Unix timestamp format",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time in Unix timestamp format",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "step",
            "description": "Step time in seconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "label",
            "description": "Line Label for the metric",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "range",
            "description": "Time Range for the query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/metrics/{name}/instance": {
      "get": {
        "summary": "Get metric instances",
        "operationId": "MetricsService_GetClusterMetricInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ClusterMetricInstance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Metric name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/resourcegroups": {
      "get": {
        "summary": "Get resource group list",
        "operationId": "DiagnosisService_GetResourceGroupList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ResourceGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sessions": {
      "get": {
        "summary": "GetProcessList retrieves the list of running processes in a cluster",
        "operationId": "ClusterService_GetProcessList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ProcessList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID uniquely identifies the target cluster",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sessions/{sessionId}": {
      "delete": {
        "summary": "DeleteProcess terminates a specific process in the cluster",
        "operationId": "ClusterService_DeleteProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID uniquely identifies the target cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionId",
            "description": "Session ID identifies the process to be terminated",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries": {
      "get": {
        "summary": "GetSlowQueryList retrieves the list of slow queries",
        "operationId": "DiagnosisService_GetSlowQueryList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time in Unix timestamp",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time in Unix timestamp",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "db",
            "description": "List of databases",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "text",
            "description": "Search text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "Order by field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDesc",
            "description": "Is descending order",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "description": "Fields to select, e.g., \"Query,Digest\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token for pagination",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Number of records to skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "advancedFilter",
            "description": "Advanced filters, such as \"digest = xxx\"",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/advancedFilters": {
      "get": {
        "summary": "GetSlowQueryAvailableAdvancedFilters retrieves the list of available advanced filters",
        "operationId": "DiagnosisService_GetSlowQueryAvailableAdvancedFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryAvailableAdvancedFilters"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/advancedFilters/{filterName}": {
      "get": {
        "summary": "GetSlowQueryAvailableAdvancedFilterInfo retrieves the list of available advanced filter info",
        "operationId": "DiagnosisService_GetSlowQueryAvailableAdvancedFilterInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryAvailableAdvancedFilterInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "description": "filter name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/download": {
      "get": {
        "summary": "DownloadSlowQueryList downloads the list of slow queries",
        "operationId": "DiagnosisService_DownloadSlowQueryList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryDownloadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time in Unix timestamp",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time in Unix timestamp",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "db",
            "description": "List of databases",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "text",
            "description": "Search text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "Order by field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDesc",
            "description": "Is descending order",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "description": "Fields to select, e.g., \"Query,Digest\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token for pagination",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Number of records to skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "advancedFilter",
            "description": "Advanced filters, such as \"digest = xxx\"",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/fields": {
      "get": {
        "summary": "GetSlowQueryAvailableFields retrieves the list of available fields for slow queries",
        "operationId": "DiagnosisService_GetSlowQueryAvailableFields",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryAvailableFields"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/slowqueries/{digest}": {
      "get": {
        "summary": "GetSlowQueryDetail retrieves the details of a specific slow query",
        "operationId": "DiagnosisService_GetSlowQueryDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SlowQueryDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "description": "Query digest",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "description": "Timestamp",
            "in": "query",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "connectionId",
            "description": "Connection ID",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqllimits:addSqlLimit": {
      "post": {
        "summary": "Create SQL limit",
        "operationId": "DiagnosisService_AddSqlLimit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosisServiceAddSqlLimitBody"
            }
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqllimits:checkSupport": {
      "get": {
        "summary": "Check if SQL limit is supported",
        "operationId": "DiagnosisService_CheckSqlLimitSupport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CheckSupportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqllimits:removeSqlLimit": {
      "post": {
        "summary": "Remove SQL limit",
        "operationId": "DiagnosisService_RemoveSqlLimit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosisServiceRemoveSqlLimitBody"
            }
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqllimits:showSqlLimit": {
      "get": {
        "summary": "Query SQL limit",
        "operationId": "DiagnosisService_GetSqlLimitList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SqlLimitList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "watchText",
            "description": "Watch text",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans": {
      "get": {
        "summary": "GetSqlPlanList retrieves the list of plans",
        "operationId": "DiagnosisService_GetSqlPlanList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SqlPlanList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "digest",
            "description": "SQL digest",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "schemaName",
            "description": "Table name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans/{planDigest}:bindSqlPlan": {
      "post": {
        "summary": "BindSqlPlan binds a plan to a specific sql",
        "operationId": "DiagnosisService_BindSqlPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "planDigest",
            "description": "SQL plan digest",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans:checkSupport": {
      "get": {
        "summary": "CheckSupport returns whether sql plan binding is supported",
        "operationId": "DiagnosisService_CheckSqlPlanSupport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CheckSupportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans:showSqlPlanBinding": {
      "get": {
        "summary": "GetSQLBindInfo",
        "operationId": "DiagnosisService_GetSqlPlanBindingList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SqlPlanBindingList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "digest",
            "description": "SQL digest",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/sqlplans:unbindSqlPlan": {
      "post": {
        "summary": "UnbindSqlPlan unbinds a plan from a specific sql",
        "operationId": "DiagnosisService_UnbindSqlPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "description": "SQL digest",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls": {
      "get": {
        "summary": "GetTopSqlList retrieves the list of top sql",
        "operationId": "DiagnosisService_GetTopSqlList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "db",
            "description": "Database list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "text",
            "description": "SQL Text, used for fuzzy query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "Order by field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDesc",
            "description": "Is descending order",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "description": "Fields to select, e.g., \"Query,Digest\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "advancedFilter",
            "description": "Advanced filters, such as \"digest = xxx\"",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "isGroupByTime",
            "description": "Is group by time",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/advancedFilters": {
      "get": {
        "summary": "GetTopSqlAvailableAdvancedFilters retrieves the list of available advanced filters",
        "operationId": "DiagnosisService_GetTopSqlAvailableAdvancedFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlAvailableAdvancedFilters"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/advancedFilters/{filterName}": {
      "get": {
        "summary": "GetTopSqlAvailableAdvancedFilterInfo retrieves the list of available advanced filter info",
        "operationId": "DiagnosisService_GetTopSqlAvailableAdvancedFilterInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlAvailableAdvancedFilterInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterName",
            "description": "filter name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/configs": {
      "get": {
        "summary": "GetTopSqlConfigs retrieves the list of top sql configs",
        "operationId": "DiagnosisService_GetTopSqlConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlConfigs"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      },
      "patch": {
        "summary": "UpdateTopSqlConfigs updates the list of top sql configs",
        "operationId": "DiagnosisService_UpdateTopSqlConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlConfigs"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosisServiceUpdateTopSqlConfigsBody"
            }
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/fields": {
      "get": {
        "summary": "GetTopSqlAvailableFields retrieves the list of available fields for top sqls",
        "operationId": "DiagnosisService_GetTopSqlAvailableFields",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlAvailableFields"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/clusters/{clusterId}/topsqls/{digest}": {
      "get": {
        "summary": "GetTopSqlDetail retrieves the details of a specific top sql",
        "operationId": "DiagnosisService_GetTopSqlDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopSqlDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "description": "Query digest",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "beginTime",
            "description": "Begin time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "planDigest",
            "description": "Plan digest list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DiagnosisService"
        ]
      }
    },
    "/api/v2/credentials": {
      "get": {
        "summary": "List credentials",
        "operationId": "CredentialService_ListCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListCredentialsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "credentialType",
            "description": "the credential type of the credential\n\n - CREDENTIAL_TYPE_UNSPECIFIED: resource type unspecified\n - HOST: credential type host\n - TIDB: credential type tidb",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CREDENTIAL_TYPE_UNSPECIFIED",
              "HOST",
              "TIDB"
            ],
            "default": "CREDENTIAL_TYPE_UNSPECIFIED"
          },
          {
            "name": "credentialId",
            "description": "the credential id of the credential",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CredentialService"
        ]
      },
      "post": {
        "summary": "Create credential",
        "operationId": "CredentialService_CreateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Credential"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "credential",
            "description": "\nthe credential resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2Credential"
            }
          }
        ],
        "tags": [
          "CredentialService"
        ]
      }
    },
    "/api/v2/credentials/{credentialId}": {
      "get": {
        "summary": "Get credential",
        "operationId": "CredentialService_GetCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Credential"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "credentialId",
            "description": "the credential id of the credential",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CredentialService"
        ]
      },
      "delete": {
        "summary": "Delete credential by credential id",
        "operationId": "CredentialService_DeleteCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "credentialId",
            "description": "the credential id of the credential",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CredentialService"
        ]
      },
      "patch": {
        "summary": "Update credential by credential id",
        "operationId": "CredentialService_UpdateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Credential"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "credentialId",
            "description": "the credential id of the credential",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialServiceUpdateCredentialBody"
            }
          }
        ],
        "tags": [
          "CredentialService"
        ]
      }
    },
    "/api/v2/credentials/{credentialId}:downloadRsaKey": {
      "get": {
        "summary": "Download credential public key and private key",
        "operationId": "CredentialService_DownloadRSAKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2DownloadRSAKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "credentialId",
            "description": "the credential id of the credential",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CredentialService"
        ]
      }
    },
    "/api/v2/credentials:generateRsaKey": {
      "post": {
        "summary": "Generate credential public key and private key",
        "operationId": "CredentialService_GenerateRSAKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GenerateRSAKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GenerateRSAKeyRequest"
            }
          }
        ],
        "tags": [
          "CredentialService"
        ]
      }
    },
    "/api/v2/credentials:validateConnection": {
      "post": {
        "summary": "Validate credential is accessible",
        "operationId": "CredentialService_ValidateConnection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ValidateConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ValidateConnectionRequest"
            }
          }
        ],
        "tags": [
          "CredentialService"
        ]
      }
    },
    "/api/v2/hosts": {
      "get": {
        "summary": "ListHosts",
        "operationId": "HostService_ListHosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListHostsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchValue",
            "description": "The name of the user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationIds",
            "description": "location_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tagIds",
            "description": "tag_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "HostService"
        ]
      },
      "post": {
        "summary": "CreateHosts",
        "operationId": "HostService_CreateHosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2HostCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "\nhost resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2CreateHost"
            }
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/import/tasks": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload a csv form data to host.",
        "operationId": "HostService_Import",
        "parameters": [
          {
            "description": "Upload a csv form data to host.",
            "format": "binary",
            "in": "formData",
            "name": "hostData",
            "required": true,
            "type": "file"
          },
          {
            "description": "The Credential_Id of the Import",
            "in": "formData",
            "name": "credentialId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ImportTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "summary": "import host",
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/import/tasks/{taskId}": {
      "get": {
        "summary": "Import one host",
        "operationId": "HostService_ImportTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ImportTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "description": "task_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/import/tasks/{taskId}:confirm": {
      "post": {
        "summary": "HostConfirm one host",
        "operationId": "HostService_HostConfirm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ConfirmResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "description": "task_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HostServiceHostConfirmBody"
            }
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/{hostId}": {
      "get": {
        "summary": "Get",
        "operationId": "HostService_GetHost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Host"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "The host_id of the host",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HostService"
        ]
      },
      "delete": {
        "summary": "delete one host by host_id",
        "operationId": "HostService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "The host_id of the host",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HostService"
        ]
      },
      "patch": {
        "summary": "update one host by host_id",
        "operationId": "HostService_UpdateHost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Host"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "The host_id of the Host",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2HostServiceUpdateHostBody"
            }
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/{hostId}/disks": {
      "get": {
        "summary": "GetDisks",
        "operationId": "HostService_GetDisks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2HostDiskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "The host_id of the host",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/{hostId}/metrics/{name}/data": {
      "get": {
        "summary": "Get host metric data",
        "operationId": "MetricsService_GetHostMetricData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2HostMetricData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "Cluster ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Metric Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Start time in Unix timestamp format",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time in Unix timestamp format",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "step",
            "description": "Step time in seconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "label",
            "description": "Line Label for the metric",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "range",
            "description": "Time Range for the query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/hosts/{hostId}/report/{reportId}": {
      "get": {
        "summary": "Report",
        "operationId": "HostService_Report",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "The host_id of the host",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "reportId",
            "description": "The report_id of the host",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/{hostId}/tidbProcesses": {
      "get": {
        "summary": "GetInstances",
        "operationId": "HostService_GetTiDBProcesses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2HostTiDBProcessesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "The host_id of the host",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/{hostId}:fix": {
      "post": {
        "summary": "Fix",
        "operationId": "HostService_Fix",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2HostFixResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "The host_id of the host",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts/{hostId}:systemCheck": {
      "post": {
        "summary": "Check",
        "operationId": "HostService_Check",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2HostCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hostId",
            "description": "The host_id of the host",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts:batchDelete": {
      "post": {
        "summary": "delete one host by host_id",
        "operationId": "HostService_BatchDelete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2BatchDeleteRequest"
            }
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts:download": {
      "get": {
        "summary": "HostConfirm one host",
        "operationId": "HostService_DownloadListHosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2DownloadListHostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchValue",
            "description": "The name of the user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationIds",
            "description": "location_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tagIds",
            "description": "tag_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/hosts:downloadHostTemplate": {
      "get": {
        "summary": "DownloadHostTemplate one host",
        "operationId": "HostService_DownloadHostTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2DownloadHostTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HostService"
        ]
      }
    },
    "/api/v2/license": {
      "get": {
        "summary": "GetLicense returns the license details",
        "operationId": "LicenseService_GetLicense",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/licensev2License"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "LicenseService"
        ]
      }
    },
    "/api/v2/license/devicecode": {
      "get": {
        "summary": "GetDeviceCode returns the device code to help activate the license",
        "operationId": "LicenseService_GetDeviceCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2DeviceCode"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "LicenseService"
        ]
      }
    },
    "/api/v2/license:activate": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload a license using form data to activate.",
        "operationId": "LicenseService_ActivateLicense",
        "parameters": [
          {
            "description": "The content of the license file\n\nThe license file to upload to activate the license",
            "format": "binary",
            "in": "formData",
            "name": "license",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/licensev2License"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "summary": "Activate a license",
        "tags": [
          "LicenseService"
        ]
      }
    },
    "/api/v2/license:trial": {
      "post": {
        "summary": "ActivateFreeLicense activate the embedded free license",
        "operationId": "LicenseService_ActivateFreeLicense",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/licensev2License"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "LicenseService"
        ]
      }
    },
    "/api/v2/locations": {
      "get": {
        "summary": "list location",
        "operationId": "LocationService_ListLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationKey",
            "description": "location key  (e.g., \"zone\", \"dc\")",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "zone",
              "dc",
              "rack"
            ]
          },
          {
            "name": "locationValue",
            "description": "the Location value of the Location",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "description": "the Location parent_Id of the Location",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LocationService"
        ]
      },
      "post": {
        "summary": "create CreateLocationRequest",
        "operationId": "LocationService_CreateLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Locations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "location",
            "description": "the Location basic resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2Locations"
            }
          }
        ],
        "tags": [
          "LocationService"
        ]
      }
    },
    "/api/v2/locations/{locationId}": {
      "get": {
        "summary": "get Location",
        "operationId": "LocationService_GetLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Locations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "description": "the Location id of the Location",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LocationService"
        ]
      },
      "delete": {
        "summary": "delete Location by Location id",
        "operationId": "LocationService_DeleteLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "description": "the Location id of the Location",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LocationService"
        ]
      },
      "patch": {
        "summary": "update Location basic info by Location id",
        "operationId": "LocationService_UpdateLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Locations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "description": "the Location id of the Location",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationServiceUpdateLocationsBody"
            }
          }
        ],
        "tags": [
          "LocationService"
        ]
      }
    },
    "/api/v2/login": {
      "post": {
        "summary": "Login allows a user to log in and start a session.",
        "operationId": "UserService_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2LoginRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/logout": {
      "post": {
        "summary": "Logout allows a user to log out and end their session.",
        "operationId": "UserService_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/metrics": {
      "get": {
        "summary": "Get metrics info",
        "operationId": "MetricsService_GetMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Metrics"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "class",
            "description": "Level 1 classification\n\n - unspecified: Unspecified\n - cluster: Cluster metrics\n - host: Host metrics\n - overview: Overview metrics",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "unspecified",
              "cluster",
              "host",
              "overview"
            ],
            "default": "unspecified"
          },
          {
            "name": "group",
            "description": "Level 2 grouping\n\n - unspecified: Unspecified group\n - overview: Overview group\n - basic: Basic group\n - advanced: Advanced group\n - resource: Resource group\n - performance: Performance group\n - process: Process group",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "unspecified",
              "overview",
              "basic",
              "advanced",
              "resource",
              "performance",
              "process"
            ],
            "default": "unspecified"
          },
          {
            "name": "type",
            "description": "Level 3 type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The metric name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/overview/metrics/config": {
      "get": {
        "summary": "Get top metric config",
        "operationId": "MetricsService_GetTopMetricConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopMetricConfig"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/overview/metrics/{name}/data": {
      "get": {
        "summary": "Get top metric data",
        "operationId": "MetricsService_GetTopMetricData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TopMetricData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Metric name to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Start time for the query",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "End time for the query",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "step",
            "description": "Step time for the query",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Limit for the number of top results",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/overview/status": {
      "get": {
        "summary": "Get overview status",
        "operationId": "MetricsService_GetOverviewStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2OverviewStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskStartTime",
            "description": "Task start time in Unix timestamp format",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "taskEndTime",
            "description": "Task end time in Unix timestamp format",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v2/roles": {
      "get": {
        "summary": "ListRoles retrieves a list of roles.",
        "operationId": "RoleService_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleNameLike",
            "description": "role_name_like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleName",
            "description": "The name of the role",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "post": {
        "summary": "CreateRole creates a new role.",
        "operationId": "RoleService_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Role"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "role",
            "description": "\nUser resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2Role"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v2/roles/{roleId}": {
      "delete": {
        "summary": "DeleteRole deletes a role by role ID.",
        "operationId": "RoleService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "description": "The id of the role",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "patch": {
        "summary": "UpdateRole updates a role by role ID.",
        "operationId": "RoleService_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Role"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "description": "The id of the role",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleServiceUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v2/tags": {
      "get": {
        "summary": "List tags",
        "operationId": "TagService_ListTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListTagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TagService"
        ]
      },
      "post": {
        "summary": "Create tag",
        "operationId": "TagService_CreateTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tagv2Tag"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tag",
            "description": "the tag with basic resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tagv2Tag"
            }
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tags/{tagId}": {
      "get": {
        "summary": "Get tag",
        "operationId": "TagService_GetTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tagv2Tag"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tagId",
            "description": "the tag id of the tag",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TagService"
        ]
      },
      "delete": {
        "summary": "Delete tag by tag id",
        "operationId": "TagService_DeleteTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tagId",
            "description": "the tag id of the tag",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TagService"
        ]
      },
      "patch": {
        "summary": "Update tag basic info by tag id",
        "operationId": "TagService_UpdateTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tagv2Tag"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tagId",
            "description": "the tag id of the tag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagServiceUpdateTagBody"
            }
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tags/{tagId}:getWithBindings": {
      "get": {
        "summary": "Get tag with bindings",
        "operationId": "TagService_GetTagWithBindings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GetTagWithBindingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tagId",
            "description": "the tag id of the tag",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tags:batchCreate": {
      "post": {
        "summary": "Batch create tags",
        "operationId": "TagService_BatchCreateTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BatchCreateTagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2BatchCreateTagsRequest"
            }
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tags:bindResource": {
      "post": {
        "summary": "Modify bind object by resource id",
        "operationId": "TagService_BindResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BindResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2BindResourceRequest"
            }
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tags:bindTag": {
      "post": {
        "summary": "Modify bind object by tag id",
        "operationId": "TagService_BindTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2BindTagResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2BindTagRequest"
            }
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tags:listByResourceType": {
      "get": {
        "summary": "List tags by resource type",
        "operationId": "TagService_ListTagsByResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListTagsByResourceTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tagKey",
            "description": "the tag key which the tag values belong to",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "keyword",
            "description": "the keyword which tag values similar to",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceType",
            "description": "the resource type of the tag has bound with\n\n - TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: resource type unspecified\n - HOST: resource type host\n - TIUP: resource type tiup\n - CLUSTER: resource type cluster",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "TAG_BIND_RESOURCE_TYPE_UNSPECIFIED",
              "HOST",
              "TIUP",
              "CLUSTER"
            ],
            "default": "TAG_BIND_RESOURCE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tags:listKeys": {
      "get": {
        "summary": "List tag keys",
        "operationId": "TagService_ListTagKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListTagKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "keyword",
            "description": "the keyword which tag key similar to",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceType",
            "description": "the resource type of the tag has bound with\n\n - TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: resource type unspecified\n - HOST: resource type host\n - TIUP: resource type tiup\n - CLUSTER: resource type cluster",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "TAG_BIND_RESOURCE_TYPE_UNSPECIFIED",
              "HOST",
              "TIUP",
              "CLUSTER"
            ],
            "default": "TAG_BIND_RESOURCE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tags:listWithBindings": {
      "get": {
        "summary": "List tags with bindings",
        "operationId": "TagService_ListTagsWithBindings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListTagsWithBindingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tagKeys",
            "description": "the tag which the tag key in",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tagValueLike",
            "description": "the tag which the tag value like",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TagService"
        ]
      }
    },
    "/api/v2/tiups": {
      "get": {
        "summary": "list Tiups",
        "operationId": "TiupsService_ListTiups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListTiupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "page token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "Skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchValue",
            "description": "the Tiups key of the Tiups",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tagIds",
            "description": "the Tiups tag_ids of the tagIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hostIds",
            "description": "the Tiups host_ids of the tagIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TiupsService"
        ]
      },
      "post": {
        "summary": "create Tiups",
        "operationId": "TiupsService_CreateTiups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Tiups"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tiups",
            "description": "the Tiups basic resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tiupv2CreateTiups"
            }
          }
        ],
        "tags": [
          "TiupsService"
        ]
      }
    },
    "/api/v2/tiups/{tiupId}": {
      "get": {
        "summary": "get Tiups",
        "operationId": "TiupsService_GetTiups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Tiups"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tiupId",
            "description": "the Tiups id of the Tiups",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TiupsService"
        ]
      },
      "delete": {
        "summary": "delete Tiups by Tiups id",
        "operationId": "TiupsService_DeleteTiups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tiupId",
            "description": "the Tiups id of the Tiups",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TiupsService"
        ]
      },
      "patch": {
        "summary": "update Tiups basic info by Tiups id",
        "operationId": "TiupsService_UpdateTiups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2Tiups"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tiupId",
            "description": "the tiup_id id of the Tiups",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2TiupsServiceUpdateTiupsBody"
            }
          }
        ],
        "tags": [
          "TiupsService"
        ]
      }
    },
    "/api/v2/tiups/{tiupId}/clusters": {
      "get": {
        "summary": "Get TiupsCluster",
        "operationId": "TiupsService_GetTiupsCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2TiupsClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tiupId",
            "description": "the Tiups id of the Tiups",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TiupsService"
        ]
      }
    },
    "/api/v2/users": {
      "get": {
        "summary": "ListUsers retrieves a list of users.",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The number of users to retrieve per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Pagination token for retrieving the next page of users.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "description": "The number of users to skip for pagination purposes.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderBy",
            "description": "The sorting criteria for the user list.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameLike",
            "description": "Filter users by username using a \"like\" operation.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "emailLike",
            "description": "Filter users by email using a \"like\" operation.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleName",
            "description": "Filter users by role name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "CreateUser creates a new user.",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "\nUser resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2User"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/users/profile": {
      "get": {
        "summary": "GetUserProfile retrieves the profile information of the authenticated user.",
        "operationId": "UserService_GetUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2UserProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/users/{userId}": {
      "get": {
        "summary": "GetUser retrieves a user by user ID.",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user_id of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "summary": "DeleteUser deletes a user by user ID.",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The id of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "patch": {
        "summary": "UpdateUser updates a user's information by user ID.",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The unique user ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceUpdateUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/users/{userId}:resetPassword": {
      "patch": {
        "summary": "ResetPassword allows an admin user to reset the password of another user.",
        "operationId": "UserService_ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The id of the user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceResetPasswordBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/users:changePassword": {
      "patch": {
        "summary": "ChangePassword allows the authenticated user to change their password.",
        "operationId": "UserService_ChangePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ChangePasswordRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v2/users:validateSession": {
      "get": {
        "summary": "ValidateSession verifies the validity of the current session.",
        "operationId": "UserService_ValidateSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ValidateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      }
    },
    "/documentation/errorDetail": {
      "get": {
        "summary": "GetTemErrorDetail",
        "operationId": "ApiKeyService_GetTemErrorDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ErrorDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ApiKeyService"
        ]
      }
    }
  },
  "definitions": {
    "ApiKeyServiceUpdateApiKeyBody": {
      "type": "object",
      "properties": {
        "secretKey": {
          "type": "string",
          "title": "The secret_key of apikey"
        },
        "creator": {
          "type": "string",
          "title": "The creator of apikey"
        },
        "status": {
          "type": "string",
          "enum": [
            "disable",
            "enable"
          ],
          "title": "The apikey status"
        },
        "description": {
          "type": "string",
          "title": "The description of apikey"
        }
      },
      "title": "UpdateApikeyRequest Request"
    },
    "ClusterBRServiceCreateBackupTaskBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the task"
        },
        "destination": {
          "type": "string",
          "title": "Destination of the task or source for restore"
        },
        "accessKeyId": {
          "type": "string",
          "title": "Access key ID for the task"
        },
        "secretAccessKey": {
          "type": "string",
          "title": "Secret access key for the task"
        },
        "rateLimit": {
          "type": "integer",
          "format": "int32",
          "title": "Rate limit for the task"
        },
        "concurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Concurrency for the task"
        },
        "logFile": {
          "type": "string",
          "title": "Log file for the task"
        },
        "retention": {
          "type": "integer",
          "format": "int32",
          "title": "Retention for the task"
        }
      },
      "title": "CreateBackupTaskRequest represents the request to create a backup task",
      "required": [
        "destination"
      ]
    },
    "ClusterBRServiceCreateRestoreTaskBody": {
      "type": "object",
      "properties": {
        "targetClusterId": {
          "type": "string",
          "title": "Target cluster ID, only for restore"
        },
        "type": {
          "$ref": "#/definitions/v2ClusterBRTypeEnumData",
          "title": "Type of the task, only restore by file and restore by time allowed"
        },
        "backupTaskId": {
          "type": "string",
          "title": "Backup task ID"
        },
        "restoreTime": {
          "type": "string",
          "title": "Restore time for the task"
        },
        "destination": {
          "type": "string",
          "title": "Destination of the task or source for restore"
        },
        "accessKeyId": {
          "type": "string",
          "title": "Access key ID for the task"
        },
        "secretAccessKey": {
          "type": "string",
          "title": "Secret access key for the task"
        },
        "rateLimit": {
          "type": "integer",
          "format": "int32",
          "title": "Rate limit for the task"
        },
        "concurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Concurrency for the task"
        },
        "logFile": {
          "type": "string",
          "title": "Log file for the task"
        }
      },
      "title": "CreateRestoreTaskRequest represents the request to create a br task",
      "required": [
        "targetClusterId"
      ]
    },
    "CredentialServiceUpdateCredentialBody": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "title": "the user name of the credential"
        },
        "credentialType": {
          "$ref": "#/definitions/v2CredentialType",
          "title": "the credential type of the credential"
        },
        "validateType": {
          "$ref": "#/definitions/v2CredentialValidateType",
          "title": "the validate type of the credential"
        },
        "credentialName": {
          "type": "string",
          "title": "the credential name of the credential"
        },
        "description": {
          "type": "string",
          "title": "the description of the credential"
        },
        "hostCredential": {
          "$ref": "#/definitions/v2HostCredentialObject",
          "title": "the host credential object"
        },
        "tidbCredential": {
          "$ref": "#/definitions/v2TiDBCredentialObject",
          "title": "the tidb cluster credential object"
        },
        "forceUpdate": {
          "type": "boolean",
          "title": "auto ssh-copy or set password when change validate type host credential"
        }
      },
      "title": "UpdateCredential Request",
      "required": [
        "userName",
        "credentialType",
        "validateType"
      ]
    },
    "DiagnosisServiceAddSqlLimitBody": {
      "type": "object",
      "properties": {
        "resourceGroup": {
          "type": "string",
          "title": "Resource group"
        },
        "action": {
          "type": "string",
          "enum": [
            "DRYRUN",
            "COOLDOWN",
            "KILL"
          ],
          "title": "Action"
        },
        "watchText": {
          "type": "string",
          "title": "Watch text"
        }
      },
      "title": "Request message for creating SQL limit",
      "required": [
        "resourceGroup",
        "action",
        "watchText"
      ]
    },
    "DiagnosisServiceRemoveSqlLimitBody": {
      "type": "object",
      "properties": {
        "watchText": {
          "type": "string",
          "title": "Watch text"
        },
        "id": {
          "type": "string",
          "title": "SQl limit id"
        }
      },
      "title": "Request message for removing SQL limit",
      "required": [
        "watchText",
        "id"
      ]
    },
    "DiagnosisServiceUpdateTopSqlConfigsBody": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "title": "tidb_enable_stmt_summary"
        },
        "refreshInterval": {
          "type": "integer",
          "format": "int32",
          "title": "tidb_stmt_summary_refresh_interval"
        },
        "historySize": {
          "type": "integer",
          "format": "int32",
          "title": "tidb_stmt_summary_history_size"
        },
        "maxSize": {
          "type": "integer",
          "format": "int32",
          "title": "tidb_stmt_summary_max_stmt_count"
        },
        "internalQuery": {
          "type": "boolean",
          "title": "tidb_stmt_summary_internal_query"
        }
      },
      "title": "Request message for updating top sql configs",
      "required": [
        "enable"
      ]
    },
    "GlobalBRServiceUpdateBackupPolicyBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The policy name"
        },
        "logBackup": {
          "type": "boolean",
          "title": "LogBackup means whether to backup log"
        },
        "destination": {
          "type": "string",
          "title": "Destination of the backup"
        },
        "accessKeyId": {
          "type": "string",
          "title": "AccessKeyID"
        },
        "secretAccessKey": {
          "type": "string",
          "title": "SecretAccessKey"
        },
        "rateLimit": {
          "type": "integer",
          "format": "int32",
          "title": "RateLimit"
        },
        "concurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Concurrency"
        },
        "logFile": {
          "type": "string",
          "title": "LogFile"
        },
        "cycle": {
          "$ref": "#/definitions/v2CycleEnumData",
          "title": "Cycle of backup"
        },
        "frequency": {
          "type": "string",
          "title": "Frequency: week:0~6 for Sunday To Saturday, month:1~31 for Date.example:1,2,3,4,5,6,7"
        },
        "time": {
          "type": "string",
          "title": "Time"
        },
        "retention": {
          "type": "integer",
          "format": "int32",
          "title": "Retention"
        },
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Cluster"
          },
          "title": "Clusters"
        },
        "clusterIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ClusterIDs"
        }
      },
      "title": "BackupPolicy represents a backup policy",
      "required": [
        "name",
        "logBackup",
        "destination",
        "cycle",
        "frequency",
        "time",
        "retention"
      ]
    },
    "HostServiceHostConfirmBody": {
      "type": "object",
      "title": "ConfirmRequest"
    },
    "LocationServiceUpdateLocationsBody": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/v2Locations",
          "title": "the Location basic resource"
        }
      },
      "title": "UpdateLocation Request"
    },
    "RoleServiceUpdateRoleBody": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string",
          "title": "The name of the role"
        },
        "roleType": {
          "type": "integer",
          "format": "int32",
          "title": "The id of the role"
        },
        "detail": {
          "type": "string",
          "title": "The detail of the role"
        },
        "note": {
          "type": "string",
          "title": "The note of the role"
        }
      },
      "title": "Update Role Request",
      "required": [
        "roleName"
      ]
    },
    "TagServiceUpdateTagBody": {
      "type": "object",
      "properties": {
        "tagKey": {
          "type": "string",
          "title": "the tag key of the tag"
        },
        "tagValue": {
          "type": "string",
          "title": "the tag value of the tag"
        }
      },
      "title": "UpdateTag Request",
      "required": [
        "tagValue"
      ]
    },
    "UserServiceResetPasswordBody": {
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string",
          "title": "User new password"
        }
      },
      "title": "ResetPasswordRequest Request",
      "required": [
        "newPassword"
      ]
    },
    "UserServiceUpdateUserBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address of the user."
        },
        "note": {
          "type": "string",
          "description": "Additional notes about the user."
        },
        "userType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the user (e.g., admin, regular user)."
        },
        "phone": {
          "type": "string",
          "description": "The user's phone number."
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2UserRole"
          },
          "description": "The roles assigned to the user."
        }
      },
      "title": "UpdateUser Request"
    },
    "hostv2Report": {
      "type": "object",
      "properties": {
        "reportId": {
          "type": "string",
          "title": "The report_id of the Report"
        },
        "hostId": {
          "type": "string",
          "title": "The host_id of the Report"
        },
        "checkId": {
          "type": "string",
          "title": "The checkId of the Report"
        },
        "checkName": {
          "type": "string",
          "title": "The checkName of the Report"
        },
        "checkOut": {
          "type": "string",
          "title": "The checkOut of the Report"
        },
        "checkDesc": {
          "type": "string",
          "title": "The checkDesc of the Report"
        },
        "checkResult": {
          "type": "string",
          "enum": [
            "passed",
            "failed",
            "warned"
          ],
          "title": "check optional (e.g., \"passed\", \"failed\")"
        },
        "optional": {
          "type": "boolean",
          "enum": [
            "true",
            "false"
          ],
          "title": "check optional (e.g., \"true\", \"false\")"
        },
        "fixable": {
          "type": "boolean",
          "enum": [
            "true",
            "false"
          ],
          "title": "check fixable (e.g., \"true\", \"false\")"
        },
        "checkBody": {
          "type": "string",
          "title": "The checkBody of the Report"
        }
      },
      "title": "Report",
      "required": [
        "reportId"
      ]
    },
    "hostv2UpdateHost": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "title": "The host_id of the Host"
        },
        "sshPort": {
          "type": "integer",
          "format": "int32",
          "title": "The SSHPort of the Host"
        },
        "credentialId": {
          "type": "string",
          "title": "The Credential_Id of the Host"
        },
        "locationId": {
          "type": "string",
          "title": "The locationId of the Host"
        },
        "tagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tagIds of the Host"
        },
        "comment": {
          "type": "string",
          "title": "The comment of the Host"
        }
      },
      "title": "UpdateHost"
    },
    "licensev2License": {
      "type": "object",
      "properties": {
        "licenseId": {
          "type": "string",
          "title": "License ID"
        },
        "version": {
          "type": "string",
          "title": "Version represents the supported version of TEM"
        },
        "licenseType": {
          "$ref": "#/definitions/v2LicenseTypeEnumData",
          "title": "LicenseTypeEnum represents the type of license: free, ultimate"
        },
        "allow": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of supported features in url prefix"
        },
        "deny": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of unsupported features in url prefix"
        },
        "activateAt": {
          "type": "string",
          "format": "date-time",
          "title": "Activation date of license"
        },
        "expirationAt": {
          "type": "string",
          "format": "date-time",
          "title": "Expiration date of license"
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "title": "Signature of license"
        },
        "hosts": {
          "type": "string",
          "format": "int64",
          "title": "Number of hosts"
        },
        "vcpu": {
          "type": "string",
          "format": "int64",
          "title": "Number of vcpu"
        },
        "alerts": {
          "type": "string",
          "format": "int64",
          "title": "Number of alters"
        },
        "customerCode": {
          "type": "string",
          "title": "Customer code to restrict the range of features"
        },
        "deviceCode": {
          "type": "string",
          "title": "Device code which is bound to the license"
        },
        "status": {
          "$ref": "#/definitions/v2LicenseStatusEnumData",
          "title": "License status"
        }
      },
      "title": "License"
    },
    "metricsv2Value": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "number",
          "format": "double",
          "title": "Timestamp of the value"
        },
        "value": {
          "type": "string",
          "title": "The actual value"
        }
      },
      "title": "Value represents a single value in the query result"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "properties": {
        "error": {
          "properties": {
            "code": {
              "format": "int32",
              "type": "integer"
            },
            "details": {
              "items": {
                "$ref": "#/definitions/v2ErrorDetail",
                "type": "object"
              },
              "type": "array"
            },
            "message": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "tagv2Tag": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "title": "the tag id of the tag"
        },
        "tagKey": {
          "type": "string",
          "title": "the tag key of the tag"
        },
        "tagValue": {
          "type": "string",
          "title": "the tag value of the tag"
        }
      },
      "title": "Tag basic resource",
      "required": [
        "tagValue"
      ]
    },
    "tiupv2CreateTiups": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "title": "host_id"
        },
        "tiupHome": {
          "type": "string",
          "title": "The SSHPort of the Host"
        },
        "description": {
          "type": "string",
          "title": "The Credential_Id of the Host"
        },
        "name": {
          "type": "string",
          "title": "The locationId of the Host"
        },
        "tagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tagIds of the Host"
        }
      },
      "title": "CreateTiups"
    },
    "tiupv2UpdateTiups": {
      "type": "object",
      "properties": {
        "tagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tagIds of the Host"
        },
        "description": {
          "type": "string",
          "title": "The Credential_Id of the Host"
        },
        "name": {
          "type": "string",
          "title": "The locationId of the Host"
        }
      },
      "title": "UpdateTiups"
    },
    "v2ActivateLicenseRequest": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "title": "The File name of the license"
        },
        "content": {
          "type": "string",
          "format": "binary",
          "description": "The license file to upload to activate the license",
          "title": "The content of the license file"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The header of the license file"
        }
      },
      "title": "ActivateLicenseRequest is the request message for ActivateLicense",
      "required": [
        "fileName",
        "content",
        "headers"
      ]
    },
    "v2ApiKey": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string",
          "title": "The access_key of apikey"
        },
        "secretKey": {
          "type": "string",
          "title": "The secret_key of apikey"
        },
        "creator": {
          "type": "string",
          "title": "The creator of apikey"
        },
        "status": {
          "type": "string",
          "enum": [
            "disable",
            "enable"
          ],
          "title": "The apikey status"
        },
        "description": {
          "type": "string",
          "title": "The description of apikey"
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "title": "The create time of the apikey",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The update time of the role",
          "readOnly": true
        }
      },
      "title": "ApiKey resource",
      "required": [
        "accessKey"
      ]
    },
    "v2AssociatedClusters": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string",
          "title": "the tag id of the tag"
        },
        "clusterName": {
          "type": "string",
          "title": "the tag key of the tag"
        }
      },
      "title": "AssociatedClusters"
    },
    "v2BRSummary": {
      "type": "object",
      "properties": {
        "topClustersWithBrSize": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ClusterWithBRSize"
          },
          "title": "List of top BR size clusters"
        },
        "topClustersWithBrAlert": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ClusterWithBRAlert"
          },
          "title": "List of top BR alert clusters"
        },
        "topClustersWithoutBrPolicy": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ClusterWithoutBRPolicy"
          },
          "title": "List of top size clusters without BR policy"
        }
      },
      "title": "GetBRSummaryResp represents the response to get br summary"
    },
    "v2BRTask": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "The br task ID"
        },
        "type": {
          "$ref": "#/definitions/v2TypeEnumData",
          "title": "Type of the br task"
        },
        "triggerType": {
          "$ref": "#/definitions/v2TriggerTypeEnumData",
          "title": "Trigger type of the br task"
        },
        "name": {
          "type": "string",
          "title": "Name of the br task"
        },
        "status": {
          "$ref": "#/definitions/v2StatusEnumData",
          "title": "Status of the br task"
        },
        "restoredTs": {
          "type": "string",
          "title": "Restored ts"
        },
        "startTime": {
          "type": "string",
          "title": "Start time"
        },
        "endTime": {
          "type": "string",
          "title": "End time"
        },
        "clusterId": {
          "type": "string",
          "title": "The cluster ID"
        },
        "clusterName": {
          "type": "string",
          "title": "The cluster name"
        },
        "destination": {
          "type": "string",
          "title": "Destination of the br task"
        },
        "size": {
          "type": "string",
          "title": "Size of the br task, 10TB/100GB"
        },
        "sizeByte": {
          "type": "string",
          "format": "int64",
          "title": "Size of the br task in byte"
        },
        "errorMessage": {
          "type": "string",
          "title": "Error message"
        },
        "policyId": {
          "type": "string",
          "title": "Policy ID of the br task"
        },
        "policyName": {
          "type": "string",
          "title": "Policy name of the br task"
        },
        "log": {
          "type": "string",
          "title": "Log"
        },
        "accessKeyId": {
          "type": "string",
          "title": "AccessKeyID"
        },
        "secretAccessKey": {
          "type": "string",
          "title": "SecretAccessKey"
        },
        "rateLimit": {
          "type": "integer",
          "format": "int32",
          "title": "RateLimit"
        },
        "concurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Concurrency"
        },
        "logFile": {
          "type": "string",
          "title": "LogFile"
        },
        "expireTime": {
          "type": "string",
          "title": "ExpireTime"
        }
      },
      "title": "BRTask represents a br task"
    },
    "v2BackupCycleEnumData": {
      "type": "string",
      "enum": [
        "week",
        "month"
      ],
      "default": "week",
      "description": "- week: \nWeek\n - month: \nMonth",
      "title": "Data of CycleEnum"
    },
    "v2BackupPolicy": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "title": "The policy ID"
        },
        "name": {
          "type": "string",
          "title": "The policy name"
        },
        "logBackup": {
          "type": "boolean",
          "title": "LogBackup means whether to backup log"
        },
        "destination": {
          "type": "string",
          "title": "Destination of the backup"
        },
        "accessKeyId": {
          "type": "string",
          "title": "AccessKeyID"
        },
        "secretAccessKey": {
          "type": "string",
          "title": "SecretAccessKey"
        },
        "rateLimit": {
          "type": "integer",
          "format": "int32",
          "title": "RateLimit"
        },
        "concurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Concurrency"
        },
        "logFile": {
          "type": "string",
          "title": "LogFile"
        },
        "cycle": {
          "$ref": "#/definitions/v2CycleEnumData",
          "title": "Cycle of backup"
        },
        "frequency": {
          "type": "string",
          "title": "Frequency: week:0~6 for Sunday To Saturday, month:1~31 for Date.example:1,2,3,4,5,6,7"
        },
        "time": {
          "type": "string",
          "title": "Time"
        },
        "retention": {
          "type": "integer",
          "format": "int32",
          "title": "Retention"
        },
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Cluster"
          },
          "title": "Clusters"
        },
        "clusterIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ClusterIDs"
        }
      },
      "title": "BackupPolicy represents a backup policy",
      "required": [
        "name",
        "logBackup",
        "destination",
        "cycle",
        "frequency",
        "time",
        "retention"
      ]
    },
    "v2BasicClusterInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The cluster ID"
        },
        "name": {
          "type": "string",
          "title": "The cluster name"
        }
      },
      "title": "BasicCluster represents a cluster basic info"
    },
    "v2BatchCreateTagsRequest": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tagv2Tag"
          },
          "title": "the tags with basic resource"
        }
      },
      "title": "Batch Create Tags Request",
      "required": [
        "tags"
      ]
    },
    "v2BatchCreateTagsResponse": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tagv2Tag"
          },
          "title": "the tags"
        }
      },
      "title": "Create Tags Response"
    },
    "v2BatchDeleteRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The host_id of the host"
        }
      },
      "title": "Delete BatchDeleteRequest",
      "required": [
        "hostId"
      ]
    },
    "v2BindObject": {
      "type": "object",
      "properties": {
        "resourceType": {
          "$ref": "#/definitions/v2TagBindResourceType",
          "title": "the resource type of the bind object"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ResourceObject"
          },
          "title": "the resources of the resource type"
        }
      },
      "title": "Bind object resource",
      "required": [
        "resourceType",
        "resources"
      ]
    },
    "v2BindResourceRequest": {
      "type": "object",
      "properties": {
        "resourceType": {
          "$ref": "#/definitions/v2TagBindResourceType",
          "title": "the resource type of the bind object"
        },
        "resourceId": {
          "type": "string",
          "title": "the resource id of the resource type"
        },
        "tagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the tag ids to be bound"
        }
      },
      "title": "BindResource Request",
      "required": [
        "resourceType",
        "resourceId"
      ]
    },
    "v2BindResourceResponse": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tagv2Tag"
          },
          "title": "the tags bound with the bind object"
        }
      },
      "title": "BindResource Response"
    },
    "v2BindTagRequest": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "title": "the tag id of the tag"
        },
        "bindObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BindObject"
          },
          "title": "the bind objects to be bound"
        }
      },
      "title": "BindTag Request",
      "required": [
        "tagId"
      ]
    },
    "v2BindTagResponse": {
      "type": "object",
      "properties": {
        "tag": {
          "$ref": "#/definitions/v2TagWithBindObject",
          "title": "the tag resource with bound objects"
        }
      },
      "title": "BindTag Response"
    },
    "v2CategoryMetricDetail": {
      "type": "object",
      "properties": {
        "class": {
          "type": "string",
          "title": "Level 1 classification"
        },
        "group": {
          "type": "string",
          "title": "Level 2 grouping"
        },
        "type": {
          "type": "string",
          "title": "Level 3 type"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "title": "Display order of charts"
        },
        "displayName": {
          "type": "string",
          "title": "Display name of the metric"
        },
        "name": {
          "type": "string",
          "title": "Metric Name"
        },
        "description": {
          "type": "string",
          "title": "Description of the metric"
        },
        "metric": {
          "$ref": "#/definitions/v2MetricWithExpressions",
          "title": "Metric with its expressions"
        }
      },
      "title": "CategoryMetricDetail represents the details of a metric category"
    },
    "v2ChangePasswordRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "The id of the user"
        },
        "oldPassword": {
          "type": "string",
          "title": "User old password"
        },
        "newPassword": {
          "type": "string",
          "title": "User new password"
        }
      },
      "title": "ChangePasswordRequest Request",
      "required": [
        "userId",
        "newPassword"
      ]
    },
    "v2CheckSupportResponse": {
      "type": "object",
      "properties": {
        "isSupport": {
          "type": "boolean",
          "title": "Is support sql plan binding"
        }
      },
      "title": "Response of checking whether cluster support sql plan binding"
    },
    "v2ClassEnumData": {
      "type": "string",
      "enum": [
        "unspecified",
        "cluster",
        "host",
        "overview"
      ],
      "default": "unspecified",
      "description": "- unspecified: Unspecified\n - cluster: Cluster metrics\n - host: Host metrics\n - overview: Overview metrics",
      "title": "Data of ClassEnum"
    },
    "v2Cluster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The cluster ID"
        },
        "name": {
          "type": "string",
          "title": "The cluster name"
        }
      },
      "title": "Cluster represents a cluster basic info"
    },
    "v2ClusterBRStatusEnumData": {
      "type": "string",
      "enum": [
        "running",
        "finished",
        "abnormal",
        "stopped"
      ],
      "default": "running",
      "description": "- running: Running\n - finished: Finished\n - abnormal: Abnormal\n - stopped: Stopped",
      "title": "Data of StatusEnum"
    },
    "v2ClusterBRTask": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "The br task ID"
        },
        "type": {
          "$ref": "#/definitions/v2ClusterBRTypeEnumData",
          "title": "Type of the br task"
        },
        "triggerType": {
          "$ref": "#/definitions/v2ClusterBRTriggerTypeEnumData",
          "title": "Trigger type of the br task"
        },
        "name": {
          "type": "string",
          "title": "Name of the br task"
        },
        "status": {
          "$ref": "#/definitions/v2ClusterBRStatusEnumData",
          "title": "Status of the br task"
        },
        "restoredTs": {
          "type": "string",
          "title": "Restored ts"
        },
        "startTime": {
          "type": "string",
          "title": "Start time"
        },
        "endTime": {
          "type": "string",
          "title": "End time"
        },
        "clusterId": {
          "type": "string",
          "title": "The cluster ID"
        },
        "clusterName": {
          "type": "string",
          "title": "The cluster name"
        },
        "destination": {
          "type": "string",
          "title": "Destination of the br task"
        },
        "size": {
          "type": "string",
          "title": "Size of the br task, 10TB/100GB"
        },
        "sizeByte": {
          "type": "string",
          "format": "int64",
          "title": "Size of the br task in byte"
        },
        "errorMessage": {
          "type": "string",
          "title": "Error message"
        },
        "policyId": {
          "type": "string",
          "title": "Policy ID of the br task"
        },
        "policyName": {
          "type": "string",
          "title": "Policy name of the br task"
        },
        "log": {
          "type": "string",
          "title": "Log"
        },
        "accessKeyId": {
          "type": "string",
          "title": "AccessKeyID"
        },
        "secretAccessKey": {
          "type": "string",
          "title": "SecretAccessKey"
        },
        "rateLimit": {
          "type": "integer",
          "format": "int32",
          "title": "RateLimit"
        },
        "concurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Concurrency"
        },
        "logFile": {
          "type": "string",
          "title": "LogFile"
        },
        "expireTime": {
          "type": "string",
          "title": "ExpireTime"
        }
      },
      "title": "ClusterBRTask represents a br task"
    },
    "v2ClusterBRTriggerTypeEnumData": {
      "type": "string",
      "enum": [
        "automatic",
        "manual"
      ],
      "default": "automatic",
      "description": "- automatic: automatic\n - manual: manual",
      "title": "Data of TriggerTypeEnum"
    },
    "v2ClusterBRTypeEnumData": {
      "type": "string",
      "enum": [
        "full_backup",
        "log_backup",
        "restore_by_file",
        "restore_by_time",
        "all_backup",
        "all_restore"
      ],
      "default": "full_backup",
      "description": "- full_backup: Full backup\n - log_backup: Log backup\n - restore_by_file: Restore by file\n - restore_by_time: Restore by time\n - all_backup: All backup\n - all_restore: All restore",
      "title": "Data of TypeEnum"
    },
    "v2ClusterBackupPolicy": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "title": "The policy ID"
        },
        "name": {
          "type": "string",
          "title": "The policy name"
        },
        "logBackup": {
          "type": "boolean",
          "title": "LogBackup means whether to backup log"
        },
        "destination": {
          "type": "string",
          "title": "Destination of the backup"
        },
        "accessKeyId": {
          "type": "string",
          "title": "AccessKeyID"
        },
        "secretAccessKey": {
          "type": "string",
          "title": "SecretAccessKey"
        },
        "rateLimit": {
          "type": "integer",
          "format": "int32",
          "title": "RateLimit"
        },
        "concurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Concurrency"
        },
        "logFile": {
          "type": "string",
          "title": "LogFile"
        },
        "cycle": {
          "$ref": "#/definitions/v2BackupCycleEnumData",
          "title": "Cycle of backup"
        },
        "frequency": {
          "type": "string",
          "title": "Frequency: week:0~6 for Sunday To Saturday, month:1~31 for Date.example:1,2,3,4,5,6,7"
        },
        "time": {
          "type": "string",
          "title": "Time"
        },
        "retention": {
          "type": "integer",
          "format": "int32",
          "title": "Retention"
        },
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BasicClusterInfo"
          },
          "title": "Clusters"
        },
        "lastBackupTime": {
          "type": "string",
          "title": "LastBackupTime"
        },
        "size": {
          "type": "string",
          "title": "Size"
        },
        "sizeByte": {
          "type": "string",
          "format": "int64",
          "title": "SizeByte"
        },
        "lastLogBackupTime": {
          "type": "string",
          "title": "LastLogBackupTime"
        },
        "logBackupDelay": {
          "type": "string",
          "title": "LogBackupDelay"
        }
      },
      "title": "ClusterBackupPolicy represents a backup policy and backup status",
      "required": [
        "name",
        "logBackup",
        "destination",
        "cycle",
        "frequency",
        "time",
        "retention"
      ]
    },
    "v2ClusterMetricData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "Response Status (e.g., \"success\", \"error\")"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ExprQueryData"
          },
          "title": "Response Data containing the queried metrics"
        }
      },
      "title": "ClusterMetricData represents the response for querying cluster metric data"
    },
    "v2ClusterMetricInstance": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "Target type (e.g., tikv, tidb, host)"
        },
        "instanceList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of instances for the specified metric"
        }
      },
      "title": "QueryClusterMetricInstanceResponse represents the response for querying cluster metric instances"
    },
    "v2ClusterProcess": {
      "type": "object",
      "properties": {
        "instance": {
          "type": "string",
          "title": "TiDB instance identifier running this process"
        },
        "id": {
          "type": "string",
          "title": "Unique process ID within the cluster"
        },
        "user": {
          "type": "string",
          "title": "Username that started the process"
        },
        "host": {
          "type": "string",
          "title": "Client host information"
        },
        "db": {
          "type": "string",
          "title": "Database being accessed by the process"
        },
        "command": {
          "type": "string",
          "enum": [
            "Sleep",
            "Quit",
            "Init DB",
            "Query",
            "Field List",
            "Create DB",
            "Drop DB",
            "Refresh",
            "Shutdown",
            "Statistics",
            "Processlist",
            "Connect",
            "Kill",
            "Debug",
            "Ping",
            "Time",
            "Delayed Insert",
            "Change User",
            "Binlog Dump",
            "Table Dump",
            "Connect out",
            "Register Slave",
            "Prepare",
            "Execute",
            "Long Data",
            "Close stmt",
            "Reset stmt",
            "Set option",
            "Fetch",
            "Daemon",
            "Reset connect"
          ],
          "title": "Current command being executed (e.g., \"Query\", \"Sleep\")"
        },
        "time": {
          "type": "string",
          "format": "int64",
          "title": "Time in seconds that the process has been running"
        },
        "state": {
          "type": "string",
          "title": "Current state of the process"
        },
        "info": {
          "type": "string",
          "title": "SQL statement or other information about the process"
        },
        "digest": {
          "type": "string",
          "title": "Query digest for identifying similar queries"
        },
        "mem": {
          "type": "string",
          "title": "Memory usage of the process"
        },
        "disk": {
          "type": "string",
          "title": "Disk usage of the process"
        },
        "txnStart": {
          "type": "string",
          "title": "Transaction start timestamp"
        },
        "resourceGroup": {
          "type": "string",
          "title": "Resource group assigned to the process"
        },
        "sessionAlias": {
          "type": "string",
          "title": "Session alias"
        },
        "rowsAffected": {
          "type": "string",
          "format": "int64",
          "title": "Rows affected"
        },
        "tidbCpu": {
          "type": "string",
          "format": "int64",
          "title": "tidb cpu"
        },
        "tikvCpu": {
          "type": "string",
          "format": "int64",
          "title": "tikv cpu"
        }
      },
      "title": "ClusterProcess represents a single process in the cluster"
    },
    "v2ClusterWithBRAlert": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string",
          "title": "Cluster ID"
        },
        "clusterName": {
          "type": "string",
          "title": "Cluster Name"
        },
        "alertCount": {
          "type": "string",
          "format": "int64",
          "title": "Alert count"
        }
      },
      "title": "ClusterWithBRAlert represents a cluster with BR alert"
    },
    "v2ClusterWithBRSize": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string",
          "title": "Cluster ID"
        },
        "clusterName": {
          "type": "string",
          "title": "Cluster Name"
        },
        "totalSizeByte": {
          "type": "string",
          "format": "int64",
          "title": "total size in byte"
        },
        "totalSize": {
          "type": "string",
          "title": "Total size with unit, e.g. 10TB, other form of TotalSizeByte"
        }
      },
      "title": "ClusterWithBRSize represents a cluster with BR size"
    },
    "v2ClusterWithoutBRPolicy": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string",
          "title": "Cluster ID"
        },
        "clusterName": {
          "type": "string",
          "title": "Cluster Name"
        },
        "lastBackupTime": {
          "type": "string",
          "title": "Last backup time"
        },
        "sizeByte": {
          "type": "string",
          "format": "int64",
          "title": "Backup size in byte"
        }
      },
      "title": "ClusterWithoutBRPolicy represents a cluster without BR policy"
    },
    "v2ConfirmResponse": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "task_id"
        }
      },
      "title": "ConfirmResponse",
      "required": [
        "taskId"
      ]
    },
    "v2CreateApiKeyRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "The description of the apiKey"
        }
      },
      "title": "CreateApiKey Request",
      "required": [
        "description"
      ]
    },
    "v2CreateHost": {
      "type": "object",
      "properties": {
        "ips": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ips"
        },
        "sshPort": {
          "type": "integer",
          "format": "int32",
          "title": "The SSHPort of the Host"
        },
        "credentialId": {
          "type": "string",
          "title": "The credential_id of the Host"
        },
        "locationId": {
          "type": "string",
          "title": "The locationId of the Host"
        },
        "tagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tagIds of the Host"
        },
        "comment": {
          "type": "string",
          "title": "The comment of the Host"
        }
      },
      "title": "CreateHost"
    },
    "v2Credential": {
      "type": "object",
      "properties": {
        "credentialId": {
          "type": "string",
          "title": "the credential id of the credential"
        },
        "userName": {
          "type": "string",
          "title": "the user name of the credential"
        },
        "credentialType": {
          "$ref": "#/definitions/v2CredentialType",
          "title": "the credential type of the credential"
        },
        "validateType": {
          "$ref": "#/definitions/v2CredentialValidateType",
          "title": "the validate type of the credential"
        },
        "credentialName": {
          "type": "string",
          "title": "the credential name of the credential"
        },
        "description": {
          "type": "string",
          "title": "the description of the credential"
        },
        "hostCredential": {
          "$ref": "#/definitions/v2HostCredentialObject",
          "title": "the host credential object"
        },
        "tidbCredential": {
          "$ref": "#/definitions/v2TiDBCredentialObject",
          "title": "the tidb cluster credential object"
        }
      },
      "title": "Credential basic resource",
      "required": [
        "userName",
        "credentialType",
        "validateType"
      ]
    },
    "v2CredentialType": {
      "type": "string",
      "enum": [
        "CREDENTIAL_TYPE_UNSPECIFIED",
        "HOST",
        "TIDB"
      ],
      "default": "CREDENTIAL_TYPE_UNSPECIFIED",
      "description": "- CREDENTIAL_TYPE_UNSPECIFIED: resource type unspecified\n - HOST: credential type host\n - TIDB: credential type tidb",
      "title": "define credential type"
    },
    "v2CredentialValidateType": {
      "type": "string",
      "enum": [
        "CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED",
        "PASSWORD",
        "RSAKEY"
      ],
      "default": "CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED",
      "description": "- CREDENTIAL_VALIDATE_TYPE_UNSPECIFIED: validate type unspecified\n - PASSWORD: validate by password\n - RSAKEY: validate by rsa key",
      "title": "define validate type of credential"
    },
    "v2CycleEnumData": {
      "type": "string",
      "enum": [
        "week",
        "month"
      ],
      "default": "week",
      "description": "- week: \nWeek\n - month: \nMonth",
      "title": "Data of CycleEnum"
    },
    "v2DetectClusterResponse": {
      "type": "object",
      "properties": {
        "exist": {
          "type": "boolean",
          "title": "Whether the cluster exist"
        }
      },
      "title": "DetectClusterResponse represents the response to detect the if the cluster exist"
    },
    "v2DeviceCode": {
      "type": "object",
      "properties": {
        "deviceCode": {
          "type": "string",
          "title": "Device code, separated by comma"
        }
      },
      "title": "DeviceCode"
    },
    "v2Disk": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "host resource\nThe Name of the Host Disk"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "The Size of the Host Disk"
        },
        "usedSpace": {
          "type": "integer",
          "format": "int32",
          "title": "The Used of the Host Disk"
        },
        "availableSpace": {
          "type": "integer",
          "format": "int32",
          "title": "The Avail of the Host Disk"
        },
        "mountingDir": {
          "type": "string",
          "title": "The Mounted of the Host Disk"
        },
        "diskType": {
          "type": "string",
          "enum": [
            "HDD",
            "SSD"
          ],
          "title": "disk type (e.g., \"HDD\", \"SSD\")"
        }
      },
      "title": "Disk"
    },
    "v2DownloadHostTemplateResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "title": "data"
        }
      },
      "title": "DownloadHostTemplateResponse"
    },
    "v2DownloadListHostResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "title": "data"
        }
      },
      "title": "DownloadListHostResponse"
    },
    "v2DownloadRSAKeyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "title": "the data of file"
        }
      },
      "title": "DownLoadRSAKey Response"
    },
    "v2ErrorDetail": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "The  error detail type"
        },
        "locale": {
          "type": "string",
          "title": "the languages used in i18n"
        },
        "message": {
          "type": "string",
          "title": "The  i18n message of the error"
        }
      },
      "title": "ErrorDetail"
    },
    "v2ExprQueryData": {
      "type": "object",
      "properties": {
        "expr": {
          "type": "string",
          "title": "The expression used in the query"
        },
        "legend": {
          "type": "string",
          "title": "The legend associated with the expression"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2QueryResult"
          },
          "title": "The results of the query"
        }
      },
      "title": "ExprQueryData represents the data for an expression query"
    },
    "v2ExpressionWithLegend": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Expression name"
        },
        "promql": {
          "type": "string",
          "title": "PromQL expression"
        },
        "promMetric": {
          "type": "string",
          "title": "Prometheus metric name"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of labels associated with the expression"
        },
        "type": {
          "type": "string",
          "title": "Type of the expression"
        },
        "legend": {
          "type": "string",
          "title": "Legend name for the expression"
        },
        "minTidbVersion": {
          "type": "string",
          "title": "Minimum supported TiDB version"
        },
        "maxTidbVersion": {
          "type": "string",
          "title": "Maximum supported TiDB version"
        }
      },
      "title": "ExpressionWithLegend represents an expression with its legend"
    },
    "v2GenerateRSAKeyRequest": {
      "type": "object",
      "title": "GenerateRSAKey Request"
    },
    "v2GenerateRSAKeyResponse": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "title": "the public key of the rsa key"
        },
        "privateKey": {
          "type": "string",
          "title": "the private key of the rsa key"
        }
      },
      "title": "GenerateRSAKey response"
    },
    "v2GetTagWithBindingsResponse": {
      "type": "object",
      "properties": {
        "tag": {
          "$ref": "#/definitions/v2TagWithBindObject",
          "title": "tag info"
        }
      },
      "title": "GetTagWithBindings Response"
    },
    "v2GroupEnumData": {
      "type": "string",
      "enum": [
        "unspecified",
        "overview",
        "basic",
        "advanced",
        "resource",
        "performance",
        "process"
      ],
      "default": "unspecified",
      "description": "- unspecified: Unspecified group\n - overview: Overview group\n - basic: Basic group\n - advanced: Advanced group\n - resource: Resource group\n - performance: Performance group\n - process: Process group",
      "title": "Data of GroupEnum"
    },
    "v2Host": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "title": "The host_id of the Host"
        },
        "ip": {
          "type": "string",
          "title": "The ip of the Host"
        },
        "hostName": {
          "type": "string",
          "title": "The host_name of the Host"
        },
        "sshPort": {
          "type": "integer",
          "format": "int32",
          "title": "The ssh_port of the Host"
        },
        "status": {
          "type": "string",
          "enum": [
            "initializing",
            "deleting",
            "deleted",
            "used",
            "idle"
          ],
          "title": "host Status (e.g., \"initializing\", \"used\")"
        },
        "connectionStatus": {
          "type": "string",
          "enum": [
            "online",
            "offline"
          ],
          "title": "host connection Status (e.g., \"online\", \"offline\")"
        },
        "checkStatus": {
          "type": "string",
          "enum": [
            "checking",
            "failed",
            "warning",
            "succeeded"
          ],
          "title": "host check (e.g., \"checking\", \"failed\")"
        },
        "credentialId": {
          "type": "string",
          "title": "The credential_id of the Host"
        },
        "reportId": {
          "type": "string",
          "title": "The report_id of the Host"
        },
        "osName": {
          "type": "string",
          "title": "os_name"
        },
        "osVendor": {
          "type": "string",
          "title": "os_vendor"
        },
        "osVersion": {
          "type": "string",
          "title": "os_version"
        },
        "osRelease": {
          "type": "string",
          "title": "os_release"
        },
        "osArchitecture": {
          "type": "string",
          "title": "os_architecture"
        },
        "cpuVendor": {
          "type": "string",
          "title": "cpu_vendor"
        },
        "cpuModel": {
          "type": "string",
          "title": "cpu_model"
        },
        "cpuSpeed": {
          "type": "integer",
          "format": "int32",
          "title": "cpu_speed"
        },
        "cpuCache": {
          "type": "integer",
          "format": "int32",
          "title": "cpu_cache"
        },
        "cpus": {
          "type": "integer",
          "format": "int32",
          "title": "cpus"
        },
        "cpuThreads": {
          "type": "integer",
          "format": "int32",
          "title": "cpu_threads"
        },
        "cpuGovernor": {
          "type": "string",
          "title": "cpu_governor"
        },
        "cpuArch": {
          "type": "string",
          "title": "cpu_arch"
        },
        "memoryType": {
          "type": "string",
          "title": "memory_type"
        },
        "memorySpeed": {
          "type": "integer",
          "format": "int32",
          "title": "memory_speed"
        },
        "memorySize": {
          "type": "integer",
          "format": "int32",
          "title": "memory_size"
        },
        "memorySwap": {
          "type": "integer",
          "format": "int32",
          "title": "memory_swap"
        },
        "cpuNumaNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The CpuNumaNodes of the Host"
        },
        "storageTotalSize": {
          "type": "integer",
          "format": "int32",
          "title": "The Storage of the Host"
        },
        "storageAvailable": {
          "type": "integer",
          "format": "int32",
          "title": "storage_available"
        },
        "storageUsed": {
          "type": "integer",
          "format": "int32",
          "title": "storage_used"
        },
        "diskType": {
          "type": "string",
          "title": "The DiskType of the Host"
        },
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2AssociatedClusters"
          },
          "title": "The Clusters of the Host"
        },
        "nodeExporterPort": {
          "type": "integer",
          "format": "int32",
          "title": "Other info\nThe node_exporter_port of the Host"
        },
        "tiupIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tiup_ids of the Host"
        },
        "hostType": {
          "type": "string",
          "enum": [
            "VM",
            "PM"
          ],
          "title": "host Type (e.g., \"VM\", \"PM\")"
        },
        "comment": {
          "type": "string",
          "title": "The HostComment_Id of the Host"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Tags"
          },
          "title": "The Tag of the Host"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "title": "created_time"
        },
        "updatedTime": {
          "type": "string",
          "format": "date-time",
          "title": "updated_time"
        },
        "credential": {
          "$ref": "#/definitions/v2Credential",
          "title": "credential"
        },
        "locationMappings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2LocationMappings"
          },
          "title": "The Status of the Host\nlocation_mappings"
        },
        "memoryUnit": {
          "type": "string",
          "title": "memory_unit"
        },
        "storageUnit": {
          "type": "string",
          "title": "storage_unit"
        },
        "locationId": {
          "type": "string",
          "title": "location_id"
        },
        "cpuCores": {
          "type": "integer",
          "format": "int32",
          "title": "cpu_cores"
        }
      },
      "title": "Hosts resource",
      "required": [
        "hostId"
      ]
    },
    "v2HostCheckResponse": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "title": "task_id"
        },
        "taskId": {
          "type": "string",
          "title": "task_id"
        },
        "reportId": {
          "type": "string",
          "title": "importId"
        }
      },
      "title": "HostCheckResponse",
      "required": [
        "hostId",
        "taskId",
        "reportId"
      ]
    },
    "v2HostCreateResponse": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "task_id"
        }
      },
      "title": "HostCreate Response"
    },
    "v2HostCredentialObject": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "title": "the password of the user"
        },
        "publicKey": {
          "type": "string",
          "title": "the public key of the user"
        },
        "privateKey": {
          "type": "string",
          "title": "the private key of the user"
        },
        "hostIps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the list of host ips bound with current credential"
        }
      },
      "title": "Host credential object"
    },
    "v2HostDiskResponse": {
      "type": "object",
      "properties": {
        "disk": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Disk"
          },
          "title": "Disk"
        }
      },
      "title": "Disk Response"
    },
    "v2HostFixResponse": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "title": "task_id"
        },
        "taskId": {
          "type": "string",
          "title": "task_id"
        },
        "reportId": {
          "type": "string",
          "title": "importId"
        }
      },
      "title": "HostFixResponse",
      "required": [
        "hostId",
        "taskId",
        "reportId"
      ]
    },
    "v2HostMetricData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "Response Status (e.g., \"success\", \"error\")"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ExprQueryData"
          },
          "title": "Response Data containing the queried metrics"
        }
      },
      "title": "HostMetricData represents the response for querying cluster metric data"
    },
    "v2HostServiceUpdateHostBody": {
      "type": "object",
      "properties": {
        "host": {
          "$ref": "#/definitions/hostv2UpdateHost",
          "title": "host resource"
        }
      },
      "title": "Create Request"
    },
    "v2HostTask": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "importId"
        },
        "hostId": {
          "type": "string",
          "title": "host_id"
        },
        "reportId": {
          "type": "string",
          "title": "report_id"
        },
        "ip": {
          "type": "string",
          "title": "ip"
        },
        "userName": {
          "type": "string",
          "title": "user_name"
        },
        "sshPort": {
          "type": "integer",
          "format": "int32",
          "title": "ssh_port"
        },
        "status": {
          "type": "string",
          "enum": [
            "init",
            "existed",
            "succeeded",
            "failed"
          ],
          "title": "create task state (e.g., \"init\", \"existed\")"
        },
        "tags": {
          "type": "string",
          "title": "tags"
        },
        "locationId": {
          "type": "string",
          "title": "location_id"
        },
        "credentialId": {
          "type": "string",
          "title": "credential_id"
        },
        "hostName": {
          "type": "string",
          "title": "host_name"
        },
        "tagsList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Tags"
          },
          "title": "tags"
        },
        "locationMappings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2LocationMappings"
          },
          "title": "location_mappings"
        },
        "credential": {
          "$ref": "#/definitions/v2Credential",
          "title": "Credential"
        }
      },
      "title": "HostTask",
      "required": [
        "taskId",
        "hostId",
        "ip",
        "sshPort"
      ]
    },
    "v2HostTiDBProcessesResponse": {
      "type": "object",
      "properties": {
        "tiDBProcesses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2TiDBProcesses"
          },
          "title": "tiDBProcesses"
        }
      },
      "title": "HostTiDBProcessesResponse Response"
    },
    "v2ImportRequest": {
      "type": "object",
      "properties": {
        "hostData": {
          "type": "string",
          "format": "binary",
          "description": "Upload a csv form data to host.",
          "title": "host_data"
        },
        "fileName": {
          "type": "string",
          "title": "file_name"
        },
        "credentialId": {
          "type": "string",
          "title": "The credential_id of the Import"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The header of the license file"
        }
      },
      "title": "Import Request",
      "required": [
        "hostData",
        "headers"
      ]
    },
    "v2ImportTaskResponse": {
      "type": "object",
      "properties": {
        "task": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2HostTask"
          },
          "title": "List of users"
        },
        "taskId": {
          "type": "string",
          "title": "importId"
        }
      },
      "title": "ImportTaskResponse",
      "required": [
        "task",
        "taskId"
      ]
    },
    "v2LicenseStatusEnumData": {
      "type": "string",
      "enum": [
        "active",
        "expired",
        "expiring",
        "invalid",
        "revoked"
      ],
      "default": "active",
      "description": "- active: active\n - expired: inactive\n - expiring: expired\n - invalid: invalid\n - revoked: revoked",
      "title": "Data of LicenseStatusEnum"
    },
    "v2LicenseTypeEnumData": {
      "type": "string",
      "enum": [
        "free",
        "ultimate"
      ],
      "default": "free",
      "description": "- free: free\n - ultimate: ultimate",
      "title": "Data of TriggerTypeEnum"
    },
    "v2ListApiKeysResponse": {
      "type": "object",
      "properties": {
        "apikeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ApiKey"
          },
          "title": "List of users"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListApiKeyRequest"
    },
    "v2ListBRTasksResponse": {
      "type": "object",
      "properties": {
        "brTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BRTask"
          },
          "title": "List of br tasks"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListBRTasksResponse represents the response to list br tasks"
    },
    "v2ListBackupPoliciesResponse": {
      "type": "object",
      "properties": {
        "backupPolicies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BackupPolicy"
          },
          "title": "List of br policies"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListBRPoliciesResponse represents the response to get br policies"
    },
    "v2ListClusterBRTasksResponse": {
      "type": "object",
      "properties": {
        "brTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ClusterBRTask"
          },
          "title": "List of br tasks"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListClusterBRTasksResponse represents the response to list br tasks for a specific cluster"
    },
    "v2ListClusterBackupRecordsResponse": {
      "type": "object",
      "properties": {
        "backupRecords": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ClusterBRTask"
          },
          "title": "List of valid full backup records"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListClusterBackupRecordsResponse represents the response to list valid full backup records for a specific cluster"
    },
    "v2ListCredentialsResponse": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Credential"
          },
          "title": "list of credentials"
        },
        "nextPageToken": {
          "type": "string",
          "title": "next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "total size"
        }
      },
      "title": "ListCredentials Response"
    },
    "v2ListHostsResponse": {
      "type": "object",
      "properties": {
        "hosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Host"
          },
          "title": "List of users"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListResponse",
      "required": [
        "hosts",
        "nextPageToken",
        "totalSize"
      ]
    },
    "v2ListLocationsResponse": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Locations"
          },
          "title": "list of Locations"
        },
        "nextPageToken": {
          "type": "string",
          "title": "next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "total size"
        }
      },
      "title": "ListLocations Response"
    },
    "v2ListRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Role"
          },
          "title": "List of users"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "ListRolesResponse"
    },
    "v2ListTagKeysResponse": {
      "type": "object",
      "properties": {
        "tagKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of tag keys"
        },
        "nextPageToken": {
          "type": "string",
          "title": "next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "total size"
        }
      },
      "title": "ListTagKeys Response"
    },
    "v2ListTagsByResourceTypeResponse": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tagv2Tag"
          },
          "title": "list of tags"
        },
        "nextPageToken": {
          "type": "string",
          "title": "next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "total size"
        }
      },
      "title": "ListTagsByResourceType Response"
    },
    "v2ListTagsResponse": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tagv2Tag"
          },
          "title": "list of tags"
        },
        "nextPageToken": {
          "type": "string",
          "title": "next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "total size"
        }
      },
      "title": "ListTags Response"
    },
    "v2ListTagsWithBindingsResponse": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2TagWithBindObject"
          },
          "title": "list of tags"
        },
        "nextPageToken": {
          "type": "string",
          "title": "next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "total size"
        }
      },
      "title": "ListTagsWithBindings Response"
    },
    "v2ListTiupsResponse": {
      "type": "object",
      "properties": {
        "tiups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Tiups"
          },
          "title": "list of tiups"
        },
        "nextPageToken": {
          "type": "string",
          "title": "next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "total size"
        }
      },
      "title": "ListTiups Response"
    },
    "v2ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2User"
          },
          "description": "The list of users retrieved."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token for the next page of results."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of users that match the filter criteria."
        }
      },
      "description": "ListUsersResponse defines the response containing a list of users and pagination information."
    },
    "v2LocationMappings": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string",
          "title": "the Location id of the Location"
        },
        "parentId": {
          "type": "string",
          "title": "the Location key of the Location"
        },
        "locationKey": {
          "type": "string",
          "title": "the Location value of the Location"
        },
        "locationValue": {
          "type": "string",
          "title": "the Location value of the Location"
        }
      },
      "title": "LocationMappings",
      "required": [
        "locationKey",
        "locationValue"
      ]
    },
    "v2Locations": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string",
          "title": "the Location id of the Location"
        },
        "parentId": {
          "type": "string",
          "title": "the Location key of the Location"
        },
        "locationKey": {
          "type": "string",
          "enum": [
            "zone",
            "dc",
            "rack"
          ],
          "title": "location key  (e.g., \"zone\", \"dc\")"
        },
        "locationValue": {
          "type": "string",
          "title": "the Location value of the Location"
        }
      },
      "title": "Location basic resource"
    },
    "v2LoginRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "The id of the user"
        },
        "password": {
          "type": "string",
          "title": "The password of the user"
        }
      },
      "title": "Login Request",
      "required": [
        "userId"
      ]
    },
    "v2MetricWithExpressions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Metric name"
        },
        "unit": {
          "type": "string",
          "title": "Unit of the metric"
        },
        "description": {
          "type": "string",
          "title": "Description of the metric"
        },
        "minTidbVersion": {
          "type": "string",
          "title": "Minimum supported TiDB version"
        },
        "maxTidbVersion": {
          "type": "string",
          "title": "Maximum supported TiDB version"
        },
        "isBuiltin": {
          "type": "boolean",
          "title": "Whether it is a built-in metric"
        },
        "expressions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ExpressionWithLegend"
          },
          "title": "List of associated expressions"
        }
      },
      "title": "MetricWithExpressions represents a metric with its expressions"
    },
    "v2Metrics": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2CategoryMetricDetail"
          },
          "title": "List of metrics info"
        }
      },
      "title": "Metrics represents the list of metrics info"
    },
    "v2OverviewStatus": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of clusters' status"
        },
        "hosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of hosts' status"
        },
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of alerts' status"
        },
        "alertLevels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of alert levels' status"
        },
        "brTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of backup \u0026 restore tasks' status"
        },
        "sysTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of system tasks' status"
        },
        "otherTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2StatusCount"
          },
          "title": "List of other tasks' status"
        }
      },
      "title": "OverviewStatus represents the response for querying overview data"
    },
    "v2PreCheckBackupPolicyResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Cluster"
          },
          "title": "Clusters that already have backup policies"
        }
      },
      "title": "PreCheckBackupPolicyResponse represents the conflict clusters which already have backup policies"
    },
    "v2ProcessList": {
      "type": "object",
      "properties": {
        "clusterProcessList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ClusterProcess"
          },
          "title": "List of cluster processes containing detailed information about each process"
        },
        "isSupportKill": {
          "type": "boolean",
          "title": "Whether kill operation is supported by the cluster\nDepends on TiDB version and cluster configuration"
        },
        "totalProcessCount": {
          "type": "string",
          "format": "int64",
          "title": "Total number of processes in the cluster\nIncludes both active and sleeping processes"
        },
        "activeProcessCount": {
          "type": "string",
          "format": "int64",
          "title": "Number of active processes in the cluster\nExcludes processes in \"sleep\" state"
        }
      },
      "title": "ProcessList represents the response of process list query"
    },
    "v2QueryMetric": {
      "type": "object",
      "properties": {
        "instance": {
          "type": "string",
          "title": "Instance of the metric"
        },
        "sqlType": {
          "type": "string",
          "title": "SQL type of the metric"
        },
        "type": {
          "type": "string",
          "title": "Type of the metric"
        },
        "result": {
          "type": "string",
          "title": "Result of the metric"
        },
        "txnMode": {
          "type": "string",
          "title": "Transaction mode of the metric"
        },
        "job": {
          "type": "string",
          "title": "Job type of the metric"
        },
        "device": {
          "type": "string",
          "title": "Device type of the metric"
        },
        "fstype": {
          "type": "string",
          "title": "FSType of the metric"
        },
        "mountpoint": {
          "type": "string",
          "title": "MountPoint of the metric"
        },
        "module": {
          "type": "string",
          "title": "Module of the metric"
        },
        "kind": {
          "type": "string",
          "title": "Kind of the metric"
        },
        "ping": {
          "type": "string",
          "title": "Ping of the metric"
        }
      },
      "title": "QueryMetric represents the metric details in the query result"
    },
    "v2QueryResult": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/v2QueryMetric",
          "title": "Metric details"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/metricsv2Value"
          },
          "title": "Values associated with the metric"
        }
      },
      "title": "QueryResult represents the result of a query"
    },
    "v2ReportResponse": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "task_id"
        },
        "taskState": {
          "type": "string",
          "enum": [
            "init",
            "running",
            "success",
            "fail"
          ],
          "title": "check task state (e.g., \"init\", \"running\")"
        },
        "reports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/hostv2Report"
          },
          "title": "List of reports"
        }
      },
      "title": "ReportResponse",
      "required": [
        "taskId"
      ]
    },
    "v2ResetSecretKeyResponse": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string",
          "title": "The access key of the apiKey"
        },
        "secretKey": {
          "type": "string",
          "title": "The secret key of the apiKey"
        }
      },
      "title": "ResetSecretKey Request",
      "required": [
        "accessKey",
        "secretKey"
      ]
    },
    "v2ResourceGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Resource group name"
        },
        "ruPerSec": {
          "type": "string",
          "title": "RU per second"
        },
        "priority": {
          "type": "string",
          "title": "Priority"
        },
        "burstable": {
          "type": "string",
          "title": "Burstable"
        }
      },
      "title": "Resource group information"
    },
    "v2ResourceGroupList": {
      "type": "object",
      "properties": {
        "resourceGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ResourceGroup"
          },
          "title": "List of resource groups"
        }
      },
      "title": "Response message for GetResourceGroupList"
    },
    "v2ResourceObject": {
      "type": "object",
      "properties": {
        "resourceId": {
          "type": "string",
          "title": "the resource id of the resource object"
        },
        "resourceName": {
          "type": "string",
          "title": "the resource name of the resource object"
        }
      },
      "title": "Resource object",
      "required": [
        "resourceName"
      ]
    },
    "v2Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "The id of the role"
        },
        "roleName": {
          "type": "string",
          "title": "The name of the role"
        },
        "roleType": {
          "type": "number",
          "format": "double",
          "title": "The id of the role"
        },
        "roleTypeDesc": {
          "type": "string",
          "title": "The id of the role"
        },
        "detail": {
          "type": "string",
          "title": "The note of the role"
        },
        "note": {
          "type": "string",
          "title": "The note of the role"
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "title": "The create time of the role",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The update time of the role",
          "readOnly": true
        }
      },
      "title": "the role resource"
    },
    "v2SlowQueryAvailableAdvancedFilterInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Filter name"
        },
        "unit": {
          "type": "string",
          "title": "Filter unit"
        },
        "valueList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter value list"
        },
        "type": {
          "type": "string",
          "title": "Type"
        }
      },
      "title": "Response message for available filter info"
    },
    "v2SlowQueryAvailableAdvancedFilters": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of available fields"
        }
      },
      "title": "Response message for available filters"
    },
    "v2SlowQueryAvailableFields": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of available fields"
        }
      },
      "title": "Response message for available fields"
    },
    "v2SlowQueryDetail": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string",
          "title": "Digest"
        },
        "query": {
          "type": "string",
          "title": "Query"
        },
        "instance": {
          "type": "string",
          "title": "Instance"
        },
        "db": {
          "type": "string",
          "title": "Database"
        },
        "connection_id": {
          "type": "string",
          "title": "Connection ID"
        },
        "success": {
          "type": "integer",
          "format": "int32",
          "title": "Success"
        },
        "timestamp": {
          "type": "number",
          "format": "double",
          "title": "Finish time"
        },
        "query_time": {
          "type": "number",
          "format": "double",
          "title": "Latency"
        },
        "parse_time": {
          "type": "number",
          "format": "double",
          "title": "Parse time"
        },
        "compile_time": {
          "type": "number",
          "format": "double",
          "title": "Compile time"
        },
        "rewrite_time": {
          "type": "number",
          "format": "double",
          "title": "Rewrite time"
        },
        "preproc_subqueries_time": {
          "type": "number",
          "format": "double",
          "title": "Preprocessing subqueries time"
        },
        "optimize_time": {
          "type": "number",
          "format": "double",
          "title": "Optimize time"
        },
        "wait_ts": {
          "type": "number",
          "format": "double",
          "title": "Wait timestamp"
        },
        "cop_time": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor time"
        },
        "lock_keys_time": {
          "type": "number",
          "format": "double",
          "title": "Lock keys time"
        },
        "write_sql_response_total": {
          "type": "number",
          "format": "double",
          "title": "Write SQL response time"
        },
        "exec_retry_time": {
          "type": "number",
          "format": "double",
          "title": "Execution retry time"
        },
        "memory_max": {
          "type": "number",
          "format": "double",
          "title": "Max memory"
        },
        "disk_max": {
          "type": "number",
          "format": "double",
          "title": "Max disk"
        },
        "txn_start_ts": {
          "type": "string",
          "title": "Transaction start timestamp"
        },
        "prev_stmt": {
          "type": "string",
          "title": "Previous statement"
        },
        "plan": {
          "type": "string",
          "title": "Execution plan"
        },
        "binary_plan": {
          "type": "string",
          "title": "Binary execution plan"
        },
        "warnings": {
          "type": "string",
          "title": "Warnings"
        },
        "is_internal": {
          "type": "integer",
          "format": "int32",
          "title": "Is internal"
        },
        "index_names": {
          "type": "string",
          "title": "Index names"
        },
        "stats": {
          "type": "string",
          "title": "Stats"
        },
        "backoff_types": {
          "type": "string",
          "title": "Backoff types"
        },
        "prepared": {
          "type": "integer",
          "format": "int32",
          "title": "Prepared statement"
        },
        "plan_from_cache": {
          "type": "integer",
          "format": "int32",
          "title": "Plan from cache"
        },
        "plan_from_binding": {
          "type": "integer",
          "format": "int32",
          "title": "Plan from binding"
        },
        "user": {
          "type": "string",
          "title": "User"
        },
        "host": {
          "type": "string",
          "title": "Host"
        },
        "process_time": {
          "type": "number",
          "format": "double",
          "title": "Process time"
        },
        "wait_time": {
          "type": "number",
          "format": "double",
          "title": "Wait time"
        },
        "backoff_time": {
          "type": "number",
          "format": "double",
          "title": "Backoff time"
        },
        "get_commit_ts_time": {
          "type": "number",
          "format": "double",
          "title": "Get commit timestamp time"
        },
        "local_latch_wait_time": {
          "type": "number",
          "format": "double",
          "title": "Local latch wait time"
        },
        "resolve_lock_time": {
          "type": "number",
          "format": "double",
          "title": "Resolve lock time"
        },
        "prewrite_time": {
          "type": "number",
          "format": "double",
          "title": "Prewrite time"
        },
        "wait_prewrite_binlog_time": {
          "type": "number",
          "format": "double",
          "title": "Wait for prewrite binlog time"
        },
        "commit_time": {
          "type": "number",
          "format": "double",
          "title": "Commit time"
        },
        "commit_backoff_time": {
          "type": "number",
          "format": "double",
          "title": "Commit backoff time"
        },
        "cop_proc_avg": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor process average"
        },
        "cop_proc_p90": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor process P90"
        },
        "cop_proc_max": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor process max"
        },
        "cop_wait_avg": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor wait average"
        },
        "cop_wait_p90": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor wait P90"
        },
        "cop_wait_max": {
          "type": "number",
          "format": "double",
          "title": "Coprocessor wait max"
        },
        "write_keys": {
          "type": "number",
          "format": "double",
          "title": "Write keys"
        },
        "write_size": {
          "type": "number",
          "format": "double",
          "title": "Write size"
        },
        "prewrite_region": {
          "type": "number",
          "format": "double",
          "title": "Prewrite region"
        },
        "txn_retry": {
          "type": "number",
          "format": "double",
          "title": "Transaction retry"
        },
        "request_count": {
          "type": "number",
          "format": "double",
          "title": "Request count"
        },
        "process_keys": {
          "type": "number",
          "format": "double",
          "title": "Process keys"
        },
        "total_keys": {
          "type": "number",
          "format": "double",
          "title": "Total keys"
        },
        "cop_proc_addr": {
          "type": "string",
          "title": "Coprocessor address"
        },
        "cop_wait_addr": {
          "type": "string",
          "title": "Coprocessor wait address"
        },
        "rocksdb_delete_skipped_count": {
          "type": "number",
          "format": "double",
          "title": "RocksDB delete skipped count"
        },
        "rocksdb_key_skipped_count": {
          "type": "number",
          "format": "double",
          "title": "RocksDB key skipped count"
        },
        "rocksdb_block_cache_hit_count": {
          "type": "number",
          "format": "double",
          "title": "RocksDB block cache hit count"
        },
        "rocksdb_block_read_count": {
          "type": "number",
          "format": "double",
          "title": "RocksDB block read count"
        },
        "rocksdb_block_read_byte": {
          "type": "number",
          "format": "double",
          "title": "RocksDB block read byte"
        },
        "binary_plan_text": {
          "type": "string",
          "title": "Binary plan in plain text"
        },
        "session_alias": {
          "type": "string",
          "title": "Session alias"
        },
        "exec_retry_count": {
          "type": "number",
          "format": "double",
          "title": "Execution retry count"
        },
        "preproc_subqueries": {
          "type": "number",
          "format": "double",
          "title": "Preprocessing subqueries"
        },
        "kv_total": {
          "type": "number",
          "format": "double",
          "title": "KV total"
        },
        "pd_total": {
          "type": "number",
          "format": "double",
          "title": "PD total"
        },
        "backoff_total": {
          "type": "number",
          "format": "double",
          "title": "Backoff total"
        },
        "time_queued_by_rc": {
          "type": "number",
          "format": "double",
          "title": "Time queued by RC"
        },
        "tidb_cpu_time": {
          "type": "number",
          "format": "double",
          "title": "TiDB CPU time"
        },
        "tikv_cpu_time": {
          "type": "number",
          "format": "double",
          "title": "TiKV CPU time"
        },
        "backoff_detail": {
          "type": "string",
          "title": "Backoff detail"
        },
        "is_explicit_txn": {
          "type": "integer",
          "format": "int32",
          "title": "Is explicit transaction"
        },
        "plan_digest": {
          "type": "string",
          "title": "Plan digest"
        },
        "has_more_results": {
          "type": "integer",
          "format": "int32",
          "title": "Has more results"
        },
        "resource_group": {
          "type": "string",
          "title": "Resource group"
        },
        "request_unit_read": {
          "type": "number",
          "format": "double",
          "title": "Request unit read"
        },
        "request_unit_write": {
          "type": "number",
          "format": "double",
          "title": "Request unit write"
        },
        "result_rows": {
          "type": "number",
          "format": "double",
          "title": "Result rows"
        },
        "ru": {
          "type": "number",
          "format": "double",
          "title": "Resource unit"
        }
      },
      "title": "Model message representing a slow query log"
    },
    "v2SlowQueryDownloadResponse": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "title": "File name"
        },
        "fileContent": {
          "type": "string",
          "title": "File content"
        }
      },
      "title": "SlowQueryDownloadResponse represents the response for downloading slow query list"
    },
    "v2SlowQueryList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SlowQueryDetail"
          },
          "title": "List of slow sql models"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "Response message for querying slow log list"
    },
    "v2SqlLimit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID"
        },
        "resourceGroupName": {
          "type": "string",
          "title": "Resource group name"
        },
        "startTime": {
          "type": "string",
          "title": "Start time"
        },
        "endTime": {
          "type": "string",
          "title": "End time"
        },
        "watch": {
          "type": "string",
          "title": "Watch"
        },
        "watchText": {
          "type": "string",
          "title": "Watch text"
        },
        "source": {
          "type": "string",
          "title": "Source"
        },
        "action": {
          "type": "string",
          "enum": [
            "DRYRUN",
            "COOLDOWN",
            "KILL"
          ],
          "title": "Action"
        }
      },
      "title": "SQL limit model"
    },
    "v2SqlLimitList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SqlLimit"
          },
          "title": "List of SQL limit"
        }
      },
      "title": "Response message for getting SQL limit"
    },
    "v2SqlPlanBindingDetail": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "enabled",
            "using",
            "disabled",
            "deleted",
            "invalid",
            "rejected",
            "pending verify"
          ],
          "title": "SQL plan binding status"
        },
        "source": {
          "type": "string",
          "enum": [
            "manual",
            "history",
            "capture",
            "evolve"
          ],
          "title": "SQL plan binding source"
        },
        "digest": {
          "type": "string",
          "title": "sql digest"
        },
        "planDigest": {
          "type": "string",
          "title": "plan digest"
        }
      },
      "title": "Detail of sql plan binding"
    },
    "v2SqlPlanBindingList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SqlPlanBindingDetail"
          },
          "title": "List of sql plan binding"
        }
      },
      "title": "Response of get sql plan binding"
    },
    "v2SqlPlanList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2TopSqlDetail"
          },
          "title": "List of sql plan"
        }
      },
      "title": "Response message for getting sql plan"
    },
    "v2StatusCount": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "Targets status (e.g., \"healthy\", \"unhealthy\")"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "title": "The number of targets with this status"
        }
      },
      "title": "StatusCount represents the status of a target"
    },
    "v2StatusEnumData": {
      "type": "string",
      "enum": [
        "all",
        "running",
        "finished",
        "abnormal",
        "stopped"
      ],
      "default": "all",
      "description": "- all: All\n - running: Running\n - finished: Finished\n - abnormal: Abnormal\n - stopped: Stopped",
      "title": "Data of StatusEnum"
    },
    "v2TagBindResourceType": {
      "type": "string",
      "enum": [
        "TAG_BIND_RESOURCE_TYPE_UNSPECIFIED",
        "HOST",
        "TIUP",
        "CLUSTER"
      ],
      "default": "TAG_BIND_RESOURCE_TYPE_UNSPECIFIED",
      "description": "- TAG_BIND_RESOURCE_TYPE_UNSPECIFIED: resource type unspecified\n - HOST: resource type host\n - TIUP: resource type tiup\n - CLUSTER: resource type cluster",
      "title": "define tag bind resource type"
    },
    "v2TagWithBindObject": {
      "type": "object",
      "properties": {
        "tagInfo": {
          "$ref": "#/definitions/tagv2Tag",
          "title": "the tag basic info of the tag"
        },
        "bindObjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BindObject"
          },
          "title": "the bound objects of the tag"
        }
      },
      "title": "Tag resource with bound object"
    },
    "v2Tags": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "title": "the tag id of the tag"
        },
        "tagKey": {
          "type": "string",
          "title": "the tag key of the tag"
        },
        "tagValue": {
          "type": "string",
          "title": "the tag value of the tag"
        }
      },
      "title": "Tags",
      "required": [
        "tagValue"
      ]
    },
    "v2TiDBCredentialObject": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "title": "the password of the user"
        },
        "clusterId": {
          "type": "string",
          "title": "the cluster id of cluster bound with current credential"
        },
        "clusterName": {
          "type": "string",
          "title": "the cluster name of cluster bound with current credential"
        }
      },
      "title": "TiDB cluster credential object",
      "required": [
        "password"
      ]
    },
    "v2TiDBProcesses": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "title": "host Processes\nThe Uid of the Host Processes"
        },
        "pid": {
          "type": "integer",
          "format": "int32",
          "title": "The Pid of the Host Processes"
        },
        "ppid": {
          "type": "integer",
          "format": "int32",
          "title": "The Ppid of the Host Processes"
        },
        "startTime": {
          "type": "string",
          "title": "The stime of the Host Processes"
        },
        "runningTime": {
          "type": "string",
          "title": "The time of the Host Processes"
        },
        "cmd": {
          "type": "string",
          "title": "The cmd of the Host Processes"
        }
      },
      "title": "TiDBProcesses"
    },
    "v2TiupCredential": {
      "type": "object",
      "properties": {
        "credentialId": {
          "type": "string",
          "title": "the credentialId value of the Credential"
        },
        "credentialName": {
          "type": "string",
          "title": "the credentialName value of the Credential"
        },
        "credentialType": {
          "type": "string",
          "title": "the credentialType value of the Credential"
        },
        "userName": {
          "type": "string",
          "title": "the userName value of the Credential"
        }
      },
      "title": "TiupCredential"
    },
    "v2TiupHost": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "title": "The Host_Id of the Host"
        },
        "ip": {
          "type": "string",
          "title": "The IP of the Host"
        },
        "hostName": {
          "type": "string",
          "title": "The HostName of the Host"
        },
        "sshPort": {
          "type": "integer",
          "format": "int32",
          "title": "The SSHPort of the Host"
        },
        "credentialId": {
          "type": "string",
          "title": "The Credential_Id of the Host"
        },
        "osName": {
          "type": "string",
          "title": "os_name"
        },
        "osVersion": {
          "type": "string",
          "title": "os_version"
        },
        "osRelease": {
          "type": "string",
          "title": "os_release"
        },
        "osArchitecture": {
          "type": "string",
          "title": "os_architecture"
        },
        "hostType": {
          "type": "string",
          "enum": [
            "VM",
            "PM"
          ],
          "title": "host Type (e.g., \"VM\", \"PM\")"
        },
        "locationId": {
          "type": "string",
          "title": "location_id"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "title": "created_time"
        },
        "updatedTime": {
          "type": "string",
          "format": "date-time",
          "title": "updated_time"
        },
        "credential": {
          "$ref": "#/definitions/v2TiupCredential",
          "title": "credential"
        }
      },
      "title": "Host resource",
      "required": [
        "hostId"
      ]
    },
    "v2TiupTags": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "title": "the tag id of the tag"
        },
        "tagKey": {
          "type": "string",
          "title": "the tag key of the tag"
        },
        "tagValue": {
          "type": "string",
          "title": "the tag value of the tag"
        }
      },
      "title": "TiupTags",
      "required": [
        "tagValue"
      ]
    },
    "v2Tiups": {
      "type": "object",
      "properties": {
        "tiupId": {
          "type": "string",
          "title": "tiup_id"
        },
        "name": {
          "type": "string",
          "title": "name"
        },
        "tiupHome": {
          "type": "string",
          "title": "tiup_home"
        },
        "version": {
          "type": "string",
          "title": "version"
        },
        "credentialId": {
          "type": "string",
          "title": "credential_id"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2TiupTags"
          },
          "title": "The tags of the Host"
        },
        "description": {
          "type": "string",
          "title": "description"
        },
        "hostId": {
          "type": "string",
          "title": "host_id"
        },
        "host": {
          "$ref": "#/definitions/v2TiupHost",
          "title": "host"
        }
      },
      "title": "Tiups basic resource"
    },
    "v2TiupsClusters": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string",
          "title": "cluster_id"
        },
        "clusterName": {
          "type": "string",
          "title": "cluster_id"
        },
        "user": {
          "type": "string",
          "title": "user"
        },
        "version": {
          "type": "string",
          "title": "version"
        },
        "metaPath": {
          "type": "string",
          "title": "patch"
        },
        "privateKeyPath": {
          "type": "string",
          "title": "private_key"
        },
        "managed": {
          "type": "boolean",
          "title": "managed"
        }
      },
      "title": "TiupsClusters"
    },
    "v2TiupsClustersResponse": {
      "type": "object",
      "properties": {
        "tiupsClusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2TiupsClusters"
          },
          "title": "list of tiups"
        }
      },
      "title": "ListTiups Response"
    },
    "v2TiupsServiceUpdateTiupsBody": {
      "type": "object",
      "properties": {
        "tiups": {
          "$ref": "#/definitions/tiupv2UpdateTiups",
          "title": "the tiups resource"
        }
      },
      "title": "UpdateTiupsRequest Request"
    },
    "v2TopMetricConfig": {
      "type": "object",
      "properties": {
        "cacheFlushIntervalInMinutes": {
          "type": "integer",
          "format": "int32",
          "title": "overview cache flush interval in minute, 0 means no cache"
        }
      },
      "title": "TopMetricConfig represents the response for querying top metric config"
    },
    "v2TopMetricData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "Response Status (e.g., \"success\", \"error\")"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ExprQueryData"
          },
          "title": "Response Data containing the top queried metrics"
        }
      },
      "title": "TopMetricData represents the response for querying top metric data"
    },
    "v2TopSqlAvailableAdvancedFilterInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Filter name"
        },
        "unit": {
          "type": "string",
          "title": "Filter unit"
        },
        "valueList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter value list"
        },
        "type": {
          "type": "string",
          "title": "Type"
        }
      },
      "title": "Response message for available filter info"
    },
    "v2TopSqlAvailableAdvancedFilters": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of available fields"
        }
      },
      "title": "Response message for available filters"
    },
    "v2TopSqlAvailableFields": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of available fields"
        }
      },
      "title": "Response message for getting top sql available fields"
    },
    "v2TopSqlConfigs": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "title": "tidb_enable_stmt_summary"
        },
        "refreshInterval": {
          "type": "integer",
          "format": "int32",
          "title": "tidb_stmt_summary_refresh_interval"
        },
        "historySize": {
          "type": "integer",
          "format": "int32",
          "title": "tidb_stmt_summary_history_size"
        },
        "maxSize": {
          "type": "integer",
          "format": "int32",
          "title": "tidb_stmt_summary_max_stmt_count"
        },
        "internalQuery": {
          "type": "boolean",
          "title": "tidb_stmt_summary_internal_query"
        }
      },
      "title": "Response message for getting top sql configs"
    },
    "v2TopSqlDetail": {
      "type": "object",
      "properties": {
        "summary_begin_time": {
          "type": "number",
          "format": "double",
          "title": "AggBeginTime"
        },
        "summary_end_time": {
          "type": "number",
          "format": "double",
          "title": "AggEndTime"
        },
        "digest_text": {
          "type": "string",
          "title": "AggDigestText"
        },
        "digest": {
          "type": "string",
          "title": "AggDigest"
        },
        "exec_count": {
          "type": "number",
          "format": "double",
          "title": "AggExecCount"
        },
        "stmt_type": {
          "type": "string",
          "title": "AggStmtType"
        },
        "sum_errors": {
          "type": "number",
          "format": "double",
          "title": "AggSumErrors"
        },
        "sum_warnings": {
          "type": "number",
          "format": "double",
          "title": "AggSumWarnings"
        },
        "sum_latency": {
          "type": "number",
          "format": "double",
          "title": "AggSumLatency"
        },
        "max_latency": {
          "type": "number",
          "format": "double",
          "title": "AggMaxLatency"
        },
        "min_latency": {
          "type": "number",
          "format": "double",
          "title": "AggMinLatency"
        },
        "avg_latency": {
          "type": "number",
          "format": "double",
          "title": "AggAvgLatency"
        },
        "avg_parse_latency": {
          "type": "number",
          "format": "double",
          "title": "AggAvgParseLatency"
        },
        "max_parse_latency": {
          "type": "number",
          "format": "double",
          "title": "AggMaxParseLatency"
        },
        "avg_compile_latency": {
          "type": "number",
          "format": "double",
          "title": "AggAvgCompileLatency"
        },
        "max_compile_latency": {
          "type": "number",
          "format": "double",
          "title": "AggMaxCompileLatency"
        },
        "sum_cop_task_num": {
          "type": "number",
          "format": "double",
          "title": "AggSumCopTaskNum"
        },
        "avg_cop_process_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgCopProcessTime"
        },
        "max_cop_process_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxCopProcessTime"
        },
        "avg_cop_wait_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgCopWaitTime"
        },
        "max_cop_wait_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxCopWaitTime"
        },
        "avg_process_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgProcessTime"
        },
        "max_process_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxProcessTime"
        },
        "avg_wait_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgWaitTime"
        },
        "max_wait_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxWaitTime"
        },
        "avg_backoff_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgBackoffTime"
        },
        "max_backoff_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxBackoffTime"
        },
        "avg_total_keys": {
          "type": "number",
          "format": "double",
          "title": "AggAvgTotalKeys"
        },
        "max_total_keys": {
          "type": "number",
          "format": "double",
          "title": "AggMaxTotalKeys"
        },
        "avg_processed_keys": {
          "type": "number",
          "format": "double",
          "title": "AggAvgProcessedKeys"
        },
        "max_processed_keys": {
          "type": "number",
          "format": "double",
          "title": "AggMaxProcessedKeys"
        },
        "avg_prewrite_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgPrewriteTime"
        },
        "max_prewrite_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxPrewriteTime"
        },
        "avg_commit_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgCommitTime"
        },
        "max_commit_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxCommitTime"
        },
        "avg_get_commit_ts_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgGetCommitTsTime"
        },
        "max_get_commit_ts_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxGetCommitTsTime"
        },
        "avg_commit_backoff_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgCommitBackoffTime"
        },
        "max_commit_backoff_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxCommitBackoffTime"
        },
        "avg_resolve_lock_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgResolveLockTime"
        },
        "max_resolve_lock_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxResolveLockTime"
        },
        "avg_local_latch_wait_time": {
          "type": "number",
          "format": "double",
          "title": "AggAvgLocalLatchWaitTime"
        },
        "max_local_latch_wait_time": {
          "type": "number",
          "format": "double",
          "title": "AggMaxLocalLatchWaitTime"
        },
        "avg_write_keys": {
          "type": "number",
          "format": "double",
          "title": "AggAvgWriteKeys"
        },
        "max_write_keys": {
          "type": "number",
          "format": "double",
          "title": "AggMaxWriteKeys"
        },
        "avg_write_size": {
          "type": "number",
          "format": "double",
          "title": "AggAvgWriteSize"
        },
        "max_write_size": {
          "type": "number",
          "format": "double",
          "title": "AggMaxWriteSize"
        },
        "avg_prewrite_regions": {
          "type": "number",
          "format": "double",
          "title": "AggAvgPrewriteRegions"
        },
        "max_prewrite_regions": {
          "type": "number",
          "format": "double",
          "title": "AggMaxPrewriteRegions"
        },
        "avg_txn_retry": {
          "type": "number",
          "format": "double",
          "title": "AggAvgTxnRetry"
        },
        "max_txn_retry": {
          "type": "number",
          "format": "double",
          "title": "AggMaxTxnRetry"
        },
        "sum_backoff_times": {
          "type": "number",
          "format": "double",
          "title": "AggSumBackoffTimes"
        },
        "avg_mem": {
          "type": "number",
          "format": "double",
          "title": "AggAvgMem"
        },
        "max_mem": {
          "type": "number",
          "format": "double",
          "title": "AggMaxMem"
        },
        "avg_disk": {
          "type": "number",
          "format": "double",
          "title": "AggAvgDisk"
        },
        "max_disk": {
          "type": "number",
          "format": "double",
          "title": "AggMaxDisk"
        },
        "avg_affected_rows": {
          "type": "number",
          "format": "double",
          "title": "AggAvgAffectedRows"
        },
        "first_seen": {
          "type": "number",
          "format": "double",
          "title": "AggFirstSeen"
        },
        "last_seen": {
          "type": "number",
          "format": "double",
          "title": "AggLastSeen"
        },
        "sample_user": {
          "type": "string",
          "title": "AggSampleUser"
        },
        "query_sample_text": {
          "type": "string",
          "title": "AggQuerySampleText"
        },
        "prev_sample_text": {
          "type": "string",
          "title": "AggPrevSampleText"
        },
        "schema_name": {
          "type": "string",
          "title": "AggSchemaName"
        },
        "table_names": {
          "type": "string",
          "title": "AggTableNames"
        },
        "index_names": {
          "type": "string",
          "title": "AggIndexNames"
        },
        "plan_count": {
          "type": "number",
          "format": "double",
          "title": "AggPlanCount"
        },
        "plan": {
          "type": "string",
          "title": "AggPlan (deprecated)"
        },
        "binary_plan": {
          "type": "string",
          "title": "AggBinaryPlan"
        },
        "plan_digest": {
          "type": "string",
          "title": "AggPlanDigest"
        },
        "plan_hint": {
          "type": "string",
          "title": "AggPlanHint"
        },
        "max_rocksdb_delete_skipped_count": {
          "type": "number",
          "format": "double",
          "title": "AggMaxRocksdbDeleteSkippedCount"
        },
        "avg_rocksdb_delete_skipped_count": {
          "type": "number",
          "format": "double",
          "title": "AggAvgRocksdbDeleteSkippedCount"
        },
        "max_rocksdb_key_skipped_count": {
          "type": "number",
          "format": "double",
          "title": "AggMaxRocksdbKeySkippedCount"
        },
        "avg_rocksdb_key_skipped_count": {
          "type": "number",
          "format": "double",
          "title": "AggAvgRocksdbKeySkippedCount"
        },
        "max_rocksdb_block_cache_hit_count": {
          "type": "number",
          "format": "double",
          "title": "AggMaxRocksdbBlockCacheHitCount"
        },
        "avg_rocksdb_block_cache_hit_count": {
          "type": "number",
          "format": "double",
          "title": "AggAvgRocksdbBlockCacheHitCount"
        },
        "max_rocksdb_block_read_count": {
          "type": "number",
          "format": "double",
          "title": "AggMaxRocksdbBlockReadCount"
        },
        "avg_rocksdb_block_read_count": {
          "type": "number",
          "format": "double",
          "title": "AggAvgRocksdbBlockReadCount"
        },
        "max_rocksdb_block_read_byte": {
          "type": "number",
          "format": "double",
          "title": "AggMaxRocksdbBlockReadByte"
        },
        "avg_rocksdb_block_read_byte": {
          "type": "number",
          "format": "double",
          "title": "AggAvgRocksdbBlockReadByte"
        },
        "related_schemas": {
          "type": "string",
          "title": "RelatedSchemas"
        },
        "plan_can_be_bound": {
          "type": "boolean",
          "title": "PlanCanBeBound"
        },
        "binary_plan_text": {
          "type": "string",
          "title": "BinaryPlanText"
        },
        "resource_group": {
          "type": "string",
          "title": "ResourceGroup"
        },
        "avg_ru": {
          "type": "number",
          "format": "double",
          "title": "AvgRu"
        },
        "max_ru": {
          "type": "number",
          "format": "double",
          "title": "MaxRu"
        },
        "sum_ru": {
          "type": "number",
          "format": "double",
          "title": "SumRu"
        },
        "avg_time_queued_by_rc": {
          "type": "number",
          "format": "double",
          "title": "AvgTimeQueuedByRc"
        },
        "max_time_queued_by_rc": {
          "type": "number",
          "format": "double",
          "title": "MaxTimeQueuedBNyRc"
        },
        "avg_tidb_cpu_time": {
          "type": "number",
          "format": "double",
          "title": "TiDB CPU time"
        },
        "avg_tikv_cpu_time": {
          "type": "number",
          "format": "double",
          "title": "TiKV CPU time"
        }
      },
      "title": "Top SQL detail"
    },
    "v2TopSqlList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2TopSqlDetail"
          },
          "title": "List of top sql"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Next page token"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "title": "Total size"
        }
      },
      "title": "Top SQL list"
    },
    "v2TriggerTypeEnumData": {
      "type": "string",
      "enum": [
        "automatic",
        "manual"
      ],
      "default": "automatic",
      "description": "- automatic: automatic\n - manual: manual",
      "title": "Data of TriggerTypeEnum"
    },
    "v2TypeEnumData": {
      "type": "string",
      "enum": [
        "all",
        "full_backup",
        "log_backup",
        "restore_by_file",
        "restore_by_time",
        "all_backup",
        "all_restore"
      ],
      "default": "all",
      "description": "- all: All\n - full_backup: Full backup\n - log_backup: Log backup\n - restore_by_file: Restore by file\n - restore_by_time: Restore by time\n - all_backup: All backup\n - all_restore: All restore",
      "title": "Data of TypeEnum"
    },
    "v2User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The unique user ID of the user."
        },
        "name": {
          "type": "string",
          "description": "The full name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user."
        },
        "note": {
          "type": "string",
          "description": "Additional notes about the user."
        },
        "password": {
          "type": "string",
          "description": "The user's password (optional)."
        },
        "userType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the user (e.g., admin, regular user)."
        },
        "userTypeDesc": {
          "type": "string",
          "description": "A description of the user's type."
        },
        "phone": {
          "type": "string",
          "description": "The user's phone number."
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2UserRole",
            "enum": [
              "ADMIN",
              "ALERT_MANAGER",
              "ALERT_READER",
              "BACKUP_MANAGER",
              "BACKUP_READER",
              "CLUSTER_MANAGER",
              "CLUSTER_READER",
              "HOST_MANAGER",
              "HOST_READER",
              "USER_MANAGER",
              "AUDIT_MANAGER",
              "SYSTEM_MANAGER",
              "SYSTEM_READER"
            ]
          },
          "description": "The roles assigned to the user.",
          "title": "The role name"
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the user was created.",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the user was last updated.",
          "readOnly": true
        }
      },
      "description": "User represents a user resource containing detailed information about a user.",
      "required": [
        "userId",
        "name"
      ]
    },
    "v2UserProfile": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The unique identifier of the user."
        },
        "name": {
          "type": "string",
          "description": "The  name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user."
        },
        "note": {
          "type": "string",
          "description": "The note of the user."
        },
        "phone": {
          "type": "string",
          "description": "The phone of the user."
        }
      },
      "description": "UserProfile represents the profile information of the authenticated user.",
      "required": [
        "userId",
        "name",
        "email"
      ]
    },
    "v2UserRole": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string",
          "title": "The name of the role"
        },
        "roleId": {
          "type": "integer",
          "format": "int32",
          "title": "The id of the role"
        }
      },
      "title": "the role of user",
      "required": [
        "roleId"
      ]
    },
    "v2ValidateConnectionRequest": {
      "type": "object",
      "properties": {
        "credentialId": {
          "type": "string",
          "title": "the credential id of the credential"
        }
      },
      "title": "ValidateConnection Request",
      "required": [
        "credentialId"
      ]
    },
    "v2ValidateConnectionResponse": {
      "type": "object",
      "properties": {
        "connectionResult": {
          "type": "string",
          "title": "the connection result of the validate"
        },
        "inaccessibleHosts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the hosts which not accessible"
        }
      },
      "title": "ValidateConnection Response"
    },
    "v2ValidateSessionResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "The id of the user"
        }
      },
      "title": "The Response of ValidateSession",
      "required": [
        "userId"
      ]
    }
  }
}