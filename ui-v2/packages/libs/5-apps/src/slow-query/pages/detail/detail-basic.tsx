import {
  formatTime,
  formatValue,
} from "@pingcap-incubator/tidb-dashboard-lib-utils"
import { useMemo } from "react"

import { InfoModel, InfoTable } from "../../components/info-table"
import { SlowqueryModel } from "../../models"

function getData(data: SlowqueryModel): InfoModel[] {
  return [
    {
      name: "Finish Time",
      value: formatTime(data.timestamp! * 1000),
      description: "The time this query finished execution",
    },
    {
      name: "Query Template ID",
      value: data.digest!,
      description: "a.k.a. Query digest",
    },
    {
      name: "Is Internal?",
      value: data.is_internal === 1 ? "Yes" : "No",
      description: "Whether this is an internal query",
    },
    {
      name: "Is Success?",
      value: data.success === 1 ? "Yes" : "No",
      description: "Whether query is executed successfully",
    },
    {
      name: "Is Prepared?",
      value: data.prepared === 1 ? "Yes" : "No",
      description: "Is Generated by the prepare statement",
    },
    {
      name: "Is Plan from Cache?",
      value: data.plan_from_cache === 1 ? "Yes" : "No",
    },
    {
      name: "Is Plan from Binding?",
      value: data.plan_from_binding === 1 ? "Yes" : "No",
    },
    {
      name: "Execution Database",
      value: data.db || "-",
      description: "The database used to execute the query",
    },
    {
      name: "Index Names",
      value: data.index_names || "-",
      description: "The name of the used index",
    },
    {
      name: "Used Statistics",
      value: data.stats || "-",
    },
    {
      name: "Backoff Types",
      value: data.backoff_types || "-",
    },
    {
      name: "Max Memory",
      value: formatValue(data.memory_max || 0, "bytes"),
      description: "Maximum memory usage of the query",
    },
    {
      name: "Max Disk",
      value: formatValue(data.disk_max || 0, "bytes"),
      description: "Maximum disk usage of the query",
    },
    {
      name: "TiDB Instance",
      value: data.instance || "-",
      description: "The TiDB address that handles the query",
    },
    {
      name: "Connection ID",
      value: data.connection_id || "-",
      description: "Unique connection ID of the query",
    },
    {
      name: "Execution User",
      value: data.user || "-",
      description: "The user that executes the query",
    },
    {
      name: "Client Address",
      value: data.host || "-",
      description: "The address of the client that sends the query",
    },
  ]
}

export function DetailBasic({ data }: { data: SlowqueryModel }) {
  const infoData = useMemo(() => getData(data), [data])
  return <InfoTable data={infoData} />
}
