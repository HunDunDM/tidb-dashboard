/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
import { z as zod } from 'zod';

export const apiKeyServiceListApiKeysQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "accessKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.string().optional()
})

export const apiKeyServiceListApiKeysResponse = zod.object({
  "apikeys": zod.array(zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const apiKeyServiceCreateApiKeyBody = zod.object({

})

export const apiKeyServiceCreateApiKeyResponse = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const apiKeyServiceDeleteApiKeyParams = zod.object({
  "accessKey": zod.string()
})

export const apiKeyServiceDeleteApiKeyResponse = zod.object({

})


export const apiKeyServiceUpdateApiKeyParams = zod.object({
  "accessKey": zod.string()
})

export const apiKeyServiceUpdateApiKeyBody = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional()
})

export const apiKeyServiceUpdateApiKeyResponse = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string().optional(),
  "creator": zod.string().optional(),
  "status": zod.enum(['disable', 'enable']).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const apiKeyServiceResetSecretKeyParams = zod.object({
  "accessKey": zod.string()
})

export const apiKeyServiceResetSecretKeyResponse = zod.object({
  "accessKey": zod.string(),
  "secretKey": zod.string()
})


export const metricsServiceGetClusterMetricDataParams = zod.object({
  "clusterId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetClusterMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "label": zod.string().optional(),
  "range": zod.string().optional()
})

export const metricsServiceGetClusterMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const metricsServiceGetClusterMetricInstanceParams = zod.object({
  "clusterId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetClusterMetricInstanceResponse = zod.object({
  "type": zod.string().optional(),
  "instanceList": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetResourceGroupListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetResourceGroupListResponse = zod.object({
  "resourceGroups": zod.array(zod.object({
  "name": zod.string().optional(),
  "ruPerSec": zod.string().optional(),
  "priority": zod.string().optional(),
  "burstable": zod.string().optional()
})).optional()
})


export const clusterServiceGetProcessListParams = zod.object({
  "clusterId": zod.string()
})

export const clusterServiceGetProcessListResponse = zod.object({
  "clusterProcessList": zod.array(zod.object({
  "instance": zod.string().optional(),
  "id": zod.string().optional(),
  "user": zod.string().optional(),
  "host": zod.string().optional(),
  "db": zod.string().optional(),
  "command": zod.enum(['Sleep', 'Quit', 'Init DB', 'Query', 'Field List', 'Create DB', 'Drop DB', 'Refresh', 'Shutdown', 'Statistics', 'Processlist', 'Connect', 'Kill', 'Debug', 'Ping', 'Time', 'Delayed Insert', 'Change User', 'Binlog Dump', 'Table Dump', 'Connect out', 'Register Slave', 'Prepare', 'Execute', 'Long Data', 'Close stmt', 'Reset stmt', 'Set option', 'Fetch', 'Daemon', 'Reset connect']).optional(),
  "time": zod.string().optional(),
  "state": zod.string().optional(),
  "info": zod.string().optional(),
  "digest": zod.string().optional(),
  "mem": zod.string().optional(),
  "disk": zod.string().optional(),
  "txnStart": zod.string().optional(),
  "resourceGroup": zod.string().optional(),
  "sessionAlias": zod.string().optional(),
  "rowsAffected": zod.string().optional(),
  "tidbCpu": zod.string().optional(),
  "tikvCpu": zod.string().optional()
})).optional(),
  "isSupportKill": zod.boolean().optional(),
  "totalProcessCount": zod.string().optional(),
  "activeProcessCount": zod.string().optional()
})


export const clusterServiceDeleteProcessParams = zod.object({
  "clusterId": zod.string(),
  "sessionId": zod.string()
})

export const clusterServiceDeleteProcessResponse = zod.object({

})


export const diagnosisServiceGetSlowQueryListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSlowQueryListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "db": zod.array(zod.string()).optional(),
  "text": zod.string().optional(),
  "orderBy": zod.string().optional(),
  "isDesc": zod.boolean().optional(),
  "fields": zod.string().optional(),
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "advancedFilter": zod.array(zod.string()).optional()
})

export const diagnosisServiceGetSlowQueryListResponse = zod.object({
  "data": zod.array(zod.object({
  "digest": zod.string().optional(),
  "query": zod.string().optional(),
  "instance": zod.string().optional(),
  "db": zod.string().optional(),
  "connection_id": zod.string().optional(),
  "success": zod.number().optional(),
  "timestamp": zod.number().optional(),
  "query_time": zod.number().optional(),
  "parse_time": zod.number().optional(),
  "compile_time": zod.number().optional(),
  "rewrite_time": zod.number().optional(),
  "preproc_subqueries_time": zod.number().optional(),
  "optimize_time": zod.number().optional(),
  "wait_ts": zod.number().optional(),
  "cop_time": zod.number().optional(),
  "lock_keys_time": zod.number().optional(),
  "write_sql_response_total": zod.number().optional(),
  "exec_retry_time": zod.number().optional(),
  "memory_max": zod.number().optional(),
  "disk_max": zod.number().optional(),
  "txn_start_ts": zod.string().optional(),
  "prev_stmt": zod.string().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "warnings": zod.string().optional(),
  "is_internal": zod.number().optional(),
  "index_names": zod.string().optional(),
  "stats": zod.string().optional(),
  "backoff_types": zod.string().optional(),
  "prepared": zod.number().optional(),
  "plan_from_cache": zod.number().optional(),
  "plan_from_binding": zod.number().optional(),
  "user": zod.string().optional(),
  "host": zod.string().optional(),
  "process_time": zod.number().optional(),
  "wait_time": zod.number().optional(),
  "backoff_time": zod.number().optional(),
  "get_commit_ts_time": zod.number().optional(),
  "local_latch_wait_time": zod.number().optional(),
  "resolve_lock_time": zod.number().optional(),
  "prewrite_time": zod.number().optional(),
  "wait_prewrite_binlog_time": zod.number().optional(),
  "commit_time": zod.number().optional(),
  "commit_backoff_time": zod.number().optional(),
  "cop_proc_avg": zod.number().optional(),
  "cop_proc_p90": zod.number().optional(),
  "cop_proc_max": zod.number().optional(),
  "cop_wait_avg": zod.number().optional(),
  "cop_wait_p90": zod.number().optional(),
  "cop_wait_max": zod.number().optional(),
  "write_keys": zod.number().optional(),
  "write_size": zod.number().optional(),
  "prewrite_region": zod.number().optional(),
  "txn_retry": zod.number().optional(),
  "request_count": zod.number().optional(),
  "process_keys": zod.number().optional(),
  "total_keys": zod.number().optional(),
  "cop_proc_addr": zod.string().optional(),
  "cop_wait_addr": zod.string().optional(),
  "rocksdb_delete_skipped_count": zod.number().optional(),
  "rocksdb_key_skipped_count": zod.number().optional(),
  "rocksdb_block_cache_hit_count": zod.number().optional(),
  "rocksdb_block_read_count": zod.number().optional(),
  "rocksdb_block_read_byte": zod.number().optional(),
  "binary_plan_text": zod.string().optional(),
  "session_alias": zod.string().optional(),
  "exec_retry_count": zod.number().optional(),
  "preproc_subqueries": zod.number().optional(),
  "kv_total": zod.number().optional(),
  "pd_total": zod.number().optional(),
  "backoff_total": zod.number().optional(),
  "time_queued_by_rc": zod.number().optional(),
  "tidb_cpu_time": zod.number().optional(),
  "tikv_cpu_time": zod.number().optional(),
  "backoff_detail": zod.string().optional(),
  "is_explicit_txn": zod.number().optional(),
  "plan_digest": zod.string().optional(),
  "has_more_results": zod.number().optional(),
  "resource_group": zod.string().optional(),
  "request_unit_read": zod.number().optional(),
  "request_unit_write": zod.number().optional(),
  "result_rows": zod.number().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const diagnosisServiceGetSlowQueryAvailableAdvancedFiltersParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSlowQueryAvailableAdvancedFiltersResponse = zod.object({
  "filters": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetSlowQueryAvailableAdvancedFilterInfoParams = zod.object({
  "clusterId": zod.string(),
  "filterName": zod.string()
})

export const diagnosisServiceGetSlowQueryAvailableAdvancedFilterInfoResponse = zod.object({
  "name": zod.string().optional(),
  "unit": zod.string().optional(),
  "valueList": zod.array(zod.string()).optional()
})


export const diagnosisServiceDownloadSlowQueryListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceDownloadSlowQueryListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "db": zod.array(zod.string()).optional(),
  "text": zod.string().optional(),
  "orderBy": zod.string().optional(),
  "isDesc": zod.boolean().optional(),
  "fields": zod.string().optional(),
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "advancedFilter": zod.array(zod.string()).optional()
})

export const diagnosisServiceDownloadSlowQueryListResponse = zod.object({
  "filename": zod.string().optional(),
  "fileContent": zod.string().optional()
})


export const diagnosisServiceGetSlowQueryAvailableFieldsParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSlowQueryAvailableFieldsResponse = zod.object({
  "fields": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetSlowQueryDetailParams = zod.object({
  "clusterId": zod.string(),
  "digest": zod.string()
})

export const diagnosisServiceGetSlowQueryDetailQueryParams = zod.object({
  "timestamp": zod.number(),
  "connectionId": zod.string()
})

export const diagnosisServiceGetSlowQueryDetailResponse = zod.object({
  "digest": zod.string().optional(),
  "query": zod.string().optional(),
  "instance": zod.string().optional(),
  "db": zod.string().optional(),
  "connection_id": zod.string().optional(),
  "success": zod.number().optional(),
  "timestamp": zod.number().optional(),
  "query_time": zod.number().optional(),
  "parse_time": zod.number().optional(),
  "compile_time": zod.number().optional(),
  "rewrite_time": zod.number().optional(),
  "preproc_subqueries_time": zod.number().optional(),
  "optimize_time": zod.number().optional(),
  "wait_ts": zod.number().optional(),
  "cop_time": zod.number().optional(),
  "lock_keys_time": zod.number().optional(),
  "write_sql_response_total": zod.number().optional(),
  "exec_retry_time": zod.number().optional(),
  "memory_max": zod.number().optional(),
  "disk_max": zod.number().optional(),
  "txn_start_ts": zod.string().optional(),
  "prev_stmt": zod.string().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "warnings": zod.string().optional(),
  "is_internal": zod.number().optional(),
  "index_names": zod.string().optional(),
  "stats": zod.string().optional(),
  "backoff_types": zod.string().optional(),
  "prepared": zod.number().optional(),
  "plan_from_cache": zod.number().optional(),
  "plan_from_binding": zod.number().optional(),
  "user": zod.string().optional(),
  "host": zod.string().optional(),
  "process_time": zod.number().optional(),
  "wait_time": zod.number().optional(),
  "backoff_time": zod.number().optional(),
  "get_commit_ts_time": zod.number().optional(),
  "local_latch_wait_time": zod.number().optional(),
  "resolve_lock_time": zod.number().optional(),
  "prewrite_time": zod.number().optional(),
  "wait_prewrite_binlog_time": zod.number().optional(),
  "commit_time": zod.number().optional(),
  "commit_backoff_time": zod.number().optional(),
  "cop_proc_avg": zod.number().optional(),
  "cop_proc_p90": zod.number().optional(),
  "cop_proc_max": zod.number().optional(),
  "cop_wait_avg": zod.number().optional(),
  "cop_wait_p90": zod.number().optional(),
  "cop_wait_max": zod.number().optional(),
  "write_keys": zod.number().optional(),
  "write_size": zod.number().optional(),
  "prewrite_region": zod.number().optional(),
  "txn_retry": zod.number().optional(),
  "request_count": zod.number().optional(),
  "process_keys": zod.number().optional(),
  "total_keys": zod.number().optional(),
  "cop_proc_addr": zod.string().optional(),
  "cop_wait_addr": zod.string().optional(),
  "rocksdb_delete_skipped_count": zod.number().optional(),
  "rocksdb_key_skipped_count": zod.number().optional(),
  "rocksdb_block_cache_hit_count": zod.number().optional(),
  "rocksdb_block_read_count": zod.number().optional(),
  "rocksdb_block_read_byte": zod.number().optional(),
  "binary_plan_text": zod.string().optional(),
  "session_alias": zod.string().optional(),
  "exec_retry_count": zod.number().optional(),
  "preproc_subqueries": zod.number().optional(),
  "kv_total": zod.number().optional(),
  "pd_total": zod.number().optional(),
  "backoff_total": zod.number().optional(),
  "time_queued_by_rc": zod.number().optional(),
  "tidb_cpu_time": zod.number().optional(),
  "tikv_cpu_time": zod.number().optional(),
  "backoff_detail": zod.string().optional(),
  "is_explicit_txn": zod.number().optional(),
  "plan_digest": zod.string().optional(),
  "has_more_results": zod.number().optional(),
  "resource_group": zod.string().optional(),
  "request_unit_read": zod.number().optional(),
  "request_unit_write": zod.number().optional(),
  "result_rows": zod.number().optional()
})


export const diagnosisServiceAddSqlLimitParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceAddSqlLimitBody = zod.object({
  "resourceGroup": zod.string(),
  "action": zod.enum(['DRYRUN', 'COOLDOWN', 'KILL']),
  "watchText": zod.string()
})

export const diagnosisServiceAddSqlLimitResponse = zod.object({

})


export const diagnosisServiceCheckSqlLimitSupportParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceCheckSqlLimitSupportResponse = zod.object({
  "isSupport": zod.boolean().optional()
})


export const diagnosisServiceRemoveSqlLimitParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceRemoveSqlLimitBody = zod.object({
  "watchText": zod.string()
})

export const diagnosisServiceRemoveSqlLimitResponse = zod.object({

})


export const diagnosisServiceGetSqlLimitListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSqlLimitListQueryParams = zod.object({
  "watchText": zod.string()
})

export const diagnosisServiceGetSqlLimitListResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().optional(),
  "resourceGroupName": zod.string().optional(),
  "startTime": zod.string().optional(),
  "endTime": zod.string().optional(),
  "watch": zod.string().optional(),
  "watchText": zod.string().optional(),
  "source": zod.string().optional(),
  "action": zod.enum(['DRYRUN', 'COOLDOWN', 'KILL']).optional()
})).optional()
})


export const diagnosisServiceGetSqlPlanListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSqlPlanListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "digest": zod.string().optional(),
  "schemaName": zod.string().optional()
})

export const diagnosisServiceGetSqlPlanListResponse = zod.object({
  "data": zod.array(zod.object({
  "summary_begin_time": zod.number().optional(),
  "summary_end_time": zod.number().optional(),
  "digest_text": zod.string().optional(),
  "digest": zod.string().optional(),
  "exec_count": zod.number().optional(),
  "stmt_type": zod.string().optional(),
  "sum_errors": zod.number().optional(),
  "sum_warnings": zod.number().optional(),
  "sum_latency": zod.number().optional(),
  "max_latency": zod.number().optional(),
  "min_latency": zod.number().optional(),
  "avg_latency": zod.number().optional(),
  "avg_parse_latency": zod.number().optional(),
  "max_parse_latency": zod.number().optional(),
  "avg_compile_latency": zod.number().optional(),
  "max_compile_latency": zod.number().optional(),
  "sum_cop_task_num": zod.number().optional(),
  "avg_cop_process_time": zod.number().optional(),
  "max_cop_process_time": zod.number().optional(),
  "avg_cop_wait_time": zod.number().optional(),
  "max_cop_wait_time": zod.number().optional(),
  "avg_process_time": zod.number().optional(),
  "max_process_time": zod.number().optional(),
  "avg_wait_time": zod.number().optional(),
  "max_wait_time": zod.number().optional(),
  "avg_backoff_time": zod.number().optional(),
  "max_backoff_time": zod.number().optional(),
  "avg_total_keys": zod.number().optional(),
  "max_total_keys": zod.number().optional(),
  "avg_processed_keys": zod.number().optional(),
  "max_processed_keys": zod.number().optional(),
  "avg_prewrite_time": zod.number().optional(),
  "max_prewrite_time": zod.number().optional(),
  "avg_commit_time": zod.number().optional(),
  "max_commit_time": zod.number().optional(),
  "avg_get_commit_ts_time": zod.number().optional(),
  "max_get_commit_ts_time": zod.number().optional(),
  "avg_commit_backoff_time": zod.number().optional(),
  "max_commit_backoff_time": zod.number().optional(),
  "avg_resolve_lock_time": zod.number().optional(),
  "max_resolve_lock_time": zod.number().optional(),
  "avg_local_latch_wait_time": zod.number().optional(),
  "max_local_latch_wait_time": zod.number().optional(),
  "avg_write_keys": zod.number().optional(),
  "max_write_keys": zod.number().optional(),
  "avg_write_size": zod.number().optional(),
  "max_write_size": zod.number().optional(),
  "avg_prewrite_regions": zod.number().optional(),
  "max_prewrite_regions": zod.number().optional(),
  "avg_txn_retry": zod.number().optional(),
  "max_txn_retry": zod.number().optional(),
  "sum_backoff_times": zod.number().optional(),
  "avg_mem": zod.number().optional(),
  "max_mem": zod.number().optional(),
  "avg_disk": zod.number().optional(),
  "max_disk": zod.number().optional(),
  "avg_affected_rows": zod.number().optional(),
  "first_seen": zod.number().optional(),
  "last_seen": zod.number().optional(),
  "sample_user": zod.string().optional(),
  "query_sample_text": zod.string().optional(),
  "prev_sample_text": zod.string().optional(),
  "schema_name": zod.string().optional(),
  "table_names": zod.string().optional(),
  "index_names": zod.string().optional(),
  "plan_count": zod.number().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "plan_digest": zod.string().optional(),
  "plan_hint": zod.string().optional(),
  "max_rocksdb_delete_skipped_count": zod.number().optional(),
  "avg_rocksdb_delete_skipped_count": zod.number().optional(),
  "max_rocksdb_key_skipped_count": zod.number().optional(),
  "avg_rocksdb_key_skipped_count": zod.number().optional(),
  "max_rocksdb_block_cache_hit_count": zod.number().optional(),
  "avg_rocksdb_block_cache_hit_count": zod.number().optional(),
  "max_rocksdb_block_read_count": zod.number().optional(),
  "avg_rocksdb_block_read_count": zod.number().optional(),
  "max_rocksdb_block_read_byte": zod.number().optional(),
  "avg_rocksdb_block_read_byte": zod.number().optional(),
  "related_schemas": zod.string().optional(),
  "plan_can_be_bound": zod.boolean().optional(),
  "binary_plan_text": zod.string().optional(),
  "resource_group": zod.string().optional(),
  "avg_ru": zod.number().optional(),
  "max_ru": zod.number().optional(),
  "sum_ru": zod.number().optional(),
  "avg_time_queued_by_rc": zod.number().optional(),
  "max_time_queued_by_rc": zod.number().optional()
})).optional()
})


export const diagnosisServiceBindSqlPlanParams = zod.object({
  "clusterId": zod.string(),
  "planDigest": zod.string()
})

export const diagnosisServiceBindSqlPlanResponse = zod.object({

})


export const diagnosisServiceCheckSqlPlanSupportParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceCheckSqlPlanSupportResponse = zod.object({
  "isSupport": zod.boolean().optional()
})


export const diagnosisServiceGetSqlPlanBindingListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetSqlPlanBindingListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "digest": zod.string()
})

export const diagnosisServiceGetSqlPlanBindingListResponse = zod.object({
  "data": zod.array(zod.object({
  "status": zod.enum(['enabled', 'using', 'disabled', 'deleted', 'invalid', 'rejected', 'pending verify']).optional(),
  "source": zod.enum(['manual', 'history', 'capture', 'evolve']).optional(),
  "digest": zod.string().optional(),
  "planDigest": zod.string().optional()
})).optional()
})


export const diagnosisServiceUnbindSqlPlanParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceUnbindSqlPlanQueryParams = zod.object({
  "digest": zod.string()
})

export const diagnosisServiceUnbindSqlPlanResponse = zod.object({

})


export const diagnosisServiceGetTopSqlListParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetTopSqlListQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "db": zod.array(zod.string()).optional(),
  "text": zod.string().optional(),
  "orderBy": zod.string().optional(),
  "isDesc": zod.boolean().optional(),
  "fields": zod.string().optional(),
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "advancedFilter": zod.array(zod.string()).optional(),
  "isGroupByTime": zod.boolean().optional()
})

export const diagnosisServiceGetTopSqlListResponse = zod.object({
  "data": zod.array(zod.object({
  "summary_begin_time": zod.number().optional(),
  "summary_end_time": zod.number().optional(),
  "digest_text": zod.string().optional(),
  "digest": zod.string().optional(),
  "exec_count": zod.number().optional(),
  "stmt_type": zod.string().optional(),
  "sum_errors": zod.number().optional(),
  "sum_warnings": zod.number().optional(),
  "sum_latency": zod.number().optional(),
  "max_latency": zod.number().optional(),
  "min_latency": zod.number().optional(),
  "avg_latency": zod.number().optional(),
  "avg_parse_latency": zod.number().optional(),
  "max_parse_latency": zod.number().optional(),
  "avg_compile_latency": zod.number().optional(),
  "max_compile_latency": zod.number().optional(),
  "sum_cop_task_num": zod.number().optional(),
  "avg_cop_process_time": zod.number().optional(),
  "max_cop_process_time": zod.number().optional(),
  "avg_cop_wait_time": zod.number().optional(),
  "max_cop_wait_time": zod.number().optional(),
  "avg_process_time": zod.number().optional(),
  "max_process_time": zod.number().optional(),
  "avg_wait_time": zod.number().optional(),
  "max_wait_time": zod.number().optional(),
  "avg_backoff_time": zod.number().optional(),
  "max_backoff_time": zod.number().optional(),
  "avg_total_keys": zod.number().optional(),
  "max_total_keys": zod.number().optional(),
  "avg_processed_keys": zod.number().optional(),
  "max_processed_keys": zod.number().optional(),
  "avg_prewrite_time": zod.number().optional(),
  "max_prewrite_time": zod.number().optional(),
  "avg_commit_time": zod.number().optional(),
  "max_commit_time": zod.number().optional(),
  "avg_get_commit_ts_time": zod.number().optional(),
  "max_get_commit_ts_time": zod.number().optional(),
  "avg_commit_backoff_time": zod.number().optional(),
  "max_commit_backoff_time": zod.number().optional(),
  "avg_resolve_lock_time": zod.number().optional(),
  "max_resolve_lock_time": zod.number().optional(),
  "avg_local_latch_wait_time": zod.number().optional(),
  "max_local_latch_wait_time": zod.number().optional(),
  "avg_write_keys": zod.number().optional(),
  "max_write_keys": zod.number().optional(),
  "avg_write_size": zod.number().optional(),
  "max_write_size": zod.number().optional(),
  "avg_prewrite_regions": zod.number().optional(),
  "max_prewrite_regions": zod.number().optional(),
  "avg_txn_retry": zod.number().optional(),
  "max_txn_retry": zod.number().optional(),
  "sum_backoff_times": zod.number().optional(),
  "avg_mem": zod.number().optional(),
  "max_mem": zod.number().optional(),
  "avg_disk": zod.number().optional(),
  "max_disk": zod.number().optional(),
  "avg_affected_rows": zod.number().optional(),
  "first_seen": zod.number().optional(),
  "last_seen": zod.number().optional(),
  "sample_user": zod.string().optional(),
  "query_sample_text": zod.string().optional(),
  "prev_sample_text": zod.string().optional(),
  "schema_name": zod.string().optional(),
  "table_names": zod.string().optional(),
  "index_names": zod.string().optional(),
  "plan_count": zod.number().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "plan_digest": zod.string().optional(),
  "plan_hint": zod.string().optional(),
  "max_rocksdb_delete_skipped_count": zod.number().optional(),
  "avg_rocksdb_delete_skipped_count": zod.number().optional(),
  "max_rocksdb_key_skipped_count": zod.number().optional(),
  "avg_rocksdb_key_skipped_count": zod.number().optional(),
  "max_rocksdb_block_cache_hit_count": zod.number().optional(),
  "avg_rocksdb_block_cache_hit_count": zod.number().optional(),
  "max_rocksdb_block_read_count": zod.number().optional(),
  "avg_rocksdb_block_read_count": zod.number().optional(),
  "max_rocksdb_block_read_byte": zod.number().optional(),
  "avg_rocksdb_block_read_byte": zod.number().optional(),
  "related_schemas": zod.string().optional(),
  "plan_can_be_bound": zod.boolean().optional(),
  "binary_plan_text": zod.string().optional(),
  "resource_group": zod.string().optional(),
  "avg_ru": zod.number().optional(),
  "max_ru": zod.number().optional(),
  "sum_ru": zod.number().optional(),
  "avg_time_queued_by_rc": zod.number().optional(),
  "max_time_queued_by_rc": zod.number().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const diagnosisServiceGetTopSqlAvailableAdvancedFiltersParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetTopSqlAvailableAdvancedFiltersResponse = zod.object({
  "filters": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetTopSqlAvailableAdvancedFilterInfoParams = zod.object({
  "clusterId": zod.string(),
  "filterName": zod.string()
})

export const diagnosisServiceGetTopSqlAvailableAdvancedFilterInfoResponse = zod.object({
  "name": zod.string().optional(),
  "unit": zod.string().optional(),
  "valueList": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetTopSqlAvailableFieldsParams = zod.object({
  "clusterId": zod.string()
})

export const diagnosisServiceGetTopSqlAvailableFieldsResponse = zod.object({
  "fields": zod.array(zod.string()).optional()
})


export const diagnosisServiceGetTopSqlDetailParams = zod.object({
  "clusterId": zod.string(),
  "digest": zod.string()
})

export const diagnosisServiceGetTopSqlDetailQueryParams = zod.object({
  "beginTime": zod.string(),
  "endTime": zod.string(),
  "planDigest": zod.array(zod.string()).optional()
})

export const diagnosisServiceGetTopSqlDetailResponse = zod.object({
  "summary_begin_time": zod.number().optional(),
  "summary_end_time": zod.number().optional(),
  "digest_text": zod.string().optional(),
  "digest": zod.string().optional(),
  "exec_count": zod.number().optional(),
  "stmt_type": zod.string().optional(),
  "sum_errors": zod.number().optional(),
  "sum_warnings": zod.number().optional(),
  "sum_latency": zod.number().optional(),
  "max_latency": zod.number().optional(),
  "min_latency": zod.number().optional(),
  "avg_latency": zod.number().optional(),
  "avg_parse_latency": zod.number().optional(),
  "max_parse_latency": zod.number().optional(),
  "avg_compile_latency": zod.number().optional(),
  "max_compile_latency": zod.number().optional(),
  "sum_cop_task_num": zod.number().optional(),
  "avg_cop_process_time": zod.number().optional(),
  "max_cop_process_time": zod.number().optional(),
  "avg_cop_wait_time": zod.number().optional(),
  "max_cop_wait_time": zod.number().optional(),
  "avg_process_time": zod.number().optional(),
  "max_process_time": zod.number().optional(),
  "avg_wait_time": zod.number().optional(),
  "max_wait_time": zod.number().optional(),
  "avg_backoff_time": zod.number().optional(),
  "max_backoff_time": zod.number().optional(),
  "avg_total_keys": zod.number().optional(),
  "max_total_keys": zod.number().optional(),
  "avg_processed_keys": zod.number().optional(),
  "max_processed_keys": zod.number().optional(),
  "avg_prewrite_time": zod.number().optional(),
  "max_prewrite_time": zod.number().optional(),
  "avg_commit_time": zod.number().optional(),
  "max_commit_time": zod.number().optional(),
  "avg_get_commit_ts_time": zod.number().optional(),
  "max_get_commit_ts_time": zod.number().optional(),
  "avg_commit_backoff_time": zod.number().optional(),
  "max_commit_backoff_time": zod.number().optional(),
  "avg_resolve_lock_time": zod.number().optional(),
  "max_resolve_lock_time": zod.number().optional(),
  "avg_local_latch_wait_time": zod.number().optional(),
  "max_local_latch_wait_time": zod.number().optional(),
  "avg_write_keys": zod.number().optional(),
  "max_write_keys": zod.number().optional(),
  "avg_write_size": zod.number().optional(),
  "max_write_size": zod.number().optional(),
  "avg_prewrite_regions": zod.number().optional(),
  "max_prewrite_regions": zod.number().optional(),
  "avg_txn_retry": zod.number().optional(),
  "max_txn_retry": zod.number().optional(),
  "sum_backoff_times": zod.number().optional(),
  "avg_mem": zod.number().optional(),
  "max_mem": zod.number().optional(),
  "avg_disk": zod.number().optional(),
  "max_disk": zod.number().optional(),
  "avg_affected_rows": zod.number().optional(),
  "first_seen": zod.number().optional(),
  "last_seen": zod.number().optional(),
  "sample_user": zod.string().optional(),
  "query_sample_text": zod.string().optional(),
  "prev_sample_text": zod.string().optional(),
  "schema_name": zod.string().optional(),
  "table_names": zod.string().optional(),
  "index_names": zod.string().optional(),
  "plan_count": zod.number().optional(),
  "plan": zod.string().optional(),
  "binary_plan": zod.string().optional(),
  "plan_digest": zod.string().optional(),
  "plan_hint": zod.string().optional(),
  "max_rocksdb_delete_skipped_count": zod.number().optional(),
  "avg_rocksdb_delete_skipped_count": zod.number().optional(),
  "max_rocksdb_key_skipped_count": zod.number().optional(),
  "avg_rocksdb_key_skipped_count": zod.number().optional(),
  "max_rocksdb_block_cache_hit_count": zod.number().optional(),
  "avg_rocksdb_block_cache_hit_count": zod.number().optional(),
  "max_rocksdb_block_read_count": zod.number().optional(),
  "avg_rocksdb_block_read_count": zod.number().optional(),
  "max_rocksdb_block_read_byte": zod.number().optional(),
  "avg_rocksdb_block_read_byte": zod.number().optional(),
  "related_schemas": zod.string().optional(),
  "plan_can_be_bound": zod.boolean().optional(),
  "binary_plan_text": zod.string().optional(),
  "resource_group": zod.string().optional(),
  "avg_ru": zod.number().optional(),
  "max_ru": zod.number().optional(),
  "sum_ru": zod.number().optional(),
  "avg_time_queued_by_rc": zod.number().optional(),
  "max_time_queued_by_rc": zod.number().optional()
})


export const metricsServiceGetHostMetricDataParams = zod.object({
  "hostId": zod.string(),
  "name": zod.string()
})

export const metricsServiceGetHostMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "label": zod.string().optional(),
  "range": zod.string().optional()
})

export const metricsServiceGetHostMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const labelServiceListLabelsQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "labelKey": zod.string().optional(),
  "labelValue": zod.string().optional()
})

export const labelServiceListLabelsResponse = zod.object({
  "labels": zod.array(zod.object({
  "label": zod.object({
  "labelId": zod.string().optional(),
  "labelKey": zod.string().optional(),
  "labelValue": zod.string()
}).optional(),
  "bindObjects": zod.array(zod.object({
  "resourceType": zod.string(),
  "resourceIds": zod.array(zod.string())
})).optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const labelServiceCreateLabelBody = zod.object({
  "labelId": zod.string().optional(),
  "labelKey": zod.string().optional(),
  "labelValue": zod.string()
})

export const labelServiceCreateLabelResponse = zod.object({
  "labelId": zod.string().optional(),
  "labelKey": zod.string().optional(),
  "labelValue": zod.string()
})


export const labelServiceDeleteLabelParams = zod.object({
  "labelId": zod.string()
})

export const labelServiceDeleteLabelResponse = zod.object({

})


export const labelServiceUpdateLabelParams = zod.object({
  "labelId": zod.string()
})

export const labelServiceUpdateLabelBody = zod.object({
  "labelId": zod.string().optional(),
  "labelKey": zod.string().optional(),
  "labelValue": zod.string()
})

export const labelServiceUpdateLabelResponse = zod.object({
  "labelId": zod.string().optional(),
  "labelKey": zod.string().optional(),
  "labelValue": zod.string()
})


export const labelServiceBindLabelBody = zod.object({
  "labelId": zod.string(),
  "appendBindObjects": zod.array(zod.object({
  "resourceType": zod.string(),
  "resourceIds": zod.array(zod.string())
})).optional(),
  "removeBindObjects": zod.array(zod.object({
  "resourceType": zod.string(),
  "resourceIds": zod.array(zod.string())
})).optional()
})

export const labelServiceBindLabelResponse = zod.object({
  "label": zod.object({
  "label": zod.object({
  "labelId": zod.string().optional(),
  "labelKey": zod.string().optional(),
  "labelValue": zod.string()
}).optional(),
  "bindObjects": zod.array(zod.object({
  "resourceType": zod.string(),
  "resourceIds": zod.array(zod.string())
})).optional()
}).optional()
})


export const labelServiceBindResourceBody = zod.object({
  "resourceType": zod.string(),
  "resourceId": zod.string(),
  "appendLabelIds": zod.array(zod.string()).optional(),
  "removeLabelIds": zod.array(zod.string()).optional()
})

export const labelServiceBindResourceResponse = zod.object({
  "labelIds": zod.array(zod.string()).optional()
})


export const userServiceLoginBody = zod.object({
  "userId": zod.string(),
  "password": zod.string().optional()
})

export const userServiceLoginResponse = zod.object({

})


export const userServiceLogoutResponse = zod.object({

})


export const metricsServiceGetMetricsQueryParams = zod.object({
  "class": zod.enum(['unspecified', 'cluster', 'host', 'overview']).optional(),
  "group": zod.enum(['unspecified', 'overview', 'basic', 'advance', 'resource', 'performance', 'process']).optional(),
  "type": zod.string().optional(),
  "name": zod.string().optional()
})

export const metricsServiceGetMetricsResponse = zod.object({
  "metrics": zod.array(zod.object({
  "class": zod.string().optional(),
  "group": zod.string().optional(),
  "type": zod.string().optional(),
  "order": zod.number().optional(),
  "displayName": zod.string().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional(),
  "metric": zod.object({
  "name": zod.string().optional(),
  "unit": zod.string().optional(),
  "description": zod.string().optional(),
  "minTidbVersion": zod.string().optional(),
  "maxTidbVersion": zod.string().optional(),
  "isBuiltin": zod.boolean().optional(),
  "expressions": zod.array(zod.object({
  "name": zod.string().optional(),
  "promql": zod.string().optional(),
  "promMetric": zod.string().optional(),
  "labels": zod.array(zod.string()).optional(),
  "type": zod.string().optional(),
  "legend": zod.string().optional(),
  "minTidbVersion": zod.string().optional(),
  "maxTidbVersion": zod.string().optional()
})).optional()
}).optional()
})).optional()
})


export const metricsServiceGetTopMetricDataParams = zod.object({
  "name": zod.string()
})

export const metricsServiceGetTopMetricDataQueryParams = zod.object({
  "startTime": zod.string(),
  "endTime": zod.string(),
  "step": zod.string().optional(),
  "limit": zod.string().optional()
})

export const metricsServiceGetTopMetricDataResponse = zod.object({
  "status": zod.string().optional(),
  "data": zod.array(zod.object({
  "expr": zod.string().optional(),
  "legend": zod.string().optional(),
  "result": zod.array(zod.object({
  "metric": zod.object({
  "instance": zod.string().optional(),
  "sqlType": zod.string().optional(),
  "type": zod.string().optional(),
  "result": zod.string().optional(),
  "txnMode": zod.string().optional(),
  "job": zod.string().optional(),
  "device": zod.string().optional(),
  "fstype": zod.string().optional(),
  "mountpoint": zod.string().optional(),
  "module": zod.string().optional(),
  "kind": zod.string().optional(),
  "ping": zod.string().optional()
}).optional(),
  "values": zod.array(zod.object({
  "timestamp": zod.number().optional(),
  "value": zod.string().optional()
})).optional()
})).optional()
})).optional()
})


export const metricsServiceGetOverviewStatusQueryParams = zod.object({
  "taskStartTime": zod.string().optional(),
  "taskEndTime": zod.string().optional()
})

export const metricsServiceGetOverviewStatusResponse = zod.object({
  "clusters": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "hosts": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "alerts": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "alertLevels": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "brTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "sysTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional(),
  "otherTasks": zod.array(zod.object({
  "status": zod.string().optional(),
  "count": zod.number().optional()
})).optional()
})


export const roleServiceListRolesQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "nameLike": zod.string().optional(),
  "name": zod.string().optional()
})

export const roleServiceListRolesResponse = zod.object({
  "roles": zod.array(zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.string().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const roleServiceCreateRoleBody = zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.string().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional()
})

export const roleServiceCreateRoleResponse = zod.object({
  "id": zod.number().optional(),
  "roleName": zod.string().optional(),
  "roleType": zod.string().optional(),
  "roleTypeDesc": zod.string().optional(),
  "detail": zod.string().optional(),
  "note": zod.string().optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const roleServiceDeleteRoleParams = zod.object({
  "roleId": zod.number()
})

export const roleServiceDeleteRoleResponse = zod.object({

})


export const userServiceListUsersQueryParams = zod.object({
  "pageSize": zod.number().optional(),
  "pageToken": zod.string().optional(),
  "skip": zod.number().optional(),
  "orderBy": zod.string().optional(),
  "nameLike": zod.string().optional(),
  "emailLike": zod.string().optional(),
  "roleName": zod.string().optional()
})

export const userServiceListUsersResponse = zod.object({
  "users": zod.array(zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})).optional(),
  "nextPageToken": zod.string().optional(),
  "totalSize": zod.number().optional()
})


export const userServiceCreateUserBody = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional()
})

export const userServiceCreateUserResponse = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const userServiceGetUserProfileResponse = zod.object({
  "id": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "phone": zod.string().optional()
})


export const userServiceGetUserParams = zod.object({
  "userId": zod.string()
})

export const userServiceGetUserResponse = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const userServiceDeleteUserParams = zod.object({
  "userId": zod.string()
})

export const userServiceDeleteUserResponse = zod.object({

})


export const userServiceUpdateUserParams = zod.object({
  "userId": zod.string()
})

export const userServiceUpdateUserBody = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional()
})

export const userServiceUpdateUserResponse = zod.object({
  "id": zod.string(),
  "userId": zod.string(),
  "name": zod.string(),
  "email": zod.string().optional(),
  "note": zod.string().optional(),
  "password": zod.string().optional(),
  "userType": zod.string().optional(),
  "userTypeDesc": zod.string().optional(),
  "phone": zod.string().optional(),
  "roles": zod.array(zod.object({
  "roleName": zod.string().optional(),
  "roleId": zod.number()
})).optional(),
  "createTime": zod.string().datetime().optional(),
  "updateTime": zod.string().datetime().optional()
})


export const userServiceResetPasswordParams = zod.object({
  "userId": zod.string()
})

export const userServiceResetPasswordBody = zod.object({
  "newPassword": zod.string()
})

export const userServiceResetPasswordResponse = zod.object({

})


export const userServiceChangePasswordBody = zod.object({
  "userId": zod.string(),
  "oldPassword": zod.string().optional(),
  "newPassword": zod.string()
})

export const userServiceChangePasswordResponse = zod.object({

})


export const userServiceValidateSessionResponse = zod.object({
  "userId": zod.string()
})

