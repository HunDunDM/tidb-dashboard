/* md5: d8f6e78671baba3456857e0f42d2dd26 */
/* Rap repository id: 18 */
/* @infra/generation version: 0.0.2 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

/**
 * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify
 * Rap repository url: https://rapapi.cn/repository/editor?id=18
 */

export interface IModels {
  /**
   * Interface name：Example Interface
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=53&itf=224
   *
   */
  'GET/example/1730195357072': {
    Req: IModels['GET/example/1730195357072']['Header'] &
      IModels['GET/example/1730195357072']['Query'] &
      IModels['GET/example/1730195357072']['Body']
    Header: {}
    Query: {
      /**
       * example request attribute
       */
      foo?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      /**
       * example string attribute
       */
      string?: string
      /**
       * example number attribute
       */
      number?: number
      /**
       * example boolean attribute
       */
      boolean?: boolean
      /**
       * example regexp attribute
       */
      regexp?: string
      /**
       * example function attribute
       */
      function?: string
      /**
       * example array attribute
       */
      array?: {
        /**
         * example array element attribute
         */
        foo?: number
        /**
         * example array element attribute
         */
        bar?: string
      }[]
      /**
       * example customized array element attribute
       */
      items?: unknown[]
      /**
       * example object attribute
       */
      object?: {
        /**
         * example object attribute
         */
        foo?: number
        /**
         * example object attribute
         */
        bar?: string
      }
      /**
       * example placeholder
       */
      placeholder?: string
    }
  }

  /**
   * Interface name：Advise indexes on the specified cluster.
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=238
   *
   */
  'POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/advise_indexes': {
    Req: IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/advise_indexes']['Header'] &
      IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/advise_indexes']['Query'] &
      IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/advise_indexes']['Body']
    Header: {}
    Query: {
      /**
       * The ID of the org.
       */
      org_id: string
      /**
       * The ID of the project.
       */
      project_id: string
      /**
       * The ID of the cluster.
       */
      cluster_id: string
      with_cloud_admin?: boolean
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {
      /**
       * The name of the database.
       */
      database_name: string
      /**
       * Queries
       */
      queries: string[]
    }
    Res: {
      /**
       * The items of databases in the cluster.
       */
      text: string
      base_resp: {
        err_code?: string
        tags?: {}
        err_msg?: string
      }
    }
  }

  /**
   * Interface name：Apply an index advisor record.
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=239
   *
   */
  'POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/apply_advice': {
    Req: IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/apply_advice']['Header'] &
      IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/apply_advice']['Query'] &
      IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/apply_advice']['Body']
    Header: {}
    Query: {
      /**
       * The ID of the org.
       */
      org_id: string
      /**
       * The ID of the project.
       */
      project_id: string
      /**
       * The ID of the cluster.
       */
      cluster_id: string
      with_cloud_admin?: boolean
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {
      /**
       * The ID of the advice record.
       */
      advice_id: string
    }
    Res: {
      base_resp: {
        tags?: {}
        err_msg?: string
        err_code?: string
      }
    }
  }

  /**
   * Interface name：Close an index advisor record.
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=240
   *
   */
  'POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/close_advice': {
    Req: IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/close_advice']['Header'] &
      IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/close_advice']['Query'] &
      IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/close_advice']['Body']
    Header: {}
    Query: {
      /**
       * The ID of the org.
       */
      org_id: string
      /**
       * The ID of the project.
       */
      project_id: string
      /**
       * The ID of the cluster.
       */
      cluster_id: string
      with_cloud_admin?: boolean
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {
      /**
       * The ID of the advice record.
       */
      advice_id: string
    }
    Res: {
      base_resp: {
        tags?: {}
        err_code?: string
        err_msg?: string
      }
    }
  }

  /**
   * Interface name：List databases of a cluster.
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=241
   *
   */
  'GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/databases': {
    Req: IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/databases']['Header'] &
      IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/databases']['Query'] &
      IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/databases']['Body']
    Header: {}
    Query: {
      /**
       * The ID of the org.
       */
      org_id: string
      /**
       * The ID of the project.
       */
      project_id: string
      /**
       * The ID of the cluster.
       */
      cluster_id: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      /**
       * The items of databases in the cluster.
       */
      databases: unknown[]
      base_resp: {
        tags?: {}
        err_msg?: string
        err_code?: string
      }
    }
  }

  /**
   * Interface name：Create a database of a cluster.
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=242
   *
   */
  'POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/databases': {
    Req: IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/databases']['Header'] &
      IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/databases']['Query'] &
      IModels['POST/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/databases']['Body']
    Header: {}
    Query: {
      /**
       * The ID of the org.
       */
      org_id: string
      /**
       * The ID of the project.
       */
      project_id: string
      /**
       * The ID of the cluster.
       */
      cluster_id: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {
      /**
       * The name of the database.
       */
      database_name: string
    }
    Res: {
      base_resp: {
        tags?: {}
        err_code?: string
        err_msg?: string
      }
    }
  }

  /**
   * Interface name：List index advisor results of a cluster.
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=243
   *
   */
  'GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices': {
    Req: IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices']['Header'] &
      IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices']['Query'] &
      IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices']['Body']
    Header: {}
    Query: {
      /**
       * The ID of the org.
       */
      org_id: string
      /**
       * The ID of the project.
       */
      project_id: string
      /**
       * The ID of the cluster.
       */
      cluster_id: string
      /**
       * The number of pages.
       */
      page_token?: number
      /**
       * The size of a page.
       */
      page_size?: number
      /**
       * The state to filter result.
       */
      state_filter?: string
      /**
       * The name of database or table to filter result.
       */
      name_filter?: string
      /**
       * The column used to order result.
       */
      order_by?: string
      /**
       * If ordered result should be in descending order.
       */
      desc?: boolean
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      /**
       * The items of index advisor results.
       */
      advices: {
        id?: string
        database?: string
        name?: string
        table?: string
        last_recommend_time?: string
        state?: string
        index_statement?: string
        improvement?: number
        index_size?: number
        reason?: string
        top_impacted_queries?: {
          query?: string
          improvement?: number
        }[]
        state_reason?: string
        cost_saving_monthly?: number
        cost_saving_per_query?: number
      }[]
      /**
       * total items count considering filter
       */
      total?: number
      base_resp: {
        tags?: {}
        err_msg?: string
        err_code?: string
      }
    }
  }

  /**
   * Interface name：Get detail of a index advice.
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=244
   *
   */
  'GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices/{advice_id}': {
    Req: IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices/{advice_id}']['Header'] &
      IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices/{advice_id}']['Query'] &
      IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices/{advice_id}']['Body']
    Header: {}
    Query: {
      /**
       * The ID of the org.
       */
      org_id: string
      /**
       * The ID of the project.
       */
      project_id: string
      /**
       * The ID of the cluster.
       */
      cluster_id: string
      /**
       * The ID of the advice.
       */
      advice_id: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      advice?: {
        id?: string
        name?: string
        database?: string
        table?: string
        last_recommend_time?: string
        index_statement?: string
        cost_saving_monthly?: number
        state?: string
        improvement?: number
        index_size?: number
        reason?: string
        state_reason?: string
        top_impacted_queries?: {
          query?: string
          improvement?: number
        }[]
        cost_saving_per_query?: number
      }
      base_resp?: {
        tags?: {}
        err_code?: string
        err_msg?: string
      }
    }
  }

  /**
   * Interface name：GetProcessList retrieves the list of running processes in a cluster
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=351
   *
   */
  'GET/api/v2/clusters/{clusterId}/sessions': {
    Req: IModels['GET/api/v2/clusters/{clusterId}/sessions']['Header'] &
      IModels['GET/api/v2/clusters/{clusterId}/sessions']['Query'] &
      IModels['GET/api/v2/clusters/{clusterId}/sessions']['Body']
    Header: {}
    Query: {
      /**
       * Cluster ID uniquely identifies the target cluster
       */
      clusterId: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      clusterProcessList?: {
        instance?: string
        user?: string
        id?: string
        host?: string
        db?: string
        /**
         * 枚举值: Sleep,Quit,Init DB,Query,Field List,Create DB,Drop DB,Refresh,Shutdown,Statistics,Processlist,Connect,Kill,Debug,Ping,Time,Delayed Insert,Change User,Binlog Dump,Table Dump,Connect out,Register Slave,Prepare,Execute,Long Data,Close stmt,Reset stmt,Set option,Fetch,Daemon,Binlog Dump,Reset connect
         */
        command?:
          | 'Sleep'
          | 'Quit'
          | 'Init DB'
          | 'Query'
          | 'Field List'
          | 'Create DB'
          | 'Drop DB'
          | 'Refresh'
          | 'Shutdown'
          | 'Statistics'
          | 'Processlist'
          | 'Connect'
          | 'Kill'
          | 'Debug'
          | 'Ping'
          | 'Time'
          | 'Delayed Insert'
          | 'Change User'
          | 'Binlog Dump'
          | 'Table Dump'
          | 'Connect out'
          | 'Register Slave'
          | 'Prepare'
          | 'Execute'
          | 'Long Data'
          | 'Close stmt'
          | 'Reset stmt'
          | 'Set option'
          | 'Fetch'
          | 'Daemon'
          | 'Binlog Dump'
          | 'Reset connect'
        time?: string
        state?: string
        info?: string
        mem?: string
        digest?: string
        disk?: string
        resourceGroup?: string
        sessionAlias?: string
        rowsAffected?: string
        tidbCpu?: string
        tikvCpu?: string
        txnStart?: string
      }[]
      isSupportKill?: boolean
      totalProcessCount?: string
      activeProcessCount?: string
    }
  }

  /**
   * Interface name：Get summary of open index advices.
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=245
   *
   */
  'GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices_summary': {
    Req: IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices_summary']['Header'] &
      IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices_summary']['Query'] &
      IModels['GET/api/v1/serverless/orgs/{org_id}/projects/{project_id}/clusters/{cluster_id}/index_advices_summary']['Body']
    Header: {}
    Query: {
      /**
       * The ID of the org.
       */
      org_id: string
      /**
       * The ID of the project.
       */
      project_id: string
      /**
       * The ID of the cluster.
       */
      cluster_id: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      open_count?: number
      improvement?: number
      cost_saving_monthly?: number
      base_resp?: {
        tags?: {}
        err_code?: string
        err_msg?: string
      }
    }
  }

  /**
   * Interface name：DeleteProcess terminates a specific process in the cluster
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=58&itf=352
   *
   */
  'DELETE/api/v2/clusters/{clusterId}/sessions/{sessionId}': {
    Req: IModels['DELETE/api/v2/clusters/{clusterId}/sessions/{sessionId}']['Header'] &
      IModels['DELETE/api/v2/clusters/{clusterId}/sessions/{sessionId}']['Query'] &
      IModels['DELETE/api/v2/clusters/{clusterId}/sessions/{sessionId}']['Body']
    Header: {}
    Query: {
      /**
       * Cluster ID uniquely identifies the target cluster
       */
      clusterId: string
      /**
       * Session ID identifies the process to be terminated
       */
      sessionId: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {}
  }

  /**
   * Interface name：Get cluster metric data
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=71&itf=345
   *
   */
  'GET/api/v2/clusters/{clusterId}/metrics/{name}/data': {
    Req: IModels['GET/api/v2/clusters/{clusterId}/metrics/{name}/data']['Header'] &
      IModels['GET/api/v2/clusters/{clusterId}/metrics/{name}/data']['Query'] &
      IModels['GET/api/v2/clusters/{clusterId}/metrics/{name}/data']['Body']
    Header: {}
    Query: {
      /**
       * Cluster ID
       */
      clusterId: string
      /**
       * Metric Name
       */
      name: string
      /**
       * Start time in Unix timestamp format
       */
      startTime: string
      /**
       * End time in Unix timestamp format
       */
      endTime: string
      /**
       * Step time in seconds
       */
      step?: string
      /**
       * Line Label for the metric
       */
      label?: string
      /**
       * Time Range for the query
       */
      range?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      status?: string
      data?: {
        expr?: string
        legend?: string
        result?: {
          metric?: {
            instance?: string
            txnMode?: string
            sqlType?: string
            result?: string
            job?: string
            type?: string
            device?: string
            fstype?: string
            mountpoint?: string
          }
          values?: {
            timestamp?: number
            value?: string
          }[]
        }[]
      }[]
    }
  }

  /**
   * Interface name：Get metric instances
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=71&itf=346
   *
   */
  'GET/api/v2/clusters/{clusterId}/metrics/{name}/instance': {
    Req: IModels['GET/api/v2/clusters/{clusterId}/metrics/{name}/instance']['Header'] &
      IModels['GET/api/v2/clusters/{clusterId}/metrics/{name}/instance']['Query'] &
      IModels['GET/api/v2/clusters/{clusterId}/metrics/{name}/instance']['Body']
    Header: {}
    Query: {
      /**
       * Cluster ID
       */
      clusterId: string
      /**
       * Metric name
       */
      name: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      type?: string
      instanceList?: string[]
    }
  }

  /**
   * Interface name：Get host metric data
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=71&itf=347
   *
   */
  'GET/api/v2/hosts/{hostId}/metrics/{name}/data': {
    Req: IModels['GET/api/v2/hosts/{hostId}/metrics/{name}/data']['Header'] &
      IModels['GET/api/v2/hosts/{hostId}/metrics/{name}/data']['Query'] &
      IModels['GET/api/v2/hosts/{hostId}/metrics/{name}/data']['Body']
    Header: {}
    Query: {
      /**
       * Cluster ID
       */
      hostId: string
      /**
       * Metric Name
       */
      name: string
      /**
       * Start time in Unix timestamp format
       */
      startTime: string
      /**
       * End time in Unix timestamp format
       */
      endTime: string
      /**
       * Step time in seconds
       */
      step?: string
      /**
       * Line Label for the metric
       */
      label?: string
      /**
       * Time Range for the query
       */
      range?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      status?: string
      data?: {
        result?: {
          metric?: {
            instance?: string
            sqlType?: string
            type?: string
            fstype?: string
            device?: string
            job?: string
            result?: string
            txnMode?: string
            mountpoint?: string
          }
          values?: {
            timestamp?: number
            value?: string
          }[]
        }[]
        legend?: string
        expr?: string
      }[]
    }
  }

  /**
   * Interface name：Get metrics info
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=71&itf=348
   *
   */
  'GET/api/v2/metrics': {
    Req: IModels['GET/api/v2/metrics']['Header'] &
      IModels['GET/api/v2/metrics']['Query'] &
      IModels['GET/api/v2/metrics']['Body']
    Header: {}
    Query: {
      /**
       * Level 1 classification
       *
       *  - unspecified: Unspecified
       *  - cluster: Cluster metrics
       *  - host: Host metrics
       *  - overview: Overview metrics|枚举值: unspecified,cluster,host,overview
       */
      class?: 'unspecified' | 'cluster' | 'host' | 'overview'
      /**
       * Level 2 grouping
       *
       *  - unspecified: Unspecified group
       *  - overview: Overview group
       *  - basic: Basic group
       *  - advance: Advanced group
       *  - resource: Resource group
       *  - performance: Performance group
       *  - process: Process group|枚举值: unspecified,overview,basic,advance,resource,performance,process
       */
      group?:
        | 'unspecified'
        | 'overview'
        | 'basic'
        | 'advance'
        | 'resource'
        | 'performance'
        | 'process'
      /**
       * Level 3 type
       */
      type?: string
      /**
       * The metric name
       */
      name?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      metrics?: {
        class?: string
        group?: string
        type?: string
        order?: number
        displayName?: string
        name?: string
        description?: string
        metric?: {
          name?: string
          unit?: string
          description?: string
          minTidbVersion?: string
          maxTidbVersion?: string
          isBuiltin?: boolean
          expressions?: {
            name?: string
            promql?: string
            promMetric?: string
            labels?: string[]
            type?: string
            legend?: string
            minTidbVersion?: string
            maxTidbVersion?: string
          }[]
        }
      }[]
    }
  }

  /**
   * Interface name：Get top metric data
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=71&itf=349
   *
   */
  'GET/api/v2/overview/metrics/{name}/data': {
    Req: IModels['GET/api/v2/overview/metrics/{name}/data']['Header'] &
      IModels['GET/api/v2/overview/metrics/{name}/data']['Query'] &
      IModels['GET/api/v2/overview/metrics/{name}/data']['Body']
    Header: {}
    Query: {
      /**
       * Metric name to query
       */
      name: string
      /**
       * Start time for the query
       */
      startTime: string
      /**
       * End time for the query
       */
      endTime: string
      /**
       * Step time for the query
       */
      step?: string
      /**
       * Limit for the number of top results
       */
      limit?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      status?: string
      data?: {
        expr?: string
        legend?: string
        result?: {
          metric?: {
            sqlType?: string
            instance?: string
            result?: string
            type?: string
            txnMode?: string
            job?: string
            fstype?: string
            mountpoint?: string
            device?: string
          }
          values?: {
            timestamp?: number
            value?: string
          }[]
        }[]
      }[]
    }
  }

  /**
   * Interface name：Get overview status
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=71&itf=350
   *
   */
  'GET/api/v2/overview/status': {
    Req: IModels['GET/api/v2/overview/status']['Header'] &
      IModels['GET/api/v2/overview/status']['Query'] &
      IModels['GET/api/v2/overview/status']['Body']
    Header: {}
    Query: {
      /**
       * Task start time in Unix timestamp format
       */
      taskStartTime?: string
      /**
       * Task end time in Unix timestamp format
       */
      taskEndTime?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      clusters?: {
        status?: string
        count?: number
      }[]
      hosts?: {
        status?: string
        count?: number
      }[]
      alerts?: {
        status?: string
        count?: number
      }[]
      alertLevels?: {
        status?: string
        count?: number
      }[]
      brTasks?: {
        status?: string
        count?: number
      }[]
      sysTasks?: {
        status?: string
        count?: number
      }[]
      otherTasks?: {
        status?: string
        count?: number
      }[]
    }
  }

  /**
   * Interface name：login
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=72&itf=353
   *
   */
  'POST/api/v2/login': {
    Req: IModels['POST/api/v2/login']['Header'] &
      IModels['POST/api/v2/login']['Query'] &
      IModels['POST/api/v2/login']['Body']
    Header: {}
    Query: {
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {
      userId: string
      password?: string
    }
    Res: {}
  }

  /**
   * Interface name：Logout
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=72&itf=354
   *
   */
  'POST/api/v2/logout': {
    Req: IModels['POST/api/v2/logout']['Header'] &
      IModels['POST/api/v2/logout']['Query'] &
      IModels['POST/api/v2/logout']['Body']
    Header: {}
    Query: {
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {}
  }

  /**
   * Interface name：ListUsers
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=72&itf=355
   *
   */
  'GET/api/v2/users': {
    Req: IModels['GET/api/v2/users']['Header'] &
      IModels['GET/api/v2/users']['Query'] &
      IModels['GET/api/v2/users']['Body']
    Header: {}
    Query: {
      /**
       * Page size
       */
      pageSize?: number
      /**
       * Page token
       */
      pageToken?: string
      /**
       * Skip
       */
      skip?: number
      /**
       * order_by
       */
      orderBy?: string
      /**
       * The name of the user
       */
      name?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      users?: {
        userId: string
        password?: string
        email?: string
        name: string
      }[]
      nextPageToken?: string
      totalSize?: number
    }
  }

  /**
   * Interface name：CreateUser
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=72&itf=356
   *
   */
  'POST/api/v2/users': {
    Req: IModels['POST/api/v2/users']['Header'] &
      IModels['POST/api/v2/users']['Query'] &
      IModels['POST/api/v2/users']['Body']
    Header: {}
    Query: {
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {
      userId: string
      name: string
      email?: string
      password?: string
    }
    Res: {
      userId: string
      name: string
      email?: string
      password?: string
    }
  }

  /**
   * Interface name：delete one user by user_id
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=72&itf=357
   *
   */
  'DELETE/api/v2/users/{userId}': {
    Req: IModels['DELETE/api/v2/users/{userId}']['Header'] &
      IModels['DELETE/api/v2/users/{userId}']['Query'] &
      IModels['DELETE/api/v2/users/{userId}']['Body']
    Header: {}
    Query: {
      /**
       * The user_id of the user
       */
      userId: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {}
  }

  /**
   * Interface name：Update User
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=72&itf=358
   *
   */
  'PATCH/api/v2/users/{userId}': {
    Req: IModels['PATCH/api/v2/users/{userId}']['Header'] &
      IModels['PATCH/api/v2/users/{userId}']['Query'] &
      IModels['PATCH/api/v2/users/{userId}']['Body']
    Header: {}
    Query: {
      /**
       * The id of the user
       */
      userId: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {
      userId: string
      name: string
      email?: string
      password?: string
    }
    Res: {
      userId: string
      name: string
      email?: string
      password?: string
    }
  }

  /**
   * Interface name：ValidateSession
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=72&itf=359
   *
   */
  'GET/api/v2/users:validateSession': {
    Req: IModels['GET/api/v2/users:validateSession']['Header'] &
      IModels['GET/api/v2/users:validateSession']['Query'] &
      IModels['GET/api/v2/users:validateSession']['Body']
    Header: {}
    Query: {
      /**
       * scene key
       */
      __scene?: string
      validateSession?: string
    }
    Body: {}
    Res: {
      userId: string
    }
  }

  /**
   * Interface name：get index advisors list
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=54&itf=230
   *
   */
  'GET/index-advisor/list/{id}': {
    Req: IModels['GET/index-advisor/list/{id}']['Header'] &
      IModels['GET/index-advisor/list/{id}']['Query'] &
      IModels['GET/index-advisor/list/{id}']['Body']
    Header: {}
    Query: {
      /**
       * scene key
       */
      __scene?: string
      id?: string
    }
    Body: {}
    Res: {}
  }

  /**
   * Interface name：get slow query list
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=55&itf=227
   *
   */
  'GET/slow-query/list': {
    Req: IModels['GET/slow-query/list']['Header'] &
      IModels['GET/slow-query/list']['Query'] &
      IModels['GET/slow-query/list']['Body']
    Header: {}
    Query: {
      limit?: number
      term?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      items: {
        id: number
        query: string
        latency: number
      }[]
    }
  }

  /**
   * Interface name：get slow query detail
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=55&itf=228
   *
   */
  'GET/slow-query/detail': {
    Req: IModels['GET/slow-query/detail']['Header'] &
      IModels['GET/slow-query/detail']['Query'] &
      IModels['GET/slow-query/detail']['Body']
    Header: {}
    Query: {
      id: number
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      id: number
      query: string
      latency: number
    }
  }

  /**
   * Interface name：示例接口
   * Rap url: https://rapapi.cn/repository/editor?id=18&mod=70&itf=344
   *
   */
  'GET/example/1733710080151': {
    Req: IModels['GET/example/1733710080151']['Header'] &
      IModels['GET/example/1733710080151']['Query'] &
      IModels['GET/example/1733710080151']['Body']
    Header: {}
    Query: {
      /**
       * 请求属性示例
       */
      foo?: string
      /**
       * scene key
       */
      __scene?: string
    }
    Body: {}
    Res: {
      /**
       * 字符串属性示例
       */
      string?: string
      /**
       * 数字属性示例
       */
      number?: number
      /**
       * 布尔属性示例
       */
      boolean?: boolean
      /**
       * 正则属性示例
       */
      regexp?: string
      /**
       * 函数属性示例
       */
      function?: string
      /**
       * 数组属性示例
       */
      array?: {
        /**
         * 数组元素示例
         */
        foo?: number
        /**
         * 数组元素示例
         */
        bar?: string
      }[]
      /**
       * 自定义数组元素示例
       */
      items?: unknown[]
      /**
       * 对象属性示例
       */
      object?: {
        /**
         * 对象属性示例
         */
        foo?: number
        /**
         * 对象属性示例
         */
        bar?: string
      }
      /**
       * 占位符示例
       */
      placeholder?: string
    }
  }
}
