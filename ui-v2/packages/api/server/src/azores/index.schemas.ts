/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Azores Open API
 * OpenAPI spec version: 2.0.0
 */
export type UserServiceDeleteUser200 = { [key: string]: unknown };

export type UserServiceListUsersParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * The name of the user
 */
nameLike?: string;
/**
 * The email of the user
 */
emailLike?: string;
/**
 * The role name of the user
 */
roleName?: string;
};

export type RoleServiceDeleteRole200 = { [key: string]: unknown };

export type RoleServiceListRolesParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * The name of the role
 */
nameLike?: string;
/**
 * The email of the role
 */
emailLike?: string;
};

export type MetricsServiceGetOverviewStatusParams = {
/**
 * Task start time in Unix timestamp format
 */
taskStartTime?: string;
/**
 * Task end time in Unix timestamp format
 */
taskEndTime?: string;
};

export type MetricsServiceGetTopMetricDataParams = {
/**
 * Start time for the query
 */
startTime: string;
/**
 * End time for the query
 */
endTime: string;
/**
 * Step time for the query
 */
step?: string;
/**
 * Limit for the number of top results
 */
limit?: string;
};

export type MetricsServiceGetMetricsGroup = typeof MetricsServiceGetMetricsGroup[keyof typeof MetricsServiceGetMetricsGroup];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricsServiceGetMetricsGroup = {
  unspecified: 'unspecified',
  overview: 'overview',
  basic: 'basic',
  advance: 'advance',
  resource: 'resource',
  performance: 'performance',
  process: 'process',
} as const;

export type MetricsServiceGetMetricsClass = typeof MetricsServiceGetMetricsClass[keyof typeof MetricsServiceGetMetricsClass];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricsServiceGetMetricsClass = {
  unspecified: 'unspecified',
  cluster: 'cluster',
  host: 'host',
  overview: 'overview',
} as const;

export type MetricsServiceGetMetricsParams = {
/**
 * Level 1 classification

 - unspecified: Unspecified
 - cluster: Cluster metrics
 - host: Host metrics
 - overview: Overview metrics
 */
class?: MetricsServiceGetMetricsClass;
/**
 * Level 2 grouping

 - unspecified: Unspecified group
 - overview: Overview group
 - basic: Basic group
 - advance: Advanced group
 - resource: Resource group
 - performance: Performance group
 - process: Process group
 */
group?: MetricsServiceGetMetricsGroup;
/**
 * Level 3 type
 */
type?: string;
/**
 * The metric name
 */
name?: string;
};

export type UserServiceLogout200 = { [key: string]: unknown };

export type UserServiceLogin200 = { [key: string]: unknown };

export type MetricsServiceGetHostMetricDataParams = {
/**
 * Start time in Unix timestamp format
 */
startTime: string;
/**
 * End time in Unix timestamp format
 */
endTime: string;
/**
 * Step time in seconds
 */
step?: string;
/**
 * Line Label for the metric
 */
label?: string;
/**
 * Time Range for the query
 */
range?: string;
};

export type ClusterServiceDeleteProcess200 = { [key: string]: unknown };

export type MetricsServiceGetClusterMetricDataParams = {
/**
 * Start time in Unix timestamp format
 */
startTime: string;
/**
 * End time in Unix timestamp format
 */
endTime: string;
/**
 * Step time in seconds
 */
step?: string;
/**
 * Line Label for the metric
 */
label?: string;
/**
 * Time Range for the query
 */
range?: string;
};

export type ApiKeyServiceDeleteApiKey200 = { [key: string]: unknown };

export type ApiKeyServiceListApiKeysParams = {
/**
 * Page size
 */
pageSize?: number;
/**
 * Page token
 */
pageToken?: string;
/**
 * Skip
 */
skip?: number;
/**
 * order_by
 */
orderBy?: string;
/**
 * The access_key of the apikey
 */
accessKey?: string;
/**
 * The access_key of the apikey
 */
creator?: string;
/**
 * The status of the apikey
 */
status?: string;
};

export interface V2ValidateSessionResponse {
  userId: string;
}

export interface V2UserRole {
  roleId: number;
  roleName?: string;
}

export interface V2User {
  readonly createTime?: string;
  email?: string;
  id: string;
  name: string;
  note?: string;
  password?: string;
  phone?: string;
  roles?: V2UserRole[];
  readonly updateTime?: string;
  userId: string;
  userType?: string;
  userTypeDesc?: string;
}

export interface V2TopMetricData {
  data?: V2ExprQueryData[];
  status?: string;
}

export interface V2StatusCount {
  count?: number;
  status?: string;
}

export interface V2Role {
  readonly createTime?: string;
  detail?: string;
  id?: number;
  note?: string;
  roleName?: string;
  roleType?: string;
  roleTypeDesc?: string;
  readonly updateTime?: string;
}

export interface V2QueryMetric {
  device?: string;
  fstype?: string;
  instance?: string;
  job?: string;
  kind?: string;
  module?: string;
  mountpoint?: string;
  ping?: string;
  result?: string;
  sqlType?: string;
  txnMode?: string;
  type?: string;
}

export interface V2QueryResult {
  metric?: V2QueryMetric;
  values?: Metricsv2Value[];
}

export interface V2ProcessList {
  activeProcessCount?: string;
  clusterProcessList?: V2ClusterProcess[];
  isSupportKill?: boolean;
  totalProcessCount?: string;
}

export interface V2OverviewStatus {
  alertLevels?: V2StatusCount[];
  alerts?: V2StatusCount[];
  brTasks?: V2StatusCount[];
  clusters?: V2StatusCount[];
  hosts?: V2StatusCount[];
  otherTasks?: V2StatusCount[];
  sysTasks?: V2StatusCount[];
}

export interface V2Metrics {
  metrics?: V2CategoryMetricDetail[];
}

export interface V2MetricWithExpressions {
  description?: string;
  expressions?: V2ExpressionWithLegend[];
  isBuiltin?: boolean;
  maxTidbVersion?: string;
  minTidbVersion?: string;
  name?: string;
  unit?: string;
}

export interface V2LoginRequest {
  password?: string;
  userId: string;
}

export interface V2ListUsersResponse {
  nextPageToken?: string;
  totalSize?: number;
  users?: V2User[];
}

export interface V2ListRolesResponse {
  nextPageToken?: string;
  roles?: V2Role[];
  totalSize?: number;
}

export interface V2ListApiKeysResponse {
  apikeys?: V2ApiKey[];
  nextPageToken?: string;
  totalSize?: number;
}

export interface V2HostMetricData {
  data?: V2ExprQueryData[];
  status?: string;
}

/**
 * - unspecified: Unspecified group
 - overview: Overview group
 - basic: Basic group
 - advance: Advanced group
 - resource: Resource group
 - performance: Performance group
 - process: Process group
 */
export type V2GroupEnumData = typeof V2GroupEnumData[keyof typeof V2GroupEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2GroupEnumData = {
  unspecified: 'unspecified',
  overview: 'overview',
  basic: 'basic',
  advance: 'advance',
  resource: 'resource',
  performance: 'performance',
  process: 'process',
} as const;

export interface V2ExpressionWithLegend {
  labels?: string[];
  legend?: string;
  maxTidbVersion?: string;
  minTidbVersion?: string;
  name?: string;
  promMetric?: string;
  promql?: string;
  type?: string;
}

export interface V2ExprQueryData {
  expr?: string;
  legend?: string;
  result?: V2QueryResult[];
}

export type V2ClusterProcessCommand = typeof V2ClusterProcessCommand[keyof typeof V2ClusterProcessCommand];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ClusterProcessCommand = {
  Sleep: 'Sleep',
  Quit: 'Quit',
  Init_DB: 'Init DB',
  Query: 'Query',
  Field_List: 'Field List',
  Create_DB: 'Create DB',
  Drop_DB: 'Drop DB',
  Refresh: 'Refresh',
  Shutdown: 'Shutdown',
  Statistics: 'Statistics',
  Processlist: 'Processlist',
  Connect: 'Connect',
  Kill: 'Kill',
  Debug: 'Debug',
  Ping: 'Ping',
  Time: 'Time',
  Delayed_Insert: 'Delayed Insert',
  Change_User: 'Change User',
  Binlog_Dump: 'Binlog Dump',
  Table_Dump: 'Table Dump',
  Connect_out: 'Connect out',
  Register_Slave: 'Register Slave',
  Prepare: 'Prepare',
  Execute: 'Execute',
  Long_Data: 'Long Data',
  Close_stmt: 'Close stmt',
  Reset_stmt: 'Reset stmt',
  Set_option: 'Set option',
  Fetch: 'Fetch',
  Daemon: 'Daemon',
  Reset_connect: 'Reset connect',
} as const;

export interface V2ClusterProcess {
  command?: V2ClusterProcessCommand;
  db?: string;
  digest?: string;
  disk?: string;
  host?: string;
  id?: string;
  info?: string;
  instance?: string;
  mem?: string;
  resourceGroup?: string;
  rowsAffected?: string;
  sessionAlias?: string;
  state?: string;
  tidbCpu?: string;
  tikvCpu?: string;
  time?: string;
  txnStart?: string;
  user?: string;
}

export interface V2ClusterMetricInstance {
  instanceList?: string[];
  type?: string;
}

export interface V2ClusterMetricData {
  data?: V2ExprQueryData[];
  status?: string;
}

/**
 * - unspecified: Unspecified
 - cluster: Cluster metrics
 - host: Host metrics
 - overview: Overview metrics
 */
export type V2ClassEnumData = typeof V2ClassEnumData[keyof typeof V2ClassEnumData];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ClassEnumData = {
  unspecified: 'unspecified',
  cluster: 'cluster',
  host: 'host',
  overview: 'overview',
} as const;

export interface V2CategoryMetricDetail {
  class?: string;
  description?: string;
  displayName?: string;
  group?: string;
  metric?: V2MetricWithExpressions;
  name?: string;
  order?: number;
  type?: string;
}

export type V2ApiKeyStatus = typeof V2ApiKeyStatus[keyof typeof V2ApiKeyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V2ApiKeyStatus = {
  disable: 'disable',
  enable: 'enable',
} as const;

export interface V2ApiKey {
  accessKey: string;
  readonly createTime?: string;
  creator?: string;
  secretKey: string;
  status?: V2ApiKeyStatus;
  readonly updateTime?: string;
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a
URL that describes the type of the serialized message.

Protobuf library provides support to pack/unpack Any values in the form
of utility functions or additional generated methods of the Any type.

Example 1: Pack and unpack a message in C++.

    Foo foo = ...;
    Any any;
    any.PackFrom(foo);
    ...
    if (any.UnpackTo(&foo)) {
      ...
    }

Example 2: Pack and unpack a message in Java.

    Foo foo = ...;
    Any any = Any.pack(foo);
    ...
    if (any.is(Foo.class)) {
      foo = any.unpack(Foo.class);
    }

 Example 3: Pack and unpack a message in Python.

    foo = Foo(...)
    any = Any()
    any.Pack(foo)
    ...
    if any.Is(Foo.DESCRIPTOR):
      any.Unpack(foo)
      ...

 Example 4: Pack and unpack a message in Go

     foo := &pb.Foo{...}
     any, err := anypb.New(foo)
     if err != nil {
       ...
     }
     ...
     foo := &pb.Foo{}
     if err := any.UnmarshalTo(foo); err != nil {
       ...
     }

The pack methods provided by protobuf library will by default use
'type.googleapis.com/full.type.name' as the type URL and the unpack
methods only use the fully qualified type name after the last '/'
in the type URL, for example "foo.bar.com/x/y.z" will yield type
name "y.z".


JSON
====
The JSON representation of an `Any` value uses the regular
representation of the deserialized, embedded message, with an
additional field `@type` which contains the type URL. Example:

    package google.profile;
    message Person {
      string first_name = 1;
      string last_name = 2;
    }

    {
      "@type": "type.googleapis.com/google.profile.Person",
      "firstName": <string>,
      "lastName": <string>
    }

If the embedded message type is well-known and has a custom JSON
representation, that representation will be embedded adding a field
`value` which holds the custom JSON in addition to the `@type`
field. Example (for message [google.protobuf.Duration][]):

    {
      "@type": "type.googleapis.com/google.protobuf.Duration",
      "value": "1.212s"
    }
 */
export interface ProtobufAny {
  /** A URL/resource name that uniquely identifies the type of the serialized
protocol buffer message. This string must contain at least
one "/" character. The last segment of the URL's path must represent
the fully qualified name of the type (as in
`path/google.protobuf.Duration`). The name should be in a canonical form
(e.g., leading "." is not accepted).

In practice, teams usually precompile into the binary all types that they
expect it to use in the context of Any. However, for URLs which use the
scheme `http`, `https`, or no scheme, one can optionally set up a type
server that maps type URLs to message definitions as follows:

* If no scheme is provided, `https` is assumed.
* An HTTP GET on the URL must yield a [google.protobuf.Type][]
  value in binary format, or produce an error.
* Applications are allowed to cache lookup results based on the
  URL, or have them precompiled into a binary to avoid any
  lookup. Therefore, binary compatibility needs to be preserved
  on changes to types. (Use versioned type names to manage
  breaking changes.)

Note: this functionality is not currently available in the official
protobuf release, and it is not used for type URLs beginning with
type.googleapis.com.

Schemes other than `http`, `https` (or the empty scheme) might be
used with implementation specific semantics. */
  '@type'?: string;
  [key: string]: unknown;
}

export type RpcStatusError = {
  code?: number;
  details?: ProtobufAny[];
  message?: string;
  status?: string;
};

export interface RpcStatus {
  error?: RpcStatusError;
}

export interface Metricsv2Value {
  timestamp?: number;
  value?: string;
}

